{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started # With Coiote IoT Device Management platform, you can integrate your LwM2M devices with the Microsoft Azure IoT Hub and Azure IoT Central. This guide will take you on a step-by-step journey through the integration process to make it seamless and efficient. Here\u2019s how you can get started with the Coiote DM \u2013 Azure IoT integration: Configure integration with Azure IoT Central Configure integration with Azure IoT Hub","title":"Getting started"},{"location":"#getting-started","text":"With Coiote IoT Device Management platform, you can integrate your LwM2M devices with the Microsoft Azure IoT Hub and Azure IoT Central. This guide will take you on a step-by-step journey through the integration process to make it seamless and efficient. Here\u2019s how you can get started with the Coiote DM \u2013 Azure IoT integration: Configure integration with Azure IoT Central Configure integration with Azure IoT Hub","title":"Getting started"},{"location":"Azure_IoT_Central_integration/Configuring_Azure_IoT_Central_integration_extension/","text":"Configuring integration extension # To enable communication and data flow between the Azure IoT Central and Coiote DM platforms, you first need to integrate them using the dedicated extension module in Coiote DM. Follow the instruction below to learn how to do it. Prerequisites: # An active IoT Central with hub owner access permissions. A Coiote DM user account with permissions to use the integration extension. Get the Azure IoT Central integration credentials # In your Azure IoT Central account view, go to Administration : Under Your application , copy the full Application URL (along with '.azureiotcentral.com') into Notepad or other place to keep it for later. From the Administration menu, select API tokens and click generate token . In the pop-up window that appears, click the copy icon for the newly generated token. Now you need to use the obtained credentials in the Coiote DM platform. Set up the Azure IoT Hub Extension using credentials. # In your Coiote DM user account, go to Administration --> Extensions . Find the Azure IoT Central tab and click Setup . Inside the tab: paste the previously copied Azure IoT Central Application URL , provide the API token and, if needed, enter your Device Provisioning Service hostname (however, the default address provided is sufficient in most cases). use Test connection to see if the connection can be established correctly. click Save to keep the setting. Next steps # Importing devices to Coiote DM Exporting devices to Azure IoT Central","title":"Configuring integration extension"},{"location":"Azure_IoT_Central_integration/Configuring_Azure_IoT_Central_integration_extension/#configuring-integration-extension","text":"To enable communication and data flow between the Azure IoT Central and Coiote DM platforms, you first need to integrate them using the dedicated extension module in Coiote DM. Follow the instruction below to learn how to do it.","title":"Configuring integration extension"},{"location":"Azure_IoT_Central_integration/Configuring_Azure_IoT_Central_integration_extension/#prerequisites","text":"An active IoT Central with hub owner access permissions. A Coiote DM user account with permissions to use the integration extension.","title":"Prerequisites:"},{"location":"Azure_IoT_Central_integration/Configuring_Azure_IoT_Central_integration_extension/#get-the-azure-iot-central-integration-credentials","text":"In your Azure IoT Central account view, go to Administration : Under Your application , copy the full Application URL (along with '.azureiotcentral.com') into Notepad or other place to keep it for later. From the Administration menu, select API tokens and click generate token . In the pop-up window that appears, click the copy icon for the newly generated token. Now you need to use the obtained credentials in the Coiote DM platform.","title":"Get the Azure IoT Central integration credentials"},{"location":"Azure_IoT_Central_integration/Configuring_Azure_IoT_Central_integration_extension/#set-up-the-azure-iot-hub-extension-using-credentials","text":"In your Coiote DM user account, go to Administration --> Extensions . Find the Azure IoT Central tab and click Setup . Inside the tab: paste the previously copied Azure IoT Central Application URL , provide the API token and, if needed, enter your Device Provisioning Service hostname (however, the default address provided is sufficient in most cases). use Test connection to see if the connection can be established correctly. click Save to keep the setting.","title":"Set up the Azure IoT Hub Extension using credentials."},{"location":"Azure_IoT_Central_integration/Configuring_Azure_IoT_Central_integration_extension/#next-steps","text":"Importing devices to Coiote DM Exporting devices to Azure IoT Central","title":"Next steps"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/","text":"Exporting devices to Azure IoT Central # If you have device entities in Coiote DM that you would like to manage via the Azure IoT Central, you may use the export functionality. Follow the instruction below to learn how to do it in four basic steps: Create a device Create a group of devices for export Export your Coiote DM devices to CSV Import the CSV file to Azure IoT Central Create a device entity in Coiote DM # If you don't have any devices in your Coiote DM Device Inventory , follow these instructions to add one or more devices. In the Coiote DM Device Inventory , select Device Creator . In the next screen, choose the Connect your LwM2M device directly via the Management server . In the Device credentials step, provide a name for your device, then select NoSec from the Security mode list and click Add device . In the pop-up window, click Confirm to add your device entity. Now it should be listed in Device Inventory . Create a group of devices for export # Now that you have some devices added, you need to insert all the devices to be exported into a common group for ease of configuration. In Coiote DM, go to Device Inventory , filter the devices you would like to export and use the Add to group action. In the pop-up window that appears, select Add to new group , provide a name for the group and click Confirm . Export your devices to CSV # You are now ready to export your devices. In the Device groups panel, select your group of devices for export and click the Actions tab. Under Management , select the Export devices to Azure IoT Central . In the pop-up window: mark Skip already exported devices optionally if you have already exported some of the devices belonging to this group. select Export to CSV . After a moment, the export operation should finish and a CSV file should start downloading. Import the CSV file to Azure IoT Central # Once you have the CSV file downloaded, you can use it to import the devices into Azure IoT Central. From the left pane of your Azure IoT Central account, choose Devices and select a device template into which you want to import the devices. Select Import . In the pop-up that appears, select the previously downloaded CSV file. The import process should start. Its status can be tracked in the Device Operations panel in the top right-hand corner. Once the import process is complete, a success message should appear. If there are any errors, a log file will be generated in Device Operations that you can download. Note To learn more about importing device entities to Azure IoT Central, click here . Next steps #","title":"Exporting devices to Azure IoT Central"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/#exporting-devices-to-azure-iot-central","text":"If you have device entities in Coiote DM that you would like to manage via the Azure IoT Central, you may use the export functionality. Follow the instruction below to learn how to do it in four basic steps: Create a device Create a group of devices for export Export your Coiote DM devices to CSV Import the CSV file to Azure IoT Central","title":"Exporting devices to Azure IoT Central"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/#create-a-device-entity-in-coiote-dm","text":"If you don't have any devices in your Coiote DM Device Inventory , follow these instructions to add one or more devices. In the Coiote DM Device Inventory , select Device Creator . In the next screen, choose the Connect your LwM2M device directly via the Management server . In the Device credentials step, provide a name for your device, then select NoSec from the Security mode list and click Add device . In the pop-up window, click Confirm to add your device entity. Now it should be listed in Device Inventory .","title":"Create a device entity in Coiote DM"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/#create-a-group-of-devices-for-export","text":"Now that you have some devices added, you need to insert all the devices to be exported into a common group for ease of configuration. In Coiote DM, go to Device Inventory , filter the devices you would like to export and use the Add to group action. In the pop-up window that appears, select Add to new group , provide a name for the group and click Confirm .","title":"Create a group of devices for export"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/#export-your-devices-to-csv","text":"You are now ready to export your devices. In the Device groups panel, select your group of devices for export and click the Actions tab. Under Management , select the Export devices to Azure IoT Central . In the pop-up window: mark Skip already exported devices optionally if you have already exported some of the devices belonging to this group. select Export to CSV . After a moment, the export operation should finish and a CSV file should start downloading.","title":"Export your devices to CSV"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/#import-the-csv-file-to-azure-iot-central","text":"Once you have the CSV file downloaded, you can use it to import the devices into Azure IoT Central. From the left pane of your Azure IoT Central account, choose Devices and select a device template into which you want to import the devices. Select Import . In the pop-up that appears, select the previously downloaded CSV file. The import process should start. Its status can be tracked in the Device Operations panel in the top right-hand corner. Once the import process is complete, a success message should appear. If there are any errors, a log file will be generated in Device Operations that you can download. Note To learn more about importing device entities to Azure IoT Central, click here .","title":"Import the CSV file to Azure IoT Central"},{"location":"Azure_IoT_Central_integration/Device_operations/Exporting_devices_to_Azure_IoT_Central/#next-steps","text":"","title":"Next steps"},{"location":"Azure_IoT_Central_integration/Device_operations/Importing_devices_to_Coiote_DM/","text":"Importing devices to Coiote DM # If you would like to migrate any device entities from your Azure IoT Central to the Coiote DM platform for full management possibilities, follow the instruction below. Prerequisites # Configured and working Azure IoT Hub integration extension (see Configuring the Azure IoT Central integration extension for details). Add devices to Azure IoT Central # If you don't have any device entities added in your Azure IoT Central, follow these steps to learn how to do it: In your Azure IoT Central account, go to Devices , select All Devices and click +New . In the panel, click +New . Provide your device name and ID in the relevant field and click Create . Sync your devices # In order to establish communication and data flow between device entities in Azure IoT Central and their Coiote DM counterparts, you need to sync them. Go to Device inventory , click the Sync with IoT platform button and select Azure IoT Central . In the pop-up window: from the list, select the devices for synchronization. click Sync devices to start the synchronization. After a successful sync, the devices should be listed in Device inventory . Next steps #","title":"Importing devices to Coiote DM"},{"location":"Azure_IoT_Central_integration/Device_operations/Importing_devices_to_Coiote_DM/#importing-devices-to-coiote-dm","text":"If you would like to migrate any device entities from your Azure IoT Central to the Coiote DM platform for full management possibilities, follow the instruction below.","title":"Importing devices to Coiote DM"},{"location":"Azure_IoT_Central_integration/Device_operations/Importing_devices_to_Coiote_DM/#prerequisites","text":"Configured and working Azure IoT Hub integration extension (see Configuring the Azure IoT Central integration extension for details).","title":"Prerequisites"},{"location":"Azure_IoT_Central_integration/Device_operations/Importing_devices_to_Coiote_DM/#add-devices-to-azure-iot-central","text":"If you don't have any device entities added in your Azure IoT Central, follow these steps to learn how to do it: In your Azure IoT Central account, go to Devices , select All Devices and click +New . In the panel, click +New . Provide your device name and ID in the relevant field and click Create .","title":"Add devices to Azure IoT Central"},{"location":"Azure_IoT_Central_integration/Device_operations/Importing_devices_to_Coiote_DM/#sync-your-devices","text":"In order to establish communication and data flow between device entities in Azure IoT Central and their Coiote DM counterparts, you need to sync them. Go to Device inventory , click the Sync with IoT platform button and select Azure IoT Central . In the pop-up window: from the list, select the devices for synchronization. click Sync devices to start the synchronization. After a successful sync, the devices should be listed in Device inventory .","title":"Sync your devices"},{"location":"Azure_IoT_Central_integration/Device_operations/Importing_devices_to_Coiote_DM/#next-steps","text":"","title":"Next steps"},{"location":"Azure_IoT_Central_integration/Device_operations/Overview/","text":"Overview # How synchronization works # Coiote DM provides zero-touch provisioning for synchronized devices from Azure IoT Central. This means that device entities are automatically created within Coiote DM upon synchronization with the Azure IoT Central and this is repeated periodically for any new devices that appear. Therefore, after one successful synchronization, you can be sure that any devices that have been added to Azure IoT Central at a later time will also be migrated to Coiote DM.","title":"Overview"},{"location":"Azure_IoT_Central_integration/Device_operations/Overview/#overview","text":"","title":"Overview"},{"location":"Azure_IoT_Central_integration/Device_operations/Overview/#how-synchronization-works","text":"Coiote DM provides zero-touch provisioning for synchronized devices from Azure IoT Central. This means that device entities are automatically created within Coiote DM upon synchronization with the Azure IoT Central and this is repeated periodically for any new devices that appear. Therefore, after one successful synchronization, you can be sure that any devices that have been added to Azure IoT Central at a later time will also be migrated to Coiote DM.","title":"How synchronization works"},{"location":"Azure_IoT_Hub_integration/Configuring_Azure_IoT_Hub_integration_extension/","text":"Configuring integration extension # To enable communication and data flow between the Azure IoT Hub and Coiote DM platforms, you first need to integrate them using the dedicated extension module in Coiote DM. Follow the instruction below to learn how to do it. Prerequisites # An active IoT Hub with hub owner access permissions. Check here how to create a hub. A Coiote DM user account with permissions to use the integration extension. Optionally, an active Azure Blob Storage account. Get the IoT Hub connection string # In your IoT Hub general view, go to Shared access policies : From the list of policies, select the iothubowner policy. Under Shared access keys , click the copy icon for the Connection string -- primary key to save the value. Info For detailed information about the IoT Hub permissions, please visit the Control access to IoT Hub section of the Azure IoT Hub documentation. Now you need to use the credential in the Coiote DM platform. Set up the Azure IoT Hub Extension using credentials. # In your Coiote DM user account, go to Administration --> Extensions . Find the Azure IoT Hub tab and click Setup . In the tab, paste the previously copied IoT Hub connection string. check Enable automatic synchronization to periodically synchronize any new devices that appear in the Azure IoT Hub. use Test connection to see if the connection can be established correctly. click Save to keep the setting. Optionally, you can also provide the Azure Blob Storage connection string that will be required in case you would like to export devices from Coiote DM to Azure IoT Hub. Click here to learn how to obtain and apply it. Next steps # Importing Azure IoT Hub devices to Coiote DM Exporting devices to Azure IoT Hub","title":"Configuring integration extension"},{"location":"Azure_IoT_Hub_integration/Configuring_Azure_IoT_Hub_integration_extension/#configuring-integration-extension","text":"To enable communication and data flow between the Azure IoT Hub and Coiote DM platforms, you first need to integrate them using the dedicated extension module in Coiote DM. Follow the instruction below to learn how to do it.","title":"Configuring integration extension"},{"location":"Azure_IoT_Hub_integration/Configuring_Azure_IoT_Hub_integration_extension/#prerequisites","text":"An active IoT Hub with hub owner access permissions. Check here how to create a hub. A Coiote DM user account with permissions to use the integration extension. Optionally, an active Azure Blob Storage account.","title":"Prerequisites"},{"location":"Azure_IoT_Hub_integration/Configuring_Azure_IoT_Hub_integration_extension/#get-the-iot-hub-connection-string","text":"In your IoT Hub general view, go to Shared access policies : From the list of policies, select the iothubowner policy. Under Shared access keys , click the copy icon for the Connection string -- primary key to save the value. Info For detailed information about the IoT Hub permissions, please visit the Control access to IoT Hub section of the Azure IoT Hub documentation. Now you need to use the credential in the Coiote DM platform.","title":"Get the IoT Hub connection string"},{"location":"Azure_IoT_Hub_integration/Configuring_Azure_IoT_Hub_integration_extension/#set-up-the-azure-iot-hub-extension-using-credentials","text":"In your Coiote DM user account, go to Administration --> Extensions . Find the Azure IoT Hub tab and click Setup . In the tab, paste the previously copied IoT Hub connection string. check Enable automatic synchronization to periodically synchronize any new devices that appear in the Azure IoT Hub. use Test connection to see if the connection can be established correctly. click Save to keep the setting. Optionally, you can also provide the Azure Blob Storage connection string that will be required in case you would like to export devices from Coiote DM to Azure IoT Hub. Click here to learn how to obtain and apply it.","title":"Set up the Azure IoT Hub Extension using credentials."},{"location":"Azure_IoT_Hub_integration/Configuring_Azure_IoT_Hub_integration_extension/#next-steps","text":"Importing Azure IoT Hub devices to Coiote DM Exporting devices to Azure IoT Hub","title":"Next steps"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/","text":"Exporting devices to Azure IoT Hub # If you have device entities in Coiote DM that you would like to manage via the Azure IoT Hub, you may use the export functionality. Follow the instruction below to learn how to do it in four basic steps: Create a device Create a group of devices for export Get the Azure Blob storage connection string Export your devices Prerequisites # An active Azure Blob Storage account. Click here to learn more. Create a device entity in Coiote DM # If you don't have any devices in your Coiote DM Device Inventory , follow these instructions to add one or more devices. In the Coiote DM Device Inventory , select Device Creator . In the next screen, choose the Connect your LwM2M device directly via the Management server . In the Device credentials step, provide a name for your device, then select NoSec from the Security mode list and click Add device . In the pop-up window, click Confirm to add your device entity. Now it should be listed in Device Inventory . Create a group of devices for export # Now that you have some devices added, you need to insert all the devices to be exported into a common group for ease of configuration. In Coiote DM, go to Device Inventory , filter the devices you would like to export and use the Add to group action. In the pop-up window that appears, select Add to new group , provide a name for the group and click Confirm . Get the Azure Blob storage connection string # An Azure Blob storage connection string is required in the export process. Here is how to obtain it: In your Azure Blob storage account, go to Access keys . Click Show keys and copy the connection string to your clipboard. In your Coiote DM user account, go to Administration --> Extensions Find the Azure IoT Hub tab and click Setup . In the tab, paste the previously copied Azure Blob storage connection string. use Test connection to see if the connection can be established correctly. click Save to keep the setting. Export your devices # Now you are ready to export your devices. In the Device groups panel, select your group of devices for export and click the Actions tab. Under Management , select the Export devices to Azure IoT Hub . In the pop-up window: mark Skip already exported devices optionally if you have already exported some of the devices belonging to this group. select Start export . After a moment, the export operation should finish successfully. If there are any errors, you can check the credentials that you provided in the Azure IoT Hub extension setup. Next steps #","title":"Exporting devices to Azure IoT Hub"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#exporting-devices-to-azure-iot-hub","text":"If you have device entities in Coiote DM that you would like to manage via the Azure IoT Hub, you may use the export functionality. Follow the instruction below to learn how to do it in four basic steps: Create a device Create a group of devices for export Get the Azure Blob storage connection string Export your devices","title":"Exporting devices to Azure IoT Hub"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#prerequisites","text":"An active Azure Blob Storage account. Click here to learn more.","title":"Prerequisites"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#create-a-device-entity-in-coiote-dm","text":"If you don't have any devices in your Coiote DM Device Inventory , follow these instructions to add one or more devices. In the Coiote DM Device Inventory , select Device Creator . In the next screen, choose the Connect your LwM2M device directly via the Management server . In the Device credentials step, provide a name for your device, then select NoSec from the Security mode list and click Add device . In the pop-up window, click Confirm to add your device entity. Now it should be listed in Device Inventory .","title":"Create a device entity in Coiote DM"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#create-a-group-of-devices-for-export","text":"Now that you have some devices added, you need to insert all the devices to be exported into a common group for ease of configuration. In Coiote DM, go to Device Inventory , filter the devices you would like to export and use the Add to group action. In the pop-up window that appears, select Add to new group , provide a name for the group and click Confirm .","title":"Create a group of devices for export"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#get-the-azure-blob-storage-connection-string","text":"An Azure Blob storage connection string is required in the export process. Here is how to obtain it: In your Azure Blob storage account, go to Access keys . Click Show keys and copy the connection string to your clipboard. In your Coiote DM user account, go to Administration --> Extensions Find the Azure IoT Hub tab and click Setup . In the tab, paste the previously copied Azure Blob storage connection string. use Test connection to see if the connection can be established correctly. click Save to keep the setting.","title":"Get the Azure Blob storage connection string"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#export-your-devices","text":"Now you are ready to export your devices. In the Device groups panel, select your group of devices for export and click the Actions tab. Under Management , select the Export devices to Azure IoT Hub . In the pop-up window: mark Skip already exported devices optionally if you have already exported some of the devices belonging to this group. select Start export . After a moment, the export operation should finish successfully. If there are any errors, you can check the credentials that you provided in the Azure IoT Hub extension setup.","title":"Export your devices"},{"location":"Azure_IoT_Hub_integration/Device_operations/Exporting_devices_to_Azure_IoT_Hub/#next-steps","text":"","title":"Next steps"},{"location":"Azure_IoT_Hub_integration/Device_operations/Importing_devices_to_Coiote_DM/","text":"Importing devices to Coiote DM # If you would like to migrate any device entities from your Azure IoT to the Coiote DM platform for full management possibilities, follow the instruction below. Prerequisites # Configured and working Azure IoT Hub integration extension (see Configuring the Azure IoT Hub integration extension for details). Add devices to Azure IoT Hub # If you don't have any device entities added in your Azure IoT Hub, follow these steps to learn how to do it: In your Azure IoT Hub account, under Explorers , select IoT devices . In the panel, click +New . Provide device ID in the relevant field and click Save . Your added devices should be visible in IoT devices under Explorers : Sync your devices # In order to establish communication and data flow between device entities in Azure IoT Hub and their Coiote DM counterparts, you need to sync them. Go to Device inventory , click the Sync with IoT platform button and select Azure IoT Hub . In the pop-up window: provide the WHERE clause of the device twin SQL query to filter your devices using chosen tags and properties (to read more about SQL query, check the IoT Hub query language section of Azure IoT Hub documentation. For instance, you can filter by device location region and device status with the following clause: tags.location.region = 'US' AND status = 'enabled' click Count queried devices to check the number of devices that meet the specified conditions (the number is shown inside the Sync devices button) to skip filtering and synchronize all the available devices, leave the WHERE clause input field empty. click Sync devices to start the synchronization. After successful import, the devices should be listed in Device inventory . Now that your devices are synchronized, after their successful connection to the Coiote DM platform, you should be able to see the updated device twin properties in Azure IoT Hub. Tip If the device twin parameters are not up-to-date after syncing, try the refresh data model action on the device. Next steps #","title":"Importing devices to Coiote DM"},{"location":"Azure_IoT_Hub_integration/Device_operations/Importing_devices_to_Coiote_DM/#importing-devices-to-coiote-dm","text":"If you would like to migrate any device entities from your Azure IoT to the Coiote DM platform for full management possibilities, follow the instruction below.","title":"Importing devices to Coiote DM"},{"location":"Azure_IoT_Hub_integration/Device_operations/Importing_devices_to_Coiote_DM/#prerequisites","text":"Configured and working Azure IoT Hub integration extension (see Configuring the Azure IoT Hub integration extension for details).","title":"Prerequisites"},{"location":"Azure_IoT_Hub_integration/Device_operations/Importing_devices_to_Coiote_DM/#add-devices-to-azure-iot-hub","text":"If you don't have any device entities added in your Azure IoT Hub, follow these steps to learn how to do it: In your Azure IoT Hub account, under Explorers , select IoT devices . In the panel, click +New . Provide device ID in the relevant field and click Save . Your added devices should be visible in IoT devices under Explorers :","title":"Add devices to Azure IoT Hub"},{"location":"Azure_IoT_Hub_integration/Device_operations/Importing_devices_to_Coiote_DM/#sync-your-devices","text":"In order to establish communication and data flow between device entities in Azure IoT Hub and their Coiote DM counterparts, you need to sync them. Go to Device inventory , click the Sync with IoT platform button and select Azure IoT Hub . In the pop-up window: provide the WHERE clause of the device twin SQL query to filter your devices using chosen tags and properties (to read more about SQL query, check the IoT Hub query language section of Azure IoT Hub documentation. For instance, you can filter by device location region and device status with the following clause: tags.location.region = 'US' AND status = 'enabled' click Count queried devices to check the number of devices that meet the specified conditions (the number is shown inside the Sync devices button) to skip filtering and synchronize all the available devices, leave the WHERE clause input field empty. click Sync devices to start the synchronization. After successful import, the devices should be listed in Device inventory . Now that your devices are synchronized, after their successful connection to the Coiote DM platform, you should be able to see the updated device twin properties in Azure IoT Hub. Tip If the device twin parameters are not up-to-date after syncing, try the refresh data model action on the device.","title":"Sync your devices"},{"location":"Azure_IoT_Hub_integration/Device_operations/Importing_devices_to_Coiote_DM/#next-steps","text":"","title":"Next steps"},{"location":"Azure_IoT_Hub_integration/Device_operations/Overview/","text":"Overview # How synchronization works # Coiote DM provides zero-touch provisioning for synchronized devices from Azure IoT Hub. This means that device entities are automatically created within Coiote DM upon synchronization with the Azure IoT Hub and this is repeated periodically for any new devices that appear. Therefore, after one successful synchronization, you can be sure that any devices that have been added to Azure IoT Hub at a later time will also be migrated to Coiote DM.","title":"Overview"},{"location":"Azure_IoT_Hub_integration/Device_operations/Overview/#overview","text":"","title":"Overview"},{"location":"Azure_IoT_Hub_integration/Device_operations/Overview/#how-synchronization-works","text":"Coiote DM provides zero-touch provisioning for synchronized devices from Azure IoT Hub. This means that device entities are automatically created within Coiote DM upon synchronization with the Azure IoT Hub and this is repeated periodically for any new devices that appear. Therefore, after one successful synchronization, you can be sure that any devices that have been added to Azure IoT Hub at a later time will also be migrated to Coiote DM.","title":"How synchronization works"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/","text":"Upgrading device firmware # If you would like to upgrade the firmware of devices using the Azure IoT Hub, follow the instruction below. Prerequisites # At least one device with active Coiote DM - Azure IoT Hub synchronization . A firmware file hosted on an HTTP server that is reachable by the Coiote DM server. Note In this stage of integration, no authentication method is supported for this endpoint - it is required that the firmware is publicly available (or hosted in a private network but with access granted for the Coiote DM server). Scheduling a firmware upgrade # Introduction # The process of upgrading device firmware for Azure IoT Hub devices synchronized with Coiote DM is based on two main elements: the Azure Direct Method mechanism and the Coiote DM Firmware Upgrade task. In the process, the Azure scheduleFirmwareUpdate direct method is invoked, enabling the Coiote DM to download the specified firmware file and add it to its resources. Then, an XML task is scheduled in Coiote DM and the upgrade is performed on the device. Info For firmware file recognition in Coiote, global identifiers are used. This means that it is recommended to name your firmware files using the format: yourdomainName + randomized value. If the same firmware file name is used again, then Coiote DM will be able to utilize the once downloaded resource without the need to download it again. Step 1: Invoking the Azure scheduleFirmwareUpdate direct method # To initiate the firmware upgrade procedure for your device: Go to your Azure hub account and under Explorers , select IoT devices . From the list, choose the device for which you want to upgrade the firmware. In the device view, select the Direct Method tab. Provide data for the following fields: Method Name - paste the scheduleFirmwareUpdate direct method name here. Payload - use the following payload with firmware upgrade parameters (remember to replace the example values where needed): { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", // optional - default=\"1200s\", any valid duration in format \"<length><unit>\" \"timeout\": \"1200s\", // optional - default=\"COAP\" \"protocolType\": \"COAP\", // optional - default=null <-> keep firmware file forever, any valid duration in format \"<length><unit>\" or null \"retentionPeriod\": \"300s\", // optional - default=\"\" \"description\": \"This is anjay demo firmware\", // optional - default=false \"useQuota\": false, // optional - default=false \"useCachedData\": false, // optional - default=false \"resumeAfterDownlinkFailure\": false, // optional - default=\"pull\", possible values = [\"pull\", \"push\"] \"imageDeliveryMethod\": \"pull\", // optional - default=\"WithoutObservations\", possible values = [\"ObservationTrigger\", \"WithoutObservations\", \"ObservationBased\", \"SendBased\"] \"upgradeStrategy\": \"WithoutObservations\", // optional - default=\"always\", possible values = [\"always\", \"weekends\", \"nights-home\", \"nights-enterprise-weekends\", \"nights-enterprise\", user-defined schedules] \"schedule\": \"always\" } Connection timeout - specify a timeout for the Azure - Coiote DM connection (the recommended value is not less than 5 seconds). Method timeout - specify a timeout for direct method result notification. Once you have provided the required data, click Invoke method . After a short moment, you should be able to see the direct method result in the Result field. The 200 as the \"status\" parameter value means that the firmware upgrade task was completed successfully. Importantly, the result \"payload\" value will be needed for other FOTA actions like status check or cancellation, so be sure to copy it to your clipboard if needed. Tip Out of all the parameters provided in Firmware upgrade direct method payload, only two are mandatory: name - the unique file name used for firmware identification. firmwareUrl - the URL used by Coiote DM to download the firmware file and include it as a resource. Therefore it is correct to include only those two in the payload, as in here: { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", } Step 2: Checking the firmware upgrade result # To check the status of a scheduled firmware upgrade, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the checkFirmwareUpdateStatus direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field: Step 3: Checking Coiote DM FOTA task execution # Once you have executed the Azure-side steps of the procedure, you can check its status from the side of Coiote DM. Go to your Coiote DM account and in the Device Inventory , select your device. In the Device Management Center, enter the LwM2M firmware tab. Check the status of the FOTA task execution for your device: In the Current firmware section, check if the device firmware is updated to the newest version. In the Installation history section, check if the lwm2mFirmwareUpdate task invoked earlier by the Azure scheduleFirmwareUpdate direct method has been completed with success. Cancelling the firmware upgrade procedure # To cancel the firmware upgrade procedure, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the cancelFirmwareUpdate direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field: See also # See the relevant section of LwM2M mappings to learn the details of how Azure IoT Hub Direct Methods are mapped in Coiote DM.","title":"Upgrading device firmware"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#upgrading-device-firmware","text":"If you would like to upgrade the firmware of devices using the Azure IoT Hub, follow the instruction below.","title":"Upgrading device firmware"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#prerequisites","text":"At least one device with active Coiote DM - Azure IoT Hub synchronization . A firmware file hosted on an HTTP server that is reachable by the Coiote DM server. Note In this stage of integration, no authentication method is supported for this endpoint - it is required that the firmware is publicly available (or hosted in a private network but with access granted for the Coiote DM server).","title":"Prerequisites"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#scheduling-a-firmware-upgrade","text":"","title":"Scheduling a firmware upgrade"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#introduction","text":"The process of upgrading device firmware for Azure IoT Hub devices synchronized with Coiote DM is based on two main elements: the Azure Direct Method mechanism and the Coiote DM Firmware Upgrade task. In the process, the Azure scheduleFirmwareUpdate direct method is invoked, enabling the Coiote DM to download the specified firmware file and add it to its resources. Then, an XML task is scheduled in Coiote DM and the upgrade is performed on the device. Info For firmware file recognition in Coiote, global identifiers are used. This means that it is recommended to name your firmware files using the format: yourdomainName + randomized value. If the same firmware file name is used again, then Coiote DM will be able to utilize the once downloaded resource without the need to download it again.","title":"Introduction"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#step-1-invoking-the-azure-schedulefirmwareupdate-direct-method","text":"To initiate the firmware upgrade procedure for your device: Go to your Azure hub account and under Explorers , select IoT devices . From the list, choose the device for which you want to upgrade the firmware. In the device view, select the Direct Method tab. Provide data for the following fields: Method Name - paste the scheduleFirmwareUpdate direct method name here. Payload - use the following payload with firmware upgrade parameters (remember to replace the example values where needed): { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", // optional - default=\"1200s\", any valid duration in format \"<length><unit>\" \"timeout\": \"1200s\", // optional - default=\"COAP\" \"protocolType\": \"COAP\", // optional - default=null <-> keep firmware file forever, any valid duration in format \"<length><unit>\" or null \"retentionPeriod\": \"300s\", // optional - default=\"\" \"description\": \"This is anjay demo firmware\", // optional - default=false \"useQuota\": false, // optional - default=false \"useCachedData\": false, // optional - default=false \"resumeAfterDownlinkFailure\": false, // optional - default=\"pull\", possible values = [\"pull\", \"push\"] \"imageDeliveryMethod\": \"pull\", // optional - default=\"WithoutObservations\", possible values = [\"ObservationTrigger\", \"WithoutObservations\", \"ObservationBased\", \"SendBased\"] \"upgradeStrategy\": \"WithoutObservations\", // optional - default=\"always\", possible values = [\"always\", \"weekends\", \"nights-home\", \"nights-enterprise-weekends\", \"nights-enterprise\", user-defined schedules] \"schedule\": \"always\" } Connection timeout - specify a timeout for the Azure - Coiote DM connection (the recommended value is not less than 5 seconds). Method timeout - specify a timeout for direct method result notification. Once you have provided the required data, click Invoke method . After a short moment, you should be able to see the direct method result in the Result field. The 200 as the \"status\" parameter value means that the firmware upgrade task was completed successfully. Importantly, the result \"payload\" value will be needed for other FOTA actions like status check or cancellation, so be sure to copy it to your clipboard if needed. Tip Out of all the parameters provided in Firmware upgrade direct method payload, only two are mandatory: name - the unique file name used for firmware identification. firmwareUrl - the URL used by Coiote DM to download the firmware file and include it as a resource. Therefore it is correct to include only those two in the payload, as in here: { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", }","title":"Step 1: Invoking the Azure scheduleFirmwareUpdate direct method"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#step-2-checking-the-firmware-upgrade-result","text":"To check the status of a scheduled firmware upgrade, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the checkFirmwareUpdateStatus direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field:","title":"Step 2: Checking the firmware upgrade result"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#step-3-checking-coiote-dm-fota-task-execution","text":"Once you have executed the Azure-side steps of the procedure, you can check its status from the side of Coiote DM. Go to your Coiote DM account and in the Device Inventory , select your device. In the Device Management Center, enter the LwM2M firmware tab. Check the status of the FOTA task execution for your device: In the Current firmware section, check if the device firmware is updated to the newest version. In the Installation history section, check if the lwm2mFirmwareUpdate task invoked earlier by the Azure scheduleFirmwareUpdate direct method has been completed with success.","title":"Step 3: Checking Coiote DM FOTA task execution"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#cancelling-the-firmware-upgrade-procedure","text":"To cancel the firmware upgrade procedure, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the cancelFirmwareUpdate direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field:","title":"Cancelling the firmware upgrade procedure"},{"location":"Azure_IoT_Hub_integration/Device_operations/Upgrading_firmware/#see-also","text":"See the relevant section of LwM2M mappings to learn the details of how Azure IoT Hub Direct Methods are mapped in Coiote DM.","title":"See also"},{"location":"Concepts/LwM2M_mappings/","text":"LwM2M mappings # In this section you'll get to know how the mappings are arranged between the LwM2M protocol as used in Coiote DM and the data retrieval and processing mechanisms of the Azure IoT Hub, such as Device Twins, Direct Method and Device-to-cloud messaging. Introduction # The LwM2M protocol data model is organized as a three-level tree that has the following structure: object (e.g. a 'temperature sensor') object instance (e.g. 'temperature sensor #1', 'temperature sensor #2' etc.) resource (e.g. 'current temperature value') In terms of operations that can be performed on an LwM2M Client, an LwM2M Server can READ all of the data model entities, and, depending on their characteristics, may also WRITE to some of them, and EXECUTE some of them. Additionally, an LwM2M Server can also OBSERVE selected resources. Info If you would like to dive deeper into the details of the Lightweight M2M protocol, please refer to our brief introduction to LwM2M . This division into readable, writable, executable and observable data model entities is the basis for the mapping of LwM2M resources (as interpreted by Coiote DM) into Azure IoT Hub data processing mechanisms. LwM2M readable and writable resources # Within the Coiote DM - Azure IoT Hub integration, readable and writable resources are usually interpreted as part of Azure Device twin data structure. Note To learn more about Device twins, go to the Understand and use Device twins section of the Azure IoT Hub documentation. For instance, the sample JSON snippet below is a tree with nested resources to represent a fragment of the LwM2M data model with path /3/1/1 : { \"deviceId\": \"airquality-0\", ... \"properties\": { \"reported\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 90 }, \"4\": {}, \"6\": {}, \"7\": {}, \"8\": {} } }, \"3\": { \"1\": { \"1\": { \"value\": \"airquality-0-Valparaiso\" } } }, ... READ - Communication flow # Data model resources that are read-only, such as Manufacturer (with ID 3/0/0 ) will be mapped into the Device twin as a reported property. WRITE - Communication flow # On the other hand, a writable resource, such as Lifetime (with ID 1/0/1 ), apart from being represented as a reported property, can be additionally mapped as a desired property. This enables you to synchronize the device data model and configuration between Azure and Coiote DM. Changing the value of a writable resource involves creating a properly formatted JSON snippet in the desired property field within the Device twin that introduces a value change: ... \"properties\": { \"desired\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 30 } } } }, ... After JSON is saved, Azure notifies Coiote DM of the desired change which is then transferred to the device in form of a WRITE command. Once the value is changed on the device, Coiote DM reports back to Azure that the value of the corresponding reported property should be updated in the Device twin JSON structure. LwM2M executable resources # As a rule, LwM2M resources that can be executable translate into Direct methods in Azure IoT Hub. This means that by invoking a direct method from Azure, you can trigger an EXECUTE operation on a chosen resource available for your device and the request will be transferred immediately by the LwM2M Server to the device. Note To learn more about Direct methods, go to the Understand Direct methods section of the Azure IoT Hub documentation. An executable LwM2M resource ID is mapped to a direct method in the following way: method name: execute { path: \"object.objectInstance.resource\", [args: \"optional arguments to execute\"] } Thus, for instance, to execute a factory reset on a device, you need to invoke a direct method with the execute name and the following payload: { path: \"3.0.5\" } EXECUTE - Communication flow # Invoking a direct method from Azure IoT Hub and handling it by Coiote DM in the form of an EXECUTE operation passed to the device has the following flow: LwM2M observable resources # In Coiote DM, some of the resources within the device data model can be observed for changes in value. These are generally resources related to telemetry data or other measurements. Their value changes can be monitored by Coiote DM and reported to the Azure IoT Hub Device-to-cloud mechanism. Note To learn more about the Azure Device-to-cloud, go to sending device-to-cloud messages section of the Azure IoT Hub documentation. Observe - Communication flow # Setting an Observe operation on a resource in Coiote DM, for instance a temperature reading, will result in a Notify message sent by the device upon value change that Coiote DM will transfer to the Device-to-cloud mechanism of Azure IoT Hub. What is more, you can set observations on LwM2M resources from the Azure IoT Hub level by adding appropriate attributes to the resource as a Device twin desired property. For instance, an Observe operation on resource ID 3303/1/5700 is set in the following way: ... \"properties\": { \"desired\": { \"lwm2m\": { \"3303\": { \"1\": { \"5700\": { \"observed\": true, \"attributes\": { \"pmin\": 60 } } } } } ... After JSON is saved, Azure notifies Coiote DM of the desired attribute setting which is then transferred to the device in form of an Observe operation. Once Coiote DM is notified of a value change, it is reported to the Azure Device-to-cloud mechanism.","title":"LwM2M mappings"},{"location":"Concepts/LwM2M_mappings/#lwm2m-mappings","text":"In this section you'll get to know how the mappings are arranged between the LwM2M protocol as used in Coiote DM and the data retrieval and processing mechanisms of the Azure IoT Hub, such as Device Twins, Direct Method and Device-to-cloud messaging.","title":"LwM2M mappings"},{"location":"Concepts/LwM2M_mappings/#introduction","text":"The LwM2M protocol data model is organized as a three-level tree that has the following structure: object (e.g. a 'temperature sensor') object instance (e.g. 'temperature sensor #1', 'temperature sensor #2' etc.) resource (e.g. 'current temperature value') In terms of operations that can be performed on an LwM2M Client, an LwM2M Server can READ all of the data model entities, and, depending on their characteristics, may also WRITE to some of them, and EXECUTE some of them. Additionally, an LwM2M Server can also OBSERVE selected resources. Info If you would like to dive deeper into the details of the Lightweight M2M protocol, please refer to our brief introduction to LwM2M . This division into readable, writable, executable and observable data model entities is the basis for the mapping of LwM2M resources (as interpreted by Coiote DM) into Azure IoT Hub data processing mechanisms.","title":"Introduction"},{"location":"Concepts/LwM2M_mappings/#lwm2m-readable-and-writable-resources","text":"Within the Coiote DM - Azure IoT Hub integration, readable and writable resources are usually interpreted as part of Azure Device twin data structure. Note To learn more about Device twins, go to the Understand and use Device twins section of the Azure IoT Hub documentation. For instance, the sample JSON snippet below is a tree with nested resources to represent a fragment of the LwM2M data model with path /3/1/1 : { \"deviceId\": \"airquality-0\", ... \"properties\": { \"reported\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 90 }, \"4\": {}, \"6\": {}, \"7\": {}, \"8\": {} } }, \"3\": { \"1\": { \"1\": { \"value\": \"airquality-0-Valparaiso\" } } }, ...","title":"LwM2M readable and writable resources"},{"location":"Concepts/LwM2M_mappings/#read-communication-flow","text":"Data model resources that are read-only, such as Manufacturer (with ID 3/0/0 ) will be mapped into the Device twin as a reported property.","title":"READ - Communication flow"},{"location":"Concepts/LwM2M_mappings/#write-communication-flow","text":"On the other hand, a writable resource, such as Lifetime (with ID 1/0/1 ), apart from being represented as a reported property, can be additionally mapped as a desired property. This enables you to synchronize the device data model and configuration between Azure and Coiote DM. Changing the value of a writable resource involves creating a properly formatted JSON snippet in the desired property field within the Device twin that introduces a value change: ... \"properties\": { \"desired\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 30 } } } }, ... After JSON is saved, Azure notifies Coiote DM of the desired change which is then transferred to the device in form of a WRITE command. Once the value is changed on the device, Coiote DM reports back to Azure that the value of the corresponding reported property should be updated in the Device twin JSON structure.","title":"WRITE - Communication flow"},{"location":"Concepts/LwM2M_mappings/#lwm2m-executable-resources","text":"As a rule, LwM2M resources that can be executable translate into Direct methods in Azure IoT Hub. This means that by invoking a direct method from Azure, you can trigger an EXECUTE operation on a chosen resource available for your device and the request will be transferred immediately by the LwM2M Server to the device. Note To learn more about Direct methods, go to the Understand Direct methods section of the Azure IoT Hub documentation. An executable LwM2M resource ID is mapped to a direct method in the following way: method name: execute { path: \"object.objectInstance.resource\", [args: \"optional arguments to execute\"] } Thus, for instance, to execute a factory reset on a device, you need to invoke a direct method with the execute name and the following payload: { path: \"3.0.5\" }","title":"LwM2M executable resources"},{"location":"Concepts/LwM2M_mappings/#execute-communication-flow","text":"Invoking a direct method from Azure IoT Hub and handling it by Coiote DM in the form of an EXECUTE operation passed to the device has the following flow:","title":"EXECUTE - Communication flow"},{"location":"Concepts/LwM2M_mappings/#lwm2m-observable-resources","text":"In Coiote DM, some of the resources within the device data model can be observed for changes in value. These are generally resources related to telemetry data or other measurements. Their value changes can be monitored by Coiote DM and reported to the Azure IoT Hub Device-to-cloud mechanism. Note To learn more about the Azure Device-to-cloud, go to sending device-to-cloud messages section of the Azure IoT Hub documentation.","title":"LwM2M observable resources"},{"location":"Concepts/LwM2M_mappings/#observe-communication-flow","text":"Setting an Observe operation on a resource in Coiote DM, for instance a temperature reading, will result in a Notify message sent by the device upon value change that Coiote DM will transfer to the Device-to-cloud mechanism of Azure IoT Hub. What is more, you can set observations on LwM2M resources from the Azure IoT Hub level by adding appropriate attributes to the resource as a Device twin desired property. For instance, an Observe operation on resource ID 3303/1/5700 is set in the following way: ... \"properties\": { \"desired\": { \"lwm2m\": { \"3303\": { \"1\": { \"5700\": { \"observed\": true, \"attributes\": { \"pmin\": 60 } } } } } ... After JSON is saved, Azure notifies Coiote DM of the desired attribute setting which is then transferred to the device in form of an Observe operation. Once Coiote DM is notified of a value change, it is reported to the Azure Device-to-cloud mechanism.","title":"Observe - Communication flow"}]}