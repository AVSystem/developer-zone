{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome # Welcome to the AVSystem DevZone! In the DevZone you will find documentation related to our scalable LwM2M Server Coiote IoT Device Management platform , as well as our LwM2M Client Anjay . Quick Start Guide # Follow the Quick Start to build your first LwM2M application using a simulated device within 20 minutes. The guide walks you through the process of building your first LwM2M application using AVSystem\u2019s LwM2M Client Anjay and AVSystem\u2019s LwM2M Server Coiote IoT Device Management platform . Quick Start Get started with popular hardware platforms # Follow the Getting Started Guides to kickstart your LwM2M application using one of the popular hardware platforms: Nordic , STMicroelectronics , ESPRESSIF or Raspberry Pi . Learn more about Coiote IoT DM # Dive into Coiote IoT Device Management platform, the scalable LwM2M server and explore its numerous features. From device onboarding using the Bootstrapping Server to Data Visualization and running automated Device Tests . Coiote IoT DM docs Explore cloud integrations # With the Coiote IoT Device Management platform, you can easily integrate your LwM2M data with Azure IoT Hub , Azure IoT Central , Azure DPS , AWS IoT Core and nRF Cloud Location Services . The guides will take you on a step-by-step journey to seamlessly activate the integrations. Microsoft Azure AWS IoT Core nRF Cloud Join our community on Discord # Join us on Discord to get in touch with AVSystem experts and to meet fellow LwM2M developers.","title":"Welcome"},{"location":"#welcome","text":"Welcome to the AVSystem DevZone! In the DevZone you will find documentation related to our scalable LwM2M Server Coiote IoT Device Management platform , as well as our LwM2M Client Anjay .","title":"Welcome"},{"location":"#quick-start-guide","text":"Follow the Quick Start to build your first LwM2M application using a simulated device within 20 minutes. The guide walks you through the process of building your first LwM2M application using AVSystem\u2019s LwM2M Client Anjay and AVSystem\u2019s LwM2M Server Coiote IoT Device Management platform . Quick Start","title":"Quick Start Guide"},{"location":"#get-started-with-popular-hardware-platforms","text":"Follow the Getting Started Guides to kickstart your LwM2M application using one of the popular hardware platforms: Nordic , STMicroelectronics , ESPRESSIF or Raspberry Pi .","title":"Get started with popular hardware platforms"},{"location":"#learn-more-about-coiote-iot-dm","text":"Dive into Coiote IoT Device Management platform, the scalable LwM2M server and explore its numerous features. From device onboarding using the Bootstrapping Server to Data Visualization and running automated Device Tests . Coiote IoT DM docs","title":"Learn more about Coiote IoT DM"},{"location":"#explore-cloud-integrations","text":"With the Coiote IoT Device Management platform, you can easily integrate your LwM2M data with Azure IoT Hub , Azure IoT Central , Azure DPS , AWS IoT Core and nRF Cloud Location Services . The guides will take you on a step-by-step journey to seamlessly activate the integrations. Microsoft Azure AWS IoT Core nRF Cloud","title":"Explore cloud integrations"},{"location":"#join-our-community-on-discord","text":"Join us on Discord to get in touch with AVSystem experts and to meet fellow LwM2M developers.","title":"Join our community on Discord"},{"location":"cloud-integrations/","text":"IoT Cloud Integrations # With the Coiote IoT Device Management platform, you can integrate your LwM2M devices with Microsoft Azure, AWS and nRF Cloud. These guides will take you on a step-by-step journey to seamlessly activate the integrations. Microsoft Azure integrations # Here\u2019s how you can get started with the Coiote IoT DM \u2013 Azure IoT integration: Azure IoT Hub Azure IoT Central Azure DPS AWS integration # Integrate Coiote IoT DM with the Amazon Web Services and gain new opportunities to leverage your IoT data. Integrate with AWS nRF Cloud Location services # Integrate Coiote IoT DM with the nRF Cloud Location Services to track your devices' location and save battery life. Integrate with nRF Cloud","title":"IoT Cloud Integrations"},{"location":"cloud-integrations/#iot-cloud-integrations","text":"With the Coiote IoT Device Management platform, you can integrate your LwM2M devices with Microsoft Azure, AWS and nRF Cloud. These guides will take you on a step-by-step journey to seamlessly activate the integrations.","title":"IoT Cloud Integrations"},{"location":"cloud-integrations/#microsoft-azure-integrations","text":"Here\u2019s how you can get started with the Coiote IoT DM \u2013 Azure IoT integration: Azure IoT Hub Azure IoT Central Azure DPS","title":"Microsoft Azure integrations"},{"location":"cloud-integrations/#aws-integration","text":"Integrate Coiote IoT DM with the Amazon Web Services and gain new opportunities to leverage your IoT data. Integrate with AWS","title":"AWS integration"},{"location":"cloud-integrations/#nrf-cloud-location-services","text":"Integrate Coiote IoT DM with the nRF Cloud Location Services to track your devices' location and save battery life. Integrate with nRF Cloud","title":"nRF Cloud Location services"},{"location":"quickstart/","text":"Quick Start # Welcome to the DevZone of AVSystem! # This Quick Start walks you through the process of building your first LwM2M application using AVSystem\u2019s LwM2M Client Anjay and AVSystem\u2019s LwM2M Server Coiote IoT Device Management platform . Follow this guide to build your first LwM2M application using a simulated device within 20 minutes. Access the Coiote IoT DM portal # Get started by signing up to Coiote IoT Device Management platform. You can sign up for a developer account, which allows you to connect up to 10 devices free of charge. Coiote IoT DM Run Anjay LwM2M Client Demo # Anjay LwM2M SDK is a set of tools that enables device vendors and IoT developers to easily implement a LwM2M client on their hardware. It is available both in an advanced commercial version as well as in the open-source model you can find on GitHub . Start by running the Anjay client on your Linux , Mac or Windows machine and simulate LwM2M telemetry data. Note If preferred, you can directly jump to the Getting Started guides of the popular hardware platforms: Nordic STMicroelectronics , ESP32 Raspberry Pi Info For more information about the Anjay LwM2M Client, visit the Anjay Library Documentation . Compile the Anjay demo client: # Linux Open up your command line interface and install the required dependencies: sudo apt-get install git build-essential cmake libmbedtls-dev zlib1g-dev Create a new directory, e.g. called AVSystem : mkdir ~/AVSystem \\ && cd AVSystem Clone the Anjay GitHub repository and compile the Anjay demo client using Cmake: git clone https://github.com/AVSystem/Anjay.git \\ && cd Anjay \\ && git submodule update --init \\ && cmake . \\ && make -j Mac Open up your terminal and install the required dependencies using Homebrew : brew install cmake mbedtls Create a new directory, e.g. called AVSystem : mkdir ~/AVSystem \\ && cd AVSystem Clone the Anjay GitHub repository and compile the Anjay demo client using Cmake: git clone https://github.com/AVSystem/Anjay.git \\ && cd Anjay \\ && git submodule update --init \\ && cmake . \\ && make -j Windows Install the required dependencies Install MSYS2 Install Git for Windows Note You can also install these using Chocolatey : choco install git msys2 but make sure to follow the instructions to update MSYS2 after installing it. Open the appropriate MINGW shell (e.g., C:\\msys64\\mingw32.exe or C:\\msys64\\mingw64.exe , depending on whether you want to build 32- or 64-bit binaries) and install the compile-time dependencies: pacman -Sy make ${MINGW_PACKAGE_PREFIX}-gcc ${MINGW_PACKAGE_PREFIX}-cmake ${MINGW_PACKAGE_PREFIX}-mbedtls Compile the project Run the following commands in the MINGW shell, after navigating to the directory created using Git above: cmake -G\"MSYS Makefiles\" -DDTLS_BACKEND=\"mbedtls\" . make Add a new device in Coiote IoT DM # After compiling the demo project, go back to the Coiote IoT DM portal . Click + Add device in the top-right corner. Add a new device using the option: Anjay LwM2M Client Demo Copy the command you find in Coiote IoT DM. Go back to your terminal, open your Anjay directory and run the command to configure and activate the demo application. Monitor your demo device in the Coiote IoT DM # If the demo application started successfully, a device is shown in theCoiote IoT DMplatform. Review the Data model # Go to the Data model tab in the top-menu. Under Data model you will find all the configured LwM2M Objects , Object instances and Resources containing property values or telemetry data. This includes: Object /1 LwM2M Resource /0 Short Server ID Resource /1 Lifetime Etc. Object /3 Device Resource /0 Manufacturer Resource /1 Modem Number Resource /2 Serial Number Etc. Object /6 Location Resource /0 Latitude Resource /1 Longitude Resource /2 Altitude Etc. Object /3303 Temperature Resource /5601 Min Measured Value Resource /5602 Max Measured Value Resource /5700 Sensor Value Etc. Next steps # Did you manage to run the Anjay LwM2M Client Demo? Well done! \ud83d\udc4f Now the fun begins. Below you can find useful links to continue your LwM2M journey. Get started with popular hardware platforms # Follow the Getting started guides to kickstart your LwM2M application using one of the popular hardware platforms: Nordic , STMicroelectronics , ESPRESSIF or Raspberry Pi . Learn more about Coiote IoT DM # Dive into Coiote IoT Device Management platform and explore its numerous functionalities. From device onboarding using the Bootstrap Server to Data Visualization and running automated Device Tests . Coiote IoT DM docs Join our community on Discord # Join us on Discord to get in touch with AVSystem experts and to meet fellow LwM2M developers.","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#welcome-to-the-devzone-of-avsystem","text":"This Quick Start walks you through the process of building your first LwM2M application using AVSystem\u2019s LwM2M Client Anjay and AVSystem\u2019s LwM2M Server Coiote IoT Device Management platform . Follow this guide to build your first LwM2M application using a simulated device within 20 minutes.","title":"Welcome to the DevZone of AVSystem!"},{"location":"quickstart/#access-the-coiote-iot-dm-portal","text":"Get started by signing up to Coiote IoT Device Management platform. You can sign up for a developer account, which allows you to connect up to 10 devices free of charge. Coiote IoT DM","title":"Access the Coiote IoT DM portal"},{"location":"quickstart/#run-anjay-lwm2m-client-demo","text":"Anjay LwM2M SDK is a set of tools that enables device vendors and IoT developers to easily implement a LwM2M client on their hardware. It is available both in an advanced commercial version as well as in the open-source model you can find on GitHub . Start by running the Anjay client on your Linux , Mac or Windows machine and simulate LwM2M telemetry data. Note If preferred, you can directly jump to the Getting Started guides of the popular hardware platforms: Nordic STMicroelectronics , ESP32 Raspberry Pi Info For more information about the Anjay LwM2M Client, visit the Anjay Library Documentation .","title":"Run Anjay LwM2M Client Demo"},{"location":"quickstart/#compile-the-anjay-demo-client","text":"Linux Open up your command line interface and install the required dependencies: sudo apt-get install git build-essential cmake libmbedtls-dev zlib1g-dev Create a new directory, e.g. called AVSystem : mkdir ~/AVSystem \\ && cd AVSystem Clone the Anjay GitHub repository and compile the Anjay demo client using Cmake: git clone https://github.com/AVSystem/Anjay.git \\ && cd Anjay \\ && git submodule update --init \\ && cmake . \\ && make -j Mac Open up your terminal and install the required dependencies using Homebrew : brew install cmake mbedtls Create a new directory, e.g. called AVSystem : mkdir ~/AVSystem \\ && cd AVSystem Clone the Anjay GitHub repository and compile the Anjay demo client using Cmake: git clone https://github.com/AVSystem/Anjay.git \\ && cd Anjay \\ && git submodule update --init \\ && cmake . \\ && make -j Windows Install the required dependencies Install MSYS2 Install Git for Windows Note You can also install these using Chocolatey : choco install git msys2 but make sure to follow the instructions to update MSYS2 after installing it. Open the appropriate MINGW shell (e.g., C:\\msys64\\mingw32.exe or C:\\msys64\\mingw64.exe , depending on whether you want to build 32- or 64-bit binaries) and install the compile-time dependencies: pacman -Sy make ${MINGW_PACKAGE_PREFIX}-gcc ${MINGW_PACKAGE_PREFIX}-cmake ${MINGW_PACKAGE_PREFIX}-mbedtls Compile the project Run the following commands in the MINGW shell, after navigating to the directory created using Git above: cmake -G\"MSYS Makefiles\" -DDTLS_BACKEND=\"mbedtls\" . make","title":"Compile the Anjay demo client:"},{"location":"quickstart/#add-a-new-device-in-coiote-iot-dm","text":"After compiling the demo project, go back to the Coiote IoT DM portal . Click + Add device in the top-right corner. Add a new device using the option: Anjay LwM2M Client Demo Copy the command you find in Coiote IoT DM. Go back to your terminal, open your Anjay directory and run the command to configure and activate the demo application.","title":"Add a new device in Coiote IoT DM"},{"location":"quickstart/#monitor-your-demo-device-in-the-coiote-iot-dm","text":"If the demo application started successfully, a device is shown in theCoiote IoT DMplatform.","title":"Monitor your demo device in the Coiote IoT DM"},{"location":"quickstart/#review-the-data-model","text":"Go to the Data model tab in the top-menu. Under Data model you will find all the configured LwM2M Objects , Object instances and Resources containing property values or telemetry data. This includes: Object /1 LwM2M Resource /0 Short Server ID Resource /1 Lifetime Etc. Object /3 Device Resource /0 Manufacturer Resource /1 Modem Number Resource /2 Serial Number Etc. Object /6 Location Resource /0 Latitude Resource /1 Longitude Resource /2 Altitude Etc. Object /3303 Temperature Resource /5601 Min Measured Value Resource /5602 Max Measured Value Resource /5700 Sensor Value Etc.","title":"Review the Data model"},{"location":"quickstart/#next-steps","text":"Did you manage to run the Anjay LwM2M Client Demo? Well done! \ud83d\udc4f Now the fun begins. Below you can find useful links to continue your LwM2M journey.","title":"Next steps"},{"location":"quickstart/#get-started-with-popular-hardware-platforms","text":"Follow the Getting started guides to kickstart your LwM2M application using one of the popular hardware platforms: Nordic , STMicroelectronics , ESPRESSIF or Raspberry Pi .","title":"Get started with popular hardware platforms"},{"location":"quickstart/#learn-more-about-coiote-iot-dm","text":"Dive into Coiote IoT Device Management platform and explore its numerous functionalities. From device onboarding using the Bootstrap Server to Data Visualization and running automated Device Tests . Coiote IoT DM docs","title":"Learn more about Coiote IoT DM"},{"location":"quickstart/#join-our-community-on-discord","text":"Join us on Discord to get in touch with AVSystem experts and to meet fellow LwM2M developers.","title":"Join our community on Discord"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/","text":"Configure AWS integration # Follow this section to integrate your AWS services with Coiote IoT DM. Prerequisites # An active AWS subscription with access to IoT Core, CloudFormation, CloudWatch, Lambda and Secrets Manager in supported regions. Installed AWS CLI . A Coiote IoT DM user account with the awsiottenant role. Important It's recommended to create a Coiote IoT DM user account dedicated exclusively for the integration. Note that the integration will work correctly only until the user with the awsiottenant role exists in Coiote IoT DM and the AWS CloudFormation stack is appropriately configured. Supported regions # eu-central-1 eu-north-1 eu-west-1 eu-west-2 eu-west-3 us-east-1 us-east-2 us-west-1 us-west-2 If you cannot find your region, please create a GitHub issue or contact AVSystem. Create a Coiote IoT DM REST user # To start integrating AWS with Coiote IoT DM, you first need to create a user account that will be used to authorize and authenticate API calls from AWS in Coiote IoT DM. To do that: Go to your Coiote IoT DM account and from the Administration menu, select Users management . Select Add user and fill in the form: Provide Email for new user (which will be its username) and select your domain from the Domain path drop-down list. Remember to switch on the User Verified and User Enabled toggle buttons. In the Client Roles fields, pick the Coiote IoT DM client and awsiottenant role. Click Save . Go to the Credentials tab, type a password for your user (twice), select Set password , then confirm by clicking Set password in the pop-up. Copy tasks and provide credentials for your device group in Coiote IoT DM # The Coiote IoT DM-side configuration of the integration is located in the dedicated AWSiotCoreCertAuth device group. To complete this side of the integration, log in as the user with the awsiottenant role (only if that user was created in the Root Domain . If not, they can not access the root groups and the tasks have to be copied from the Cloud admin account.). Then follow the steps below: Go to the Device groups panel and select a group: For the default setting, select the AWSiotCoreCertAuth group which already contains all the necessary tasks and setting values. Alternatively, create a new group and migrate the required tasks and setting values: Select the Add button, name your group and click Add . Migrate all the five tasks that have the AWS prefix in their task name: Select the AWSiotCoreCertAuth group and go to Group tasks , select the first AWS task and click Copy . In the pop-up window, click Select group in the Task target field and choose your custom integration group from the list. Important Remember to select the Domain of the user you created earlier. In the Actions field, select Add new task . Repeat the action for the remaining four tasks. Migrate the AWSdataPlaneEndpointAddress setting value: Select your custom integration group and go to Profiles , then select Copy from . In the pop-up window, click Select group and select the AWSiotCoreCertAuth group. Pick the AWSdataPlaneEndpointAddress setting value from the list by checking it in the Selected column, then click Copy . Enter your AWS Endpoint Name in Coiote IoT DM: Go to Device groups , select your custom integration group (or the AWSiotCoreCertAuth group, depending on the previous step) and go to Profiles . Complete the AWS setting value: Open your command line and run the following command: aws iot describe-endpoint --endpoint-type iot:Data-ATS --region <desired-region-for-the-integration> Copy the returned result. In Coiote IoT DM, go to the Profiles tab of your integration group and paste the result as the value for AWSdataPlaneEndpointAddress . Append :8443 port to the pasted value. Click Save . Optionally, you may now add your LwM2M devices to the integration device group so that they are ready once the integration setup is complete. Add AWS resources using the integration repository # Important To complete this step, make sure you have the appropriate AWS permissions to enter the CloudFormation service and create a stack ( for details, see the AWS CloudFormation User Guide ). To add the resources needed for the integration to your AWS services: Go to the AWS Console page ( https://console.aws.amazon.com/console/home ) and sign in. Make sure that you are in the right region. From the list of services, select CloudFormation . Create a new stack. Use the template of Amazon S3 URL from below and change placeholders [REGION-NAME] to the one you use and is supported . https://coiote-aws-int-[REGION-NAME].s3.[REGION-NAME].amazonaws.com/coiote-aws-integration-cf-template.json Choose a name for the stack and provide the parameters: Important The credentials you provide at this point should belong to the user with access to the Coiote IoT DM group which stores the AWS configuration set in a previous step. coioteDMrestUsername - username of the created Coiote IoT DM account. coioteDMrestPassword - password of the created Coiote IoT DM account. coioteDMrestUri - URL address and port of your Coiote IoT DM installation. The port should always be 8088 to enable proper mTLS-based authentication. Note For some installations, port is not required. If you don't know what port to choose, contact our support. Finalize configuring the stack and wait for its creation to finish. Once the stack is created successfully, the devices in your integration group will be automatically migrated to the AWS IoT Core. To check if your integration works correctly, go to AWS IoT Core, and from the menu, select Manage > Things , then see if your devices are listed as in here: Next steps # To learn how to perform operations on your devices, please see the Performing LwM2M operations chapter. Removing the integration # To remove the integration of AWS and Coiote IoT DM, follow the following steps: In Coiote IoT DM remove all the devices from the AWSiotCoreCertAuth group. Go to the CloudFormation service in AWS and select the stack that was created while setting up the integration. Delete the stack. Go to the S3 service in AWS and select the bucket with the lambda code files. Delete the files.","title":"Configure AWS integration"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#configure-aws-integration","text":"Follow this section to integrate your AWS services with Coiote IoT DM.","title":"Configure AWS integration"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#prerequisites","text":"An active AWS subscription with access to IoT Core, CloudFormation, CloudWatch, Lambda and Secrets Manager in supported regions. Installed AWS CLI . A Coiote IoT DM user account with the awsiottenant role. Important It's recommended to create a Coiote IoT DM user account dedicated exclusively for the integration. Note that the integration will work correctly only until the user with the awsiottenant role exists in Coiote IoT DM and the AWS CloudFormation stack is appropriately configured.","title":"Prerequisites"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#supported-regions","text":"eu-central-1 eu-north-1 eu-west-1 eu-west-2 eu-west-3 us-east-1 us-east-2 us-west-1 us-west-2 If you cannot find your region, please create a GitHub issue or contact AVSystem.","title":"Supported regions"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#create-a-coiote-iot-dm-rest-user","text":"To start integrating AWS with Coiote IoT DM, you first need to create a user account that will be used to authorize and authenticate API calls from AWS in Coiote IoT DM. To do that: Go to your Coiote IoT DM account and from the Administration menu, select Users management . Select Add user and fill in the form: Provide Email for new user (which will be its username) and select your domain from the Domain path drop-down list. Remember to switch on the User Verified and User Enabled toggle buttons. In the Client Roles fields, pick the Coiote IoT DM client and awsiottenant role. Click Save . Go to the Credentials tab, type a password for your user (twice), select Set password , then confirm by clicking Set password in the pop-up.","title":"Create a Coiote IoT DM REST user"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#copy-tasks-and-provide-credentials-for-your-device-group-in-coiote-iot-dm","text":"The Coiote IoT DM-side configuration of the integration is located in the dedicated AWSiotCoreCertAuth device group. To complete this side of the integration, log in as the user with the awsiottenant role (only if that user was created in the Root Domain . If not, they can not access the root groups and the tasks have to be copied from the Cloud admin account.). Then follow the steps below: Go to the Device groups panel and select a group: For the default setting, select the AWSiotCoreCertAuth group which already contains all the necessary tasks and setting values. Alternatively, create a new group and migrate the required tasks and setting values: Select the Add button, name your group and click Add . Migrate all the five tasks that have the AWS prefix in their task name: Select the AWSiotCoreCertAuth group and go to Group tasks , select the first AWS task and click Copy . In the pop-up window, click Select group in the Task target field and choose your custom integration group from the list. Important Remember to select the Domain of the user you created earlier. In the Actions field, select Add new task . Repeat the action for the remaining four tasks. Migrate the AWSdataPlaneEndpointAddress setting value: Select your custom integration group and go to Profiles , then select Copy from . In the pop-up window, click Select group and select the AWSiotCoreCertAuth group. Pick the AWSdataPlaneEndpointAddress setting value from the list by checking it in the Selected column, then click Copy . Enter your AWS Endpoint Name in Coiote IoT DM: Go to Device groups , select your custom integration group (or the AWSiotCoreCertAuth group, depending on the previous step) and go to Profiles . Complete the AWS setting value: Open your command line and run the following command: aws iot describe-endpoint --endpoint-type iot:Data-ATS --region <desired-region-for-the-integration> Copy the returned result. In Coiote IoT DM, go to the Profiles tab of your integration group and paste the result as the value for AWSdataPlaneEndpointAddress . Append :8443 port to the pasted value. Click Save . Optionally, you may now add your LwM2M devices to the integration device group so that they are ready once the integration setup is complete.","title":"Copy tasks and provide credentials for your device group in Coiote IoT DM"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#add-aws-resources-using-the-integration-repository","text":"Important To complete this step, make sure you have the appropriate AWS permissions to enter the CloudFormation service and create a stack ( for details, see the AWS CloudFormation User Guide ). To add the resources needed for the integration to your AWS services: Go to the AWS Console page ( https://console.aws.amazon.com/console/home ) and sign in. Make sure that you are in the right region. From the list of services, select CloudFormation . Create a new stack. Use the template of Amazon S3 URL from below and change placeholders [REGION-NAME] to the one you use and is supported . https://coiote-aws-int-[REGION-NAME].s3.[REGION-NAME].amazonaws.com/coiote-aws-integration-cf-template.json Choose a name for the stack and provide the parameters: Important The credentials you provide at this point should belong to the user with access to the Coiote IoT DM group which stores the AWS configuration set in a previous step. coioteDMrestUsername - username of the created Coiote IoT DM account. coioteDMrestPassword - password of the created Coiote IoT DM account. coioteDMrestUri - URL address and port of your Coiote IoT DM installation. The port should always be 8088 to enable proper mTLS-based authentication. Note For some installations, port is not required. If you don't know what port to choose, contact our support. Finalize configuring the stack and wait for its creation to finish. Once the stack is created successfully, the devices in your integration group will be automatically migrated to the AWS IoT Core. To check if your integration works correctly, go to AWS IoT Core, and from the menu, select Manage > Things , then see if your devices are listed as in here:","title":"Add AWS resources using the integration repository"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#next-steps","text":"To learn how to perform operations on your devices, please see the Performing LwM2M operations chapter.","title":"Next steps"},{"location":"Cloud_integrations/AWS_IoT_Core/Configuring_AWS_integration/#removing-the-integration","text":"To remove the integration of AWS and Coiote IoT DM, follow the following steps: In Coiote IoT DM remove all the devices from the AWSiotCoreCertAuth group. Go to the CloudFormation service in AWS and select the stack that was created while setting up the integration. Delete the stack. Go to the S3 service in AWS and select the bucket with the lambda code files. Delete the files.","title":"Removing the integration"},{"location":"Cloud_integrations/AWS_IoT_Core/Overview/","text":"Overview # Explore the guide to learn how to integrate your IoT assets with the Coiote IoT Device Management platform. To get started, follow the Configuration chapter. What is the AWS IoT Core integration? # Learn the basic concepts behind the integration by reading the Concepts chapter.","title":"Overview"},{"location":"Cloud_integrations/AWS_IoT_Core/Overview/#overview","text":"Explore the guide to learn how to integrate your IoT assets with the Coiote IoT Device Management platform. To get started, follow the Configuration chapter.","title":"Overview"},{"location":"Cloud_integrations/AWS_IoT_Core/Overview/#what-is-the-aws-iot-core-integration","text":"Learn the basic concepts behind the integration by reading the Concepts chapter.","title":"What is the AWS IoT Core integration?"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/","text":"How AWS integration works # Here's a walkthrough of the main concepts related to the AWS IoT Core - Coiote IoT DM integration that will help you understand the role of each of the integration components and how they are employed for the benefit of LwM2M device management via the AWS services. Things # Within the AWS IoT Core - Coiote IoT DM integration, things are the AWS representations of LwM2M device entities managed by the Coiote IoT DM platform. They are used to mirror device state, as well as collect, process and act upon device data on the fly using a connection protocol of your choice. Note Things are automatically added to AWS IoT Core upon completing the integration setup and successful device connection. Thing types # Thing types are containers that store configuration and other device-related information shared by all Things of the same type to simplify their bulk management. Within the integration, they are created automatically when a new device is added to AWS from Coiote IoT DM and they are based on device Manufacturer and Model name . In case a new device with a specific Manufacturer and model name pair can be matched with an existing thing type, then it will be associated with it automatically. Note Note that you cannot modify a once created thing type, but you can deprecate (allowing no new devices to be associated with it) or delete it when there are no things associated with a given Thing type. Device Shadows # A device shadow is a structure that stores the device state and represents it in the form of a JSON file, making the device data available to applications and services regardless of device connection to Coiote IoT DM. To synchronize device state information between the Coiote IoT DM and AWS IoT Core, shadows feature the mechanism of reported and desired values. Reported values section - presents the current device state as reported by the device itself (and mediated by Coiote IoT DM) in a JSON file structure within a device shadow. Desired values section - used for requesting changes in the reported section of the device Operation shadow . For the purposes of the integration, a default of three different shadows is established for each connected thing: an unnamed shadow, a datamodel shadow and an operation shadow. Classic Shadow # The Classic shadow (also unnamed shadow) is used for storing connectivity parameters of a LwM2M device (such as registered lifetime, last lifetime refresh, queue mode, LwM2M URI, device registration status etc.). The reported state refreshes upon each change in these parameters that is reported by Coiote IoT DM ( Register or Update message from device). Operation Shadow # The Operation Shadow is where you request your LwM2M operations to be executed. To this end, the desired values of the device state are used. Thus, you can perform any LwM2M 1.0 operation on the device by defining it inside the desired values section. Also, to check if the operation execution was successful, the reported values section of the Operation Shadow is used (but only in case of the READ, WRITE and READ COMPOSITE operations). Communication flow # A value change using the desired device state is formulated as the one below: { \"state\" : { \"desired\" : { \"operation\" : \"write\" , \"keys\" : [ \"LwM2M Server.1.Lifetime\" , \"Device.0.UTC Offset\" ], \"values\" : [ 68 , \"+02:00\" ] } } } Once a value change in the desired section of the operation shadow is saved, a chain of events starts: A change in the desired section triggers the operationRequest rule. The operationRequest rule sends a request to AWS Lambda . AWS Lambda validates the request and forwards it as an event to Coiote IoT DM, making it schedule a task and initiate a device session. Coiote IoT DM communicates with the device. The device responds to Coiote IoT DM with the operation result. Coiote IoT DM forwards the device response back to the Operation Shadow and the results are published in the reported section. The change in the reported section triggers the operationResponse rule. The results are then republished using the operationResponse rule to the Datamodel shadow (but only in case of the READ, WRITE and READ COMPOSITE operations). Datamodel Shadow # The Datamodel Shadow is the place where the cashed data model of the LwM2M device is stored. What this means is that it is a \"read-only shadow\" that keeps the most recent record of the device state as it has been reported by Coiote IoT DM - no device operations can be performed from here. The Datamodel Shadow is updated in case of the following events: Device Register message that comes from Coiote IoT DM, Device Notify and Send messages, Republishing operation results from the Operation shadow to the Datamodel shadow using the operationResponse rule. CloudWatch logs # CloudWatch collects and keeps a record of all the logs generated on the AWS-side of the integration. You can use these data for analysis and troubleshooting in case of all the AWS integration components: Device Shadows (the data plane), Things and Thing types (the control plane), The Rules mechanism, AWS Lambda.","title":"How AWS integration works"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#how-aws-integration-works","text":"Here's a walkthrough of the main concepts related to the AWS IoT Core - Coiote IoT DM integration that will help you understand the role of each of the integration components and how they are employed for the benefit of LwM2M device management via the AWS services.","title":"How AWS integration works"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#things","text":"Within the AWS IoT Core - Coiote IoT DM integration, things are the AWS representations of LwM2M device entities managed by the Coiote IoT DM platform. They are used to mirror device state, as well as collect, process and act upon device data on the fly using a connection protocol of your choice. Note Things are automatically added to AWS IoT Core upon completing the integration setup and successful device connection.","title":"Things"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#thing-types","text":"Thing types are containers that store configuration and other device-related information shared by all Things of the same type to simplify their bulk management. Within the integration, they are created automatically when a new device is added to AWS from Coiote IoT DM and they are based on device Manufacturer and Model name . In case a new device with a specific Manufacturer and model name pair can be matched with an existing thing type, then it will be associated with it automatically. Note Note that you cannot modify a once created thing type, but you can deprecate (allowing no new devices to be associated with it) or delete it when there are no things associated with a given Thing type.","title":"Thing types"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#device-shadows","text":"A device shadow is a structure that stores the device state and represents it in the form of a JSON file, making the device data available to applications and services regardless of device connection to Coiote IoT DM. To synchronize device state information between the Coiote IoT DM and AWS IoT Core, shadows feature the mechanism of reported and desired values. Reported values section - presents the current device state as reported by the device itself (and mediated by Coiote IoT DM) in a JSON file structure within a device shadow. Desired values section - used for requesting changes in the reported section of the device Operation shadow . For the purposes of the integration, a default of three different shadows is established for each connected thing: an unnamed shadow, a datamodel shadow and an operation shadow.","title":"Device Shadows"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#classic-shadow","text":"The Classic shadow (also unnamed shadow) is used for storing connectivity parameters of a LwM2M device (such as registered lifetime, last lifetime refresh, queue mode, LwM2M URI, device registration status etc.). The reported state refreshes upon each change in these parameters that is reported by Coiote IoT DM ( Register or Update message from device).","title":"Classic Shadow"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#operation-shadow","text":"The Operation Shadow is where you request your LwM2M operations to be executed. To this end, the desired values of the device state are used. Thus, you can perform any LwM2M 1.0 operation on the device by defining it inside the desired values section. Also, to check if the operation execution was successful, the reported values section of the Operation Shadow is used (but only in case of the READ, WRITE and READ COMPOSITE operations).","title":"Operation Shadow"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#communication-flow","text":"A value change using the desired device state is formulated as the one below: { \"state\" : { \"desired\" : { \"operation\" : \"write\" , \"keys\" : [ \"LwM2M Server.1.Lifetime\" , \"Device.0.UTC Offset\" ], \"values\" : [ 68 , \"+02:00\" ] } } } Once a value change in the desired section of the operation shadow is saved, a chain of events starts: A change in the desired section triggers the operationRequest rule. The operationRequest rule sends a request to AWS Lambda . AWS Lambda validates the request and forwards it as an event to Coiote IoT DM, making it schedule a task and initiate a device session. Coiote IoT DM communicates with the device. The device responds to Coiote IoT DM with the operation result. Coiote IoT DM forwards the device response back to the Operation Shadow and the results are published in the reported section. The change in the reported section triggers the operationResponse rule. The results are then republished using the operationResponse rule to the Datamodel shadow (but only in case of the READ, WRITE and READ COMPOSITE operations).","title":"Communication flow"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#datamodel-shadow","text":"The Datamodel Shadow is the place where the cashed data model of the LwM2M device is stored. What this means is that it is a \"read-only shadow\" that keeps the most recent record of the device state as it has been reported by Coiote IoT DM - no device operations can be performed from here. The Datamodel Shadow is updated in case of the following events: Device Register message that comes from Coiote IoT DM, Device Notify and Send messages, Republishing operation results from the Operation shadow to the Datamodel shadow using the operationResponse rule.","title":"Datamodel Shadow"},{"location":"Cloud_integrations/AWS_IoT_Core/Concepts/AWS_Integration_concepts/#cloudwatch-logs","text":"CloudWatch collects and keeps a record of all the logs generated on the AWS-side of the integration. You can use these data for analysis and troubleshooting in case of all the AWS integration components: Device Shadows (the data plane), Things and Thing types (the control plane), The Rules mechanism, AWS Lambda.","title":"CloudWatch logs"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/","text":"Performing LwM2M operations # This section will give you an overview of how to perform LwM2M operations on devices in AWS IoT Core and check AWS CloudWatch logs. Prerequisites # A configured AWS integration. An active LwM2M device already migrated to AWS IoT Core. Execute LwM2M operations on device # Within the AWS - Coiote IoT DM integration, LwM2M operations on devices are triggered by modifying the desired section of a device Operation Shadow . The changes, upon successful execution, are then reported back by Coiote IoT DM and repopulated to the reported section of a device Datamodel Shadow . The integration supports the following LwM2M operations: READ # To send a request for a READ operation to a device: Enter AWS IoT Core and go to Manage > Things . From the list, select your device. Go to the Device Shadows section and select the operation Shadow. Click Edit and formulate the request inside the Device Shadow state field based on the example input given below: In the operation section, type the operation name In the keys section, type the LwM2M object and resource paths for which you want to execute the operation. In the values section, type the values for the specified keys (only for some operations). Read_request { \"state\": { \"desired\": { \"operation\": \"read\", \"keys\": [ \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array.4\" ] } } } Click Update . To see the operation results, check the reported section of the operation Shadow. An example response looks like this: Read_result { \"reported\": { \"operation\": \"read\", \"failedKeys\": [ \"\" ], \"result\": { \"Device\": { \"0\": { \"UTC Offset\": \"+02:00\" } }, \"LwM2M Server\": { \"1\": { \"Lifetime\": \"68\" } }, \"Portfolio\": { \"5\": { \"Identity\": { \"1\": \"AVS\" } }, \"11\": { \"Identity\": { \"1\": \"your_ID\" } } }, \"Test object\": { \"0\": { \"Integer array\": { \"4\": \"256\" } } } } } } Note To execute a READ operation on all the readable resources, enter \"\"/\"\" or \"\"all\"\" as the value in the keys section of the request. WRITE # To request a WRITE operation for a device, follow the steps 1-5 from the READ subsection, but using the following example: Write_request { \"state\": { \"desired\": { \"operation\": \"write\", \"keys\": [ \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array.4\" ], \"values\": [ 68, \"your_ID\", \"random_value\", \"+02:00\", 256 ] } } } OBSERVE # To request a OBSERVE operation for a device, follow the steps 1-5 from the READ subsection, but using the following example: Observe_request { \"state\": { \"desired\": { \"operation\": \"observe\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], \"attributes\": [ {\"epmin\":5,\"gt\":-65.5,\"lt\":-105.5,\"st\":4.0}, {\"pmin\":30,\"pmax\":35}, {}, {\"epmax\":40}, {}, {\"pmax\":20} ] } } } Note In the attributes section, you need to specify the full attribute list with their corresponding values for a given key, as the attributes that are left out will be overwritten with null (except for the con attribute). Alternatively, you can provide an empty value {} so that no attribute values are changed. On the other hand, if you only specify the con attribute for a given key, it will not affect any other attributes and their existing values won't be changed also. To check the results of the OBSERVE operation, go to the datamodel Shadow of your device and see the reported section. EXECUTE # To request an EXECUTE operation for a device, follow the steps 1-5 from the READ subsection, but using the following example: Execute_request { \"state\": { \"desired\": { \"operation\": \"execute\", \"keys\": [ \"Device.0.Reboot\" ] } } } Note With the EXECUTE operation, you can specify only one key for each request. Other operations # Here are example inputs for other operations supported by the integration: READ COMPOSITE, OBSERVE COMPOSITE, WRITE ATTRIBUTES, CANCEL OBSERVE, CANCEL OBSERVE COMPOSITE. Cancel Observe # Cancel_observe { \"state\": { \"desired\": { \"operation\": \"cancelObserve\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ] } } } Note To cancel all the current OBSERVE requests, type \"all\" in the keys section. Write Attributes # Write_attributes { \"state\": { \"desired\": { \"operation\": \"writeAttributes\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], \"attributes\": [ { \"epmin\": 5, \"gt\": -65.5, \"lt\": -105.5, \"st\": 4, \"con\": 1 }, { \"pmin\": 30, \"pmax\": 35, \"con\": \"\" }, {}, { \"epmax\": 40 }, { \"con\": null }, { \"pmax\": 20 } ] } } } Observe-Composite # Observe_composite { \"state\": { \"desired\": { \"operation\": \"observeComposite\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], \"attributes\": [ { \"epmin\": 5, \"gt\": -65.5, \"lt\": -105.5, \"st\": 4, \"con\": 1 }, { \"pmin\": 30, \"pmax\": 35, \"con\": \"\" }, {}, { \"epmax\": 40 }, { \"con\": null }, { \"pmax\": 20 } ] } } } Read-Composite # Read_composite { \"state\": { \"desired\": { \"operation\": \"readComposite\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], } } } Cancel Observe-Composite # Cancelobserve_composite { \"state\": { \"desired\": { \"operation\": \"cancelObserveComposite\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], } } } Check logs in CloudWatch # If you encounter difficulties when forwarding your requests to Coiote IoT DM, it may be helpful to check the logs collected by AWS CloudWatch for all the components of the integration. To check logs for AWS Lambda: Go to AWS CloudWatch and select Logs > Log groups . From the Log groups list, select the /aws/lambda/lwm2mOperation group. To check error logs for all integration components in one place: Go to AWS CloudWatch and select Logs > Log groups . From the Log groups list, select the AWSIotLogsV2 group. Select all the logs from the list by checking the box next to Log stream and click Search all . Expand a log stream to see its details by clicking the arrow icon > .","title":"Performing LwM2M operations"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#performing-lwm2m-operations","text":"This section will give you an overview of how to perform LwM2M operations on devices in AWS IoT Core and check AWS CloudWatch logs.","title":"Performing LwM2M operations"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#prerequisites","text":"A configured AWS integration. An active LwM2M device already migrated to AWS IoT Core.","title":"Prerequisites"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#execute-lwm2m-operations-on-device","text":"Within the AWS - Coiote IoT DM integration, LwM2M operations on devices are triggered by modifying the desired section of a device Operation Shadow . The changes, upon successful execution, are then reported back by Coiote IoT DM and repopulated to the reported section of a device Datamodel Shadow . The integration supports the following LwM2M operations:","title":"Execute LwM2M operations on device"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#read","text":"To send a request for a READ operation to a device: Enter AWS IoT Core and go to Manage > Things . From the list, select your device. Go to the Device Shadows section and select the operation Shadow. Click Edit and formulate the request inside the Device Shadow state field based on the example input given below: In the operation section, type the operation name In the keys section, type the LwM2M object and resource paths for which you want to execute the operation. In the values section, type the values for the specified keys (only for some operations). Read_request { \"state\": { \"desired\": { \"operation\": \"read\", \"keys\": [ \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array.4\" ] } } } Click Update . To see the operation results, check the reported section of the operation Shadow. An example response looks like this: Read_result { \"reported\": { \"operation\": \"read\", \"failedKeys\": [ \"\" ], \"result\": { \"Device\": { \"0\": { \"UTC Offset\": \"+02:00\" } }, \"LwM2M Server\": { \"1\": { \"Lifetime\": \"68\" } }, \"Portfolio\": { \"5\": { \"Identity\": { \"1\": \"AVS\" } }, \"11\": { \"Identity\": { \"1\": \"your_ID\" } } }, \"Test object\": { \"0\": { \"Integer array\": { \"4\": \"256\" } } } } } } Note To execute a READ operation on all the readable resources, enter \"\"/\"\" or \"\"all\"\" as the value in the keys section of the request.","title":"READ"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#write","text":"To request a WRITE operation for a device, follow the steps 1-5 from the READ subsection, but using the following example: Write_request { \"state\": { \"desired\": { \"operation\": \"write\", \"keys\": [ \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array.4\" ], \"values\": [ 68, \"your_ID\", \"random_value\", \"+02:00\", 256 ] } } }","title":"WRITE"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#observe","text":"To request a OBSERVE operation for a device, follow the steps 1-5 from the READ subsection, but using the following example: Observe_request { \"state\": { \"desired\": { \"operation\": \"observe\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], \"attributes\": [ {\"epmin\":5,\"gt\":-65.5,\"lt\":-105.5,\"st\":4.0}, {\"pmin\":30,\"pmax\":35}, {}, {\"epmax\":40}, {}, {\"pmax\":20} ] } } } Note In the attributes section, you need to specify the full attribute list with their corresponding values for a given key, as the attributes that are left out will be overwritten with null (except for the con attribute). Alternatively, you can provide an empty value {} so that no attribute values are changed. On the other hand, if you only specify the con attribute for a given key, it will not affect any other attributes and their existing values won't be changed also. To check the results of the OBSERVE operation, go to the datamodel Shadow of your device and see the reported section.","title":"OBSERVE"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#execute","text":"To request an EXECUTE operation for a device, follow the steps 1-5 from the READ subsection, but using the following example: Execute_request { \"state\": { \"desired\": { \"operation\": \"execute\", \"keys\": [ \"Device.0.Reboot\" ] } } } Note With the EXECUTE operation, you can specify only one key for each request.","title":"EXECUTE"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#other-operations","text":"Here are example inputs for other operations supported by the integration: READ COMPOSITE, OBSERVE COMPOSITE, WRITE ATTRIBUTES, CANCEL OBSERVE, CANCEL OBSERVE COMPOSITE.","title":"Other operations"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#cancel-observe","text":"Cancel_observe { \"state\": { \"desired\": { \"operation\": \"cancelObserve\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ] } } } Note To cancel all the current OBSERVE requests, type \"all\" in the keys section.","title":"Cancel Observe"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#write-attributes","text":"Write_attributes { \"state\": { \"desired\": { \"operation\": \"writeAttributes\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], \"attributes\": [ { \"epmin\": 5, \"gt\": -65.5, \"lt\": -105.5, \"st\": 4, \"con\": 1 }, { \"pmin\": 30, \"pmax\": 35, \"con\": \"\" }, {}, { \"epmax\": 40 }, { \"con\": null }, { \"pmax\": 20 } ] } } }","title":"Write Attributes"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#observe-composite","text":"Observe_composite { \"state\": { \"desired\": { \"operation\": \"observeComposite\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], \"attributes\": [ { \"epmin\": 5, \"gt\": -65.5, \"lt\": -105.5, \"st\": 4, \"con\": 1 }, { \"pmin\": 30, \"pmax\": 35, \"con\": \"\" }, {}, { \"epmax\": 40 }, { \"con\": null }, { \"pmax\": 20 } ] } } }","title":"Observe-Composite"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#read-composite","text":"Read_composite { \"state\": { \"desired\": { \"operation\": \"readComposite\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], } } }","title":"Read-Composite"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#cancel-observe-composite","text":"Cancelobserve_composite { \"state\": { \"desired\": { \"operation\": \"cancelObserveComposite\", \"keys\": [ \"Connectivity Monitoring.0.Radio Signal Strength\", \"LwM2M Server.1.Lifetime\", \"Portfolio.11.Identity.1\", \"Portfolio.5.Identity.1\", \"Device.0.UTC Offset\", \"Test object.0.Integer array\" ], } } }","title":"Cancel Observe-Composite"},{"location":"Cloud_integrations/AWS_IoT_Core/Device_operations/Operation_types/#check-logs-in-cloudwatch","text":"If you encounter difficulties when forwarding your requests to Coiote IoT DM, it may be helpful to check the logs collected by AWS CloudWatch for all the components of the integration. To check logs for AWS Lambda: Go to AWS CloudWatch and select Logs > Log groups . From the Log groups list, select the /aws/lambda/lwm2mOperation group. To check error logs for all integration components in one place: Go to AWS CloudWatch and select Logs > Log groups . From the Log groups list, select the AWSIotLogsV2 group. Select all the logs from the list by checking the box next to Log stream and click Search all . Expand a log stream to see its details by clicking the arrow icon > .","title":"Check logs in CloudWatch"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Configure_Azure_IoT_Central_integration/","text":"Connect integration # To enable communication and data flow between the Azure IoT Central and Coiote IoT DM platforms, you first need to integrate them using the Hyperscaler Integration Center in Coiote IoT DM. Follow the instruction below to learn how to do it. Prerequisites: # An active IoT Central with hub owner access permissions. A Coiote IoT DM user account with permissions to use the Hyperscaler Integration Center. Get the Azure IoT Central integration credentials # In your Azure IoT Central account view, from the left menu, select Application . Under Management , copy the full Application URL (along with '.azureiotcentral.com') into Notepad or other place to keep it for later. From the left menu, click Permissions , select API tokens and click +New . In the dialog window, provide a name for the token and select App Administrator as the role, then click the copy icon for the newly generated token. Now you need to use the obtained credentials in the Coiote IoT DM platform. Set up the Azure IoT Central integration # Use the obtained credentials to establish the integration between Coiote IoT DM and your Azure IoT Central application: In your Coiote IoT DM user account, go to Administration --> Hyperscaler Integration Center In the Integration tab, find the Azure IoT Central tile and click Connect . In the dialog window, paste the previously copied Application URL and API token into the relevant fields. click Save to keep the setting. Your integration should now be established. To get the integration up and running, try synchronizing devices with Azure IoT Central","title":"Configure integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Configure_Azure_IoT_Central_integration/#connect-integration","text":"To enable communication and data flow between the Azure IoT Central and Coiote IoT DM platforms, you first need to integrate them using the Hyperscaler Integration Center in Coiote IoT DM. Follow the instruction below to learn how to do it.","title":"Connect integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Configure_Azure_IoT_Central_integration/#prerequisites","text":"An active IoT Central with hub owner access permissions. A Coiote IoT DM user account with permissions to use the Hyperscaler Integration Center.","title":"Prerequisites:"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Configure_Azure_IoT_Central_integration/#get-the-azure-iot-central-integration-credentials","text":"In your Azure IoT Central account view, from the left menu, select Application . Under Management , copy the full Application URL (along with '.azureiotcentral.com') into Notepad or other place to keep it for later. From the left menu, click Permissions , select API tokens and click +New . In the dialog window, provide a name for the token and select App Administrator as the role, then click the copy icon for the newly generated token. Now you need to use the obtained credentials in the Coiote IoT DM platform.","title":"Get the Azure IoT Central integration credentials"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Configure_Azure_IoT_Central_integration/#set-up-the-azure-iot-central-integration","text":"Use the obtained credentials to establish the integration between Coiote IoT DM and your Azure IoT Central application: In your Coiote IoT DM user account, go to Administration --> Hyperscaler Integration Center In the Integration tab, find the Azure IoT Central tile and click Connect . In the dialog window, paste the previously copied Application URL and API token into the relevant fields. click Save to keep the setting. Your integration should now be established. To get the integration up and running, try synchronizing devices with Azure IoT Central","title":"Set up the Azure IoT Central integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/","text":"Set an Observation # This section describes how to set an Observation in your Azure IoT Central application. Setting an Observation lets your devices know what value changes and for what particular resources they need to notify you about. An Observation can be set for any or all the components of the data model : objects, objects instances, and resources. Whenever there is a change in values, a device will send a Notify message to Coiote IoT DM, which in turn will transfer it to Azure IoT Central. In this section, you learn how to: Assign a device template that acts as a translator between Coiote IoT DM and Azure IoT Central. Create a device group in Azure IoT Central, because an Observation is set at the group level. Run Jobs to add, edit or delete Observations. See value changes for the observed resources. Prerequisites # An active Azure IoT Central with hub owner access permissions. A Coiote IoT DM user account with permissions to use the Azure IoT Central integration. A device group created in Coiote IoT DM. A configured integration between Coiote IoT DM and Azure Iot Central . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device in Coiote IoT DM that has been exported to or imported from Azure IoT Central. Assign a device template # To enable correct communication between Coiote IoT DM and Azure IoT Central, you need two templates. The first template configures the Coiote IoT DM integration with Azure. ( Follow the instruction to learn how to configure it.) The second template builds on the first one and allows to provide information that is used only in Azure IoT Central. For example: a given resource is temperature and is measured in Celsius. Download LwM2M template in Coiote IoT DM # In Coiote IoT DM, go to Administration \u2192 Hyperscaler Integration Center and select the Templates tab. In the list of templates, find the one from which you want to generate the IoT Central template. Attention The template must contain the objects that you want to observe. For example, the Velocity object is contained in the Default rich LwM2M schema template that we use in this tutorial. Click Generate Azure IoT Central template to download the template as a JSON file. Info Default minimal LwM2M schema and Default rich LwM2M schema are the default Azure integration templates that you can use to generate a template for Azure IoT Central. Default minimal LwM2M schema contains only two objects: LwM2M Server and Device that are necessary to connect a device to a LwM2M server. Default rich LwM2M schema contains some additional objects that describe the current state of a device. You can use these default templates to test your integration or for some basic operations. If your device contains other LwM2M objects, then you need to create a new template or copy and edit on of the default templates. Create a device template in Azure IoT Central # From the Overview tab of your Azure IoT Central account, go to IoT Central Application URL . To add a new device template, go to Device templates from the left pane and then click + New . On the Select type page, select the IoT device tile and click Next: Customize . Enter a name for your device template and click Next: Review . Leave the checkbox unticked. In this example, our device template is called template_test_name . On the Review page, click Create . Now you'll be prompted to create a model for your template. Select the Import a model tile. This is where you import the .JSON file you exported from Coiote IoT DM. To publish this device template to the application, click Publish on the Model page. Assign a device template in Azure IoT Central # To assign the published template to a device, go to Devices from the left pane and click on the device you want to observe. In our case, the device is called soilquality . Click Manage templates and choose Assign template . In the dialog that appears, find the template you have previously created in Azure (in our case, this is template_test_name ) and click Assign template . Create a group # Now that you have a device with a template assigned to it, you need to add this device to a group. To create a group: In Azure IoT Central, go to Device groups from the left pane and click + New . Note A device group can only contain devices from a single device template. Fill in the following information: Group name and an optional description. In our case, the group is called device_group_test . Device group access : skip, because LwM2M test application doesn\u2019t use organizations. Create a device query : from the Value drop-down menu, select the name of the device template you created in the previous step ( template_test_name ). Click Run query . After running a query, you'll see the list of devices that are associated with this template. In our case it\u2019s the device called soilquality . Click Save . Set up an Observation # Let\u2019s set an Observation operation on resource ID 6/0/4 . This is Velocity, and the data is sent as Telemetry. To add an Observation, you need to use the Jobs tab. In Azure IoT Central, go to Jobs from the left pane and click + New job . Now configure your job: Name *: Provide a name and an optional description of the job. Access : skip, because LwM2M test application doesn\u2019t use organizations. Target devices : select the device group this job will run on. In our case this is device_group_test . Job properties : Set Job type as Property . Under the Name field, select Velocity attribute / Observed and turn the toggle to True . Add the attributes to this observation. Click + Add and select Velocity attributes / Observation attributes / <name> from the drop-down menu. In the dialog that appears, specify the name of the attribute: pmin . Close the dialog. Enter a value of Velocity attributes / Observation attributes / pmin . In this tutorial the value is set at 1 , which means that notifications will be sent every second. Click Next . Info pmin - the minimum time in seconds between two notifications. pmax - the maximum time in seconds between two notifications. The notification is sent even if the value didn't change. Read more about other attributes in our Brief description of OMA LwM2M . In Delivery options , click Next . In Schedule , click Next . Review the job: n6n0n4 stands for Velocity. Note that objects, object instances, and resources are separated by n in Azure IoT Central. observed is set at true The attribute pmin is set at 1 second. Click Run . See the value changes in Azure IoT Central # In Azure IoT Central, go to Devices from the left pane and click on the device you're observing. You'll see the list of messages that notify about any changes in the desired and reported properties for this device. In the Raw data tab, unfold one of the recent messages. Note that this tab contains all the messages received from your device, and some of them might relate to other objects. Look for a recent message where the JSON snippet contains the information that the Observation has been set for the telemetry resource n6n0n4 (Velocity). To see the data received about the value changes, scroll right until you see the Velocity column. Tip If you don\u2019t see any value in the relevant column (e.g., Velocity), scroll all the way right to the very last column Unmodeled data . If it contains an entry similar to {\"n6n0n4\":\"1634741504000\"} , it means there is a mismatch between Coiote IoT DM and the Azure IoT Central templates. Velocity is a Telemetry resource, but apparently it's set as Property in Azure. To fix this error, go to Device templates in Azure IoT Central, select the relevant template and find the resource you want to edit. In the Capability type column, select Telemetry from the drop-down menu so that it\u2019s consistent with what you have in Coiote IoT DM. Click Save . Go back to Devices and refresh the page to see the changes. Edit or delete an Observation # To edit or delete an Observation, you need to create a new job. In Azure IoT Central, go to Jobs from the left pane and click + New job . Alternatively, you can copy an existing job: Select the job and then click Copy job . To edit the Observation attributes , change the value in the text box. To change the map keys (e.g., pmax to pmin), click on the Ellipse button. To delete an Observation, turn off the toggle to False . Check an Observation in Coiote IoT DM # This step is optional. If you want to make sure that the Observation has been set in Coiote IoT DM as well, do the following: In Coiote IoT DM, go to Device inventory and click on the observed device. From the left pane of the device panel, go to Objects . Find the resource you want to check. In our example, this is 4 Velocity resource in the 6 Location object. Click the refresh button to the left from the Value tracking . You'll see that checkboxes next to Value tracking and Attributes are now filled in green. Next steps # Air quality monitoring - tutorial","title":"Set an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#set-an-observation","text":"This section describes how to set an Observation in your Azure IoT Central application. Setting an Observation lets your devices know what value changes and for what particular resources they need to notify you about. An Observation can be set for any or all the components of the data model : objects, objects instances, and resources. Whenever there is a change in values, a device will send a Notify message to Coiote IoT DM, which in turn will transfer it to Azure IoT Central. In this section, you learn how to: Assign a device template that acts as a translator between Coiote IoT DM and Azure IoT Central. Create a device group in Azure IoT Central, because an Observation is set at the group level. Run Jobs to add, edit or delete Observations. See value changes for the observed resources.","title":"Set an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#prerequisites","text":"An active Azure IoT Central with hub owner access permissions. A Coiote IoT DM user account with permissions to use the Azure IoT Central integration. A device group created in Coiote IoT DM. A configured integration between Coiote IoT DM and Azure Iot Central . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device in Coiote IoT DM that has been exported to or imported from Azure IoT Central.","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#assign-a-device-template","text":"To enable correct communication between Coiote IoT DM and Azure IoT Central, you need two templates. The first template configures the Coiote IoT DM integration with Azure. ( Follow the instruction to learn how to configure it.) The second template builds on the first one and allows to provide information that is used only in Azure IoT Central. For example: a given resource is temperature and is measured in Celsius.","title":"Assign a device template"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#download-lwm2m-template-in-coiote-iot-dm","text":"In Coiote IoT DM, go to Administration \u2192 Hyperscaler Integration Center and select the Templates tab. In the list of templates, find the one from which you want to generate the IoT Central template. Attention The template must contain the objects that you want to observe. For example, the Velocity object is contained in the Default rich LwM2M schema template that we use in this tutorial. Click Generate Azure IoT Central template to download the template as a JSON file. Info Default minimal LwM2M schema and Default rich LwM2M schema are the default Azure integration templates that you can use to generate a template for Azure IoT Central. Default minimal LwM2M schema contains only two objects: LwM2M Server and Device that are necessary to connect a device to a LwM2M server. Default rich LwM2M schema contains some additional objects that describe the current state of a device. You can use these default templates to test your integration or for some basic operations. If your device contains other LwM2M objects, then you need to create a new template or copy and edit on of the default templates.","title":"Download LwM2M template in Coiote IoT DM"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#create-a-device-template-in-azure-iot-central","text":"From the Overview tab of your Azure IoT Central account, go to IoT Central Application URL . To add a new device template, go to Device templates from the left pane and then click + New . On the Select type page, select the IoT device tile and click Next: Customize . Enter a name for your device template and click Next: Review . Leave the checkbox unticked. In this example, our device template is called template_test_name . On the Review page, click Create . Now you'll be prompted to create a model for your template. Select the Import a model tile. This is where you import the .JSON file you exported from Coiote IoT DM. To publish this device template to the application, click Publish on the Model page.","title":"Create a device template in Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#assign-a-device-template-in-azure-iot-central","text":"To assign the published template to a device, go to Devices from the left pane and click on the device you want to observe. In our case, the device is called soilquality . Click Manage templates and choose Assign template . In the dialog that appears, find the template you have previously created in Azure (in our case, this is template_test_name ) and click Assign template .","title":"Assign a device template in Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#create-a-group","text":"Now that you have a device with a template assigned to it, you need to add this device to a group. To create a group: In Azure IoT Central, go to Device groups from the left pane and click + New . Note A device group can only contain devices from a single device template. Fill in the following information: Group name and an optional description. In our case, the group is called device_group_test . Device group access : skip, because LwM2M test application doesn\u2019t use organizations. Create a device query : from the Value drop-down menu, select the name of the device template you created in the previous step ( template_test_name ). Click Run query . After running a query, you'll see the list of devices that are associated with this template. In our case it\u2019s the device called soilquality . Click Save .","title":"Create a group"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#set-up-an-observation","text":"Let\u2019s set an Observation operation on resource ID 6/0/4 . This is Velocity, and the data is sent as Telemetry. To add an Observation, you need to use the Jobs tab. In Azure IoT Central, go to Jobs from the left pane and click + New job . Now configure your job: Name *: Provide a name and an optional description of the job. Access : skip, because LwM2M test application doesn\u2019t use organizations. Target devices : select the device group this job will run on. In our case this is device_group_test . Job properties : Set Job type as Property . Under the Name field, select Velocity attribute / Observed and turn the toggle to True . Add the attributes to this observation. Click + Add and select Velocity attributes / Observation attributes / <name> from the drop-down menu. In the dialog that appears, specify the name of the attribute: pmin . Close the dialog. Enter a value of Velocity attributes / Observation attributes / pmin . In this tutorial the value is set at 1 , which means that notifications will be sent every second. Click Next . Info pmin - the minimum time in seconds between two notifications. pmax - the maximum time in seconds between two notifications. The notification is sent even if the value didn't change. Read more about other attributes in our Brief description of OMA LwM2M . In Delivery options , click Next . In Schedule , click Next . Review the job: n6n0n4 stands for Velocity. Note that objects, object instances, and resources are separated by n in Azure IoT Central. observed is set at true The attribute pmin is set at 1 second. Click Run .","title":"Set up an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#see-the-value-changes-in-azure-iot-central","text":"In Azure IoT Central, go to Devices from the left pane and click on the device you're observing. You'll see the list of messages that notify about any changes in the desired and reported properties for this device. In the Raw data tab, unfold one of the recent messages. Note that this tab contains all the messages received from your device, and some of them might relate to other objects. Look for a recent message where the JSON snippet contains the information that the Observation has been set for the telemetry resource n6n0n4 (Velocity). To see the data received about the value changes, scroll right until you see the Velocity column. Tip If you don\u2019t see any value in the relevant column (e.g., Velocity), scroll all the way right to the very last column Unmodeled data . If it contains an entry similar to {\"n6n0n4\":\"1634741504000\"} , it means there is a mismatch between Coiote IoT DM and the Azure IoT Central templates. Velocity is a Telemetry resource, but apparently it's set as Property in Azure. To fix this error, go to Device templates in Azure IoT Central, select the relevant template and find the resource you want to edit. In the Capability type column, select Telemetry from the drop-down menu so that it\u2019s consistent with what you have in Coiote IoT DM. Click Save . Go back to Devices and refresh the page to see the changes.","title":"See the value changes in Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#edit-or-delete-an-observation","text":"To edit or delete an Observation, you need to create a new job. In Azure IoT Central, go to Jobs from the left pane and click + New job . Alternatively, you can copy an existing job: Select the job and then click Copy job . To edit the Observation attributes , change the value in the text box. To change the map keys (e.g., pmax to pmin), click on the Ellipse button. To delete an Observation, turn off the toggle to False .","title":"Edit or delete an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#check-an-observation-in-coiote-iot-dm","text":"This step is optional. If you want to make sure that the Observation has been set in Coiote IoT DM as well, do the following: In Coiote IoT DM, go to Device inventory and click on the observed device. From the left pane of the device panel, go to Objects . Find the resource you want to check. In our example, this is 4 Velocity resource in the 6 Location object. Click the refresh button to the left from the Value tracking . You'll see that checkboxes next to Value tracking and Attributes are now filled in green.","title":"Check an Observation in Coiote IoT DM"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Set_an_Observation/#next-steps","text":"Air quality monitoring - tutorial","title":"Next steps"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Overview/","text":"Overview # How synchronization works # Coiote IoT DM provides zero-touch provisioning for devices synchronized with Azure IoT Central. This means any devices imported using a CSV file are automatically created within Coiote IoT DM and Azure IoT Central and from this time on are synchronized periodically. Therefore, after any successful synchronization, you can be sure that any devices that have been imported via Coiote IoT DM will be presented in their actual state within Azure IoT Central.","title":"Overview"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Overview/#overview","text":"","title":"Overview"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Overview/#how-synchronization-works","text":"Coiote IoT DM provides zero-touch provisioning for devices synchronized with Azure IoT Central. This means any devices imported using a CSV file are automatically created within Coiote IoT DM and Azure IoT Central and from this time on are synchronized periodically. Therefore, after any successful synchronization, you can be sure that any devices that have been imported via Coiote IoT DM will be presented in their actual state within Azure IoT Central.","title":"How synchronization works"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/","text":"Synchronize devices with Azure IoT Central # Importing devices to Coiote IoT DM and synchronizing them with Azure IoT Central is a quick way to start using your Coiote IoT DM - Azure IoT Central integration. The import operation will do two basic operations automatically: Create device entities in Coiote IoT DM with the credentials that you specified, create the devices' \"counterparts\" within Azure IoT Central and synchronize them with Coiote IoT DM. Prerequisites # A connected Azure IoT Central integration in the Hyperscaler Integration Center. Synchronize devices with Azure IoT Hub (option 1) # When a device is already added to Coiote IoT DM's Device inventory, you can simply synchronize the specifc device by clicking the three dots and select Connect to Azure . Import devices from CSV using a default integration template (option 2) # In the import process, you will need a list of devices that you want to import along with an integration template to be used by Azure IoT Central. To learn more about Azure integration templates, see the Configure integration templates section. In Coiote IoT DM, go to Administration -> Hyperscaler Integration Center . Make sure you have an integration connected in the Integration tab. Go to the Device list tab and click Import devices . In the Import devices wizard: From the Select template field, select one of two default integration templates: Default minimal LwM2M schema - a pre-defined template implementing a basic device data model. Default rich LwM2M schema - a pre-defined template implementing an extended device data model. Note Integration templates are crucial in the device import process. Optionally, you can create your custom device template and use it in importing. Check the instructions in the Configure integration templates section. In the Import devices from a CSV file section: If you already have a CSV file with devices for import, click Browse and select the file. If you don't have a CSV with devices for import yet, click the device template link to download an empty template that you can fill in with your data: DeviceId - provide your device ID. For LwM2M-enabled devices, device ID usually equals the endpoint name. IMSI - provide a random but unique number for each entry (or provide IMSI number if your device has one). PSK_Identity_Key - provide a unique plain-text PSK identity key used for secure communication between the device and Coiote IoT DM. PSK_Key - provide a unique HEX-encoded PSK key used for secure communication between the device and Coiote IoT DM. Save the template and upload it using the Browse button and dialog window. Click Sync with Azure . After a moment, the import operation should finish successfully. Now you can connect your physical devices to Coiote IoT DM using their credentials and the dedicated URL displayed after the successful device import. What the import operation does # Once the devices from the CSV template are imported into Coiote IoT DM, the following actions are performed: In Coiote IoT DM, device entities are created based on the credentials provided in the template. All such entities are visible in the Device list tab: In Coiote IoT DM, a dedicated integration group is automatically created (with name built up by the hyperscalercenter prefix and the template ID, e.g. 618238c8bcafcb43b2911261 ). In your Azure IoT Central, devices are created and ready for operation. Check device error logs # Logs may come helpful for diagnosing and troubleshooting issues with the communication between the three actors in the integration: the device, Coiote IoT DM, and Azure IoT Central. To see logs for your integrated devices: Go to the single device view and from the left menu, select the Logs tile. In the Logs panel, expand the view by clicking on More and configure the following: Store from level - select Use custom and set log level to DEBUG for 1 hour. Tags - select HYPERSCALERS The communication logs will be displayed, allowing you to check, diagnose, or debug any issues.","title":"Synchronize devices with Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/#synchronize-devices-with-azure-iot-central","text":"Importing devices to Coiote IoT DM and synchronizing them with Azure IoT Central is a quick way to start using your Coiote IoT DM - Azure IoT Central integration. The import operation will do two basic operations automatically: Create device entities in Coiote IoT DM with the credentials that you specified, create the devices' \"counterparts\" within Azure IoT Central and synchronize them with Coiote IoT DM.","title":"Synchronize devices with Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/#prerequisites","text":"A connected Azure IoT Central integration in the Hyperscaler Integration Center.","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/#synchronize-devices-with-azure-iot-hub-option-1","text":"When a device is already added to Coiote IoT DM's Device inventory, you can simply synchronize the specifc device by clicking the three dots and select Connect to Azure .","title":"Synchronize devices with Azure IoT Hub (option 1)"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/#import-devices-from-csv-using-a-default-integration-template-option-2","text":"In the import process, you will need a list of devices that you want to import along with an integration template to be used by Azure IoT Central. To learn more about Azure integration templates, see the Configure integration templates section. In Coiote IoT DM, go to Administration -> Hyperscaler Integration Center . Make sure you have an integration connected in the Integration tab. Go to the Device list tab and click Import devices . In the Import devices wizard: From the Select template field, select one of two default integration templates: Default minimal LwM2M schema - a pre-defined template implementing a basic device data model. Default rich LwM2M schema - a pre-defined template implementing an extended device data model. Note Integration templates are crucial in the device import process. Optionally, you can create your custom device template and use it in importing. Check the instructions in the Configure integration templates section. In the Import devices from a CSV file section: If you already have a CSV file with devices for import, click Browse and select the file. If you don't have a CSV with devices for import yet, click the device template link to download an empty template that you can fill in with your data: DeviceId - provide your device ID. For LwM2M-enabled devices, device ID usually equals the endpoint name. IMSI - provide a random but unique number for each entry (or provide IMSI number if your device has one). PSK_Identity_Key - provide a unique plain-text PSK identity key used for secure communication between the device and Coiote IoT DM. PSK_Key - provide a unique HEX-encoded PSK key used for secure communication between the device and Coiote IoT DM. Save the template and upload it using the Browse button and dialog window. Click Sync with Azure . After a moment, the import operation should finish successfully. Now you can connect your physical devices to Coiote IoT DM using their credentials and the dedicated URL displayed after the successful device import.","title":"Import devices from CSV using a default integration template (option 2)"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/#what-the-import-operation-does","text":"Once the devices from the CSV template are imported into Coiote IoT DM, the following actions are performed: In Coiote IoT DM, device entities are created based on the credentials provided in the template. All such entities are visible in the Device list tab: In Coiote IoT DM, a dedicated integration group is automatically created (with name built up by the hyperscalercenter prefix and the template ID, e.g. 618238c8bcafcb43b2911261 ). In your Azure IoT Central, devices are created and ready for operation.","title":"What the import operation does"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Central/Device_operations/Synchronize_devices_with_Azure_IoT_Central/#check-device-error-logs","text":"Logs may come helpful for diagnosing and troubleshooting issues with the communication between the three actors in the integration: the device, Coiote IoT DM, and Azure IoT Central. To see logs for your integrated devices: Go to the single device view and from the left menu, select the Logs tile. In the Logs panel, expand the view by clicking on More and configure the following: Store from level - select Use custom and set log level to DEBUG for 1 hour. Tags - select HYPERSCALERS The communication logs will be displayed, allowing you to check, diagnose, or debug any issues.","title":"Check device error logs"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/","text":"Connect integration # Azure IoT Hub Device Provisioning Service (DPS) is a helper service for Azure IoT Hub that enables zero-touch provisioning of IoT devices at scale. Azure DPS ensures high availability by providing load balancing across multiple hubs and supporting reprovisioning based on a change in the device. For more information about Azure DPS, refer to the official documentation . Coiote IoT DM communicates with Azure DPS to add a device to the right IoT hub and then receives the credentials to connect to the selected hub. To enable communication between Azure DPS and Coiote IoT DM, you first need to connect them using the Hyperscaler Integration Center in Coiote IoT DM. Follow the instruction below to learn how to do it. Prerequisites # An active DPS with linked IoT hubs . An active IoT Hub with hub owner access permissions. Read here how to create a hub. A Coiote IoT DM user account with permissions to use the Azure DPS integration. Create an Enrollment group # This step describes how to create an Enrollment group. If you already have one, proceed to the Get the credentials section. A device can be enrolled in Azure DPS either individually or as a group of devices that share a specific attestation mechanism. Currently, Coiote IoT DM doesn't support Individual Enrollments, so you need to choose the Enrollment group option. To create an Enrollment group: Log in to the Azure portal and click on your Device Provisioning Service . Go to Manage enrollments from the left pane. Click + Add enrollment group . Provide the group name and select the Symmetric key option from the Attestation Type. Make sure that the Auto-generate keys checkbox is ticked. Click Save . You\u2019ve just created your enrollment group. The generated Symmetric Key will be used in the next step. Info On the Enrollment Group Details page, you can also select to which hub the enrollment group will be assigned. The list of hubs that are connected to this DPS is displayed in the drop-down menu under Select the IoT hubs this group can be assigned to . To add more hubs to this list, click Link a new IoT hub or go to the Linked IoT hubs page from the left pane. You can also define how devices should be assigned to hubs. From the Select how you want to assign devices to hubs drop-down menu, the following options are available: Lowest latency, Evenly weighted distribution, Static configuration, or Custom. For more information, refer to the official Azure DPS documentation . Get the credentials # This step explains where you can get the credentials for setting up the Azure DPS integration in Coiote IoT DM. ID Scope # The ID Scope is used to identify the specific provisioning service for the device registration. The ID Scope is automatically generated and unique. Log in to the Azure portal and click on your Device Provisioning Service . On the Overview page, locate the ID Scope under the Essentials section. Paste it into Notepad or another place to keep it for later. Enrollment group key # Select Manage enrollments from the left pane of your Azure DPS. Under the Enrollment Groups tab, click on the group that you want to use. In the Settings tab, under Attestation Type, copy Primary Key. Set up the Azure DPS integration # In your Coiote IoT DM account, go to Administration \u2014> Hyperscaler Integration Center . In the Integration tab, locate the Azure DPS tale and click Connect . In the dialog that appears, provide the credentials for your Azure DPS integration: ID Scope : paste the ID Scope copied from the Overview page. Enrollment group key: paste the Primary Key copied from the Enrollment group. Device Provisioning Service hostname: API HTTP host. It can be left as it is: global.azure-devices-provisioning.net What happens next # After you set up Azure DPS and connect your Azure DPS integration in Coiote IoT DM, device provisioning and reprovisioning to the proper IoT hub are automated. You aren\u2019t required to make any changes in Coiote IoT DM. Importing and exporting devices, upgrading device firmware, and setting observations\u2014all these operations happen at the level of individual hubs. The detailed instructions are provided in our Azure IoT Hub documentation . To see to which hub a device has been assigned: Go to Manage enrollments from the left pane. Under the Enrollment Groups tab, click on the group. Select the Registration Records tab and see the Assigned IoT Hub column. Next steps # Device operations on Azure IoT Hub Azure DPS documentation","title":"Configure integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#connect-integration","text":"Azure IoT Hub Device Provisioning Service (DPS) is a helper service for Azure IoT Hub that enables zero-touch provisioning of IoT devices at scale. Azure DPS ensures high availability by providing load balancing across multiple hubs and supporting reprovisioning based on a change in the device. For more information about Azure DPS, refer to the official documentation . Coiote IoT DM communicates with Azure DPS to add a device to the right IoT hub and then receives the credentials to connect to the selected hub. To enable communication between Azure DPS and Coiote IoT DM, you first need to connect them using the Hyperscaler Integration Center in Coiote IoT DM. Follow the instruction below to learn how to do it.","title":"Connect integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#prerequisites","text":"An active DPS with linked IoT hubs . An active IoT Hub with hub owner access permissions. Read here how to create a hub. A Coiote IoT DM user account with permissions to use the Azure DPS integration.","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#create-an-enrollment-group","text":"This step describes how to create an Enrollment group. If you already have one, proceed to the Get the credentials section. A device can be enrolled in Azure DPS either individually or as a group of devices that share a specific attestation mechanism. Currently, Coiote IoT DM doesn't support Individual Enrollments, so you need to choose the Enrollment group option. To create an Enrollment group: Log in to the Azure portal and click on your Device Provisioning Service . Go to Manage enrollments from the left pane. Click + Add enrollment group . Provide the group name and select the Symmetric key option from the Attestation Type. Make sure that the Auto-generate keys checkbox is ticked. Click Save . You\u2019ve just created your enrollment group. The generated Symmetric Key will be used in the next step. Info On the Enrollment Group Details page, you can also select to which hub the enrollment group will be assigned. The list of hubs that are connected to this DPS is displayed in the drop-down menu under Select the IoT hubs this group can be assigned to . To add more hubs to this list, click Link a new IoT hub or go to the Linked IoT hubs page from the left pane. You can also define how devices should be assigned to hubs. From the Select how you want to assign devices to hubs drop-down menu, the following options are available: Lowest latency, Evenly weighted distribution, Static configuration, or Custom. For more information, refer to the official Azure DPS documentation .","title":"Create an Enrollment group"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#get-the-credentials","text":"This step explains where you can get the credentials for setting up the Azure DPS integration in Coiote IoT DM.","title":"Get the credentials"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#id-scope","text":"The ID Scope is used to identify the specific provisioning service for the device registration. The ID Scope is automatically generated and unique. Log in to the Azure portal and click on your Device Provisioning Service . On the Overview page, locate the ID Scope under the Essentials section. Paste it into Notepad or another place to keep it for later.","title":"ID Scope"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#enrollment-group-key","text":"Select Manage enrollments from the left pane of your Azure DPS. Under the Enrollment Groups tab, click on the group that you want to use. In the Settings tab, under Attestation Type, copy Primary Key.","title":"Enrollment group key"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#set-up-the-azure-dps-integration","text":"In your Coiote IoT DM account, go to Administration \u2014> Hyperscaler Integration Center . In the Integration tab, locate the Azure DPS tale and click Connect . In the dialog that appears, provide the credentials for your Azure DPS integration: ID Scope : paste the ID Scope copied from the Overview page. Enrollment group key: paste the Primary Key copied from the Enrollment group. Device Provisioning Service hostname: API HTTP host. It can be left as it is: global.azure-devices-provisioning.net","title":"Set up the Azure DPS integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#what-happens-next","text":"After you set up Azure DPS and connect your Azure DPS integration in Coiote IoT DM, device provisioning and reprovisioning to the proper IoT hub are automated. You aren\u2019t required to make any changes in Coiote IoT DM. Importing and exporting devices, upgrading device firmware, and setting observations\u2014all these operations happen at the level of individual hubs. The detailed instructions are provided in our Azure IoT Hub documentation . To see to which hub a device has been assigned: Go to Manage enrollments from the left pane. Under the Enrollment Groups tab, click on the group. Select the Registration Records tab and see the Assigned IoT Hub column.","title":"What happens next"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_DPS/Configuring_Azure_IoT_DPS_integration_extension/#next-steps","text":"Device operations on Azure IoT Hub Azure DPS documentation","title":"Next steps"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Configure_Azure_IoT_Hub_integration/","text":"Connect integration # To enable communication and data flow between the Azure IoT Hub and Coiote IoT DM platforms, you first need to integrate them using the Hyperscaler Integration Center in Coiote IoT DM. Follow the instructions below to learn how to do it. Prerequisites # An active IoT Hub with hub owner access permissions. Check here how to create a hub. A Coiote IoT DM user account with permissions to use the Hyperscaler Integration Center. An active Azure Blob Storage account (creating a new dedicated account for the integration is required). Get the IoT Hub connection string # The Azure IoT Hub connection string is required in the integration process. Here is how to obtain it: In your IoT Hub general view, go to Shared access policies : From the list of policies, click the iothubowner policy. From the keys section, click the copy icon for the Primary connection string and paste it into Notepad or any other safe place to keep it for later. Info For detailed information about the IoT Hub permissions, please visit the Control access to IoT Hub section of the Azure IoT Hub documentation. Get the Azure Blob storage connection string # Important For the integration to work properly, it is required to have an empty Azure Blob storage account dedicated exclusively for the integration. An Azure Blob storage connection string is required in the integration process. Here is how to obtain it: In your Azure Blob storage account, go to Access keys . Click Show keys , click the copy icon next to the connection string and paste it into Notepad or any other safe place to keep it for later. Set up the Azure IoT Hub integration # Use the obtained credentials to establish the integration between Coiote IoT DM and your Azure IoT hub: In your Coiote IoT DM user account, go to Integrations \u2192 Hyperscaler Integration Center In the Integrations tab, find the Azure IoT Hub tile and click Connect . In the dialog window, paste the previously copied IoT Hub connection string and Azure Blob storage connection string into the relevant fields. click Save to keep the setting. Your integration should now be established. To get the integration up and running, try synchronizing devices with Azure IoT Hub","title":"Configure integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Configure_Azure_IoT_Hub_integration/#connect-integration","text":"To enable communication and data flow between the Azure IoT Hub and Coiote IoT DM platforms, you first need to integrate them using the Hyperscaler Integration Center in Coiote IoT DM. Follow the instructions below to learn how to do it.","title":"Connect integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Configure_Azure_IoT_Hub_integration/#prerequisites","text":"An active IoT Hub with hub owner access permissions. Check here how to create a hub. A Coiote IoT DM user account with permissions to use the Hyperscaler Integration Center. An active Azure Blob Storage account (creating a new dedicated account for the integration is required).","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Configure_Azure_IoT_Hub_integration/#get-the-iot-hub-connection-string","text":"The Azure IoT Hub connection string is required in the integration process. Here is how to obtain it: In your IoT Hub general view, go to Shared access policies : From the list of policies, click the iothubowner policy. From the keys section, click the copy icon for the Primary connection string and paste it into Notepad or any other safe place to keep it for later. Info For detailed information about the IoT Hub permissions, please visit the Control access to IoT Hub section of the Azure IoT Hub documentation.","title":"Get the IoT Hub connection string"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Configure_Azure_IoT_Hub_integration/#get-the-azure-blob-storage-connection-string","text":"Important For the integration to work properly, it is required to have an empty Azure Blob storage account dedicated exclusively for the integration. An Azure Blob storage connection string is required in the integration process. Here is how to obtain it: In your Azure Blob storage account, go to Access keys . Click Show keys , click the copy icon next to the connection string and paste it into Notepad or any other safe place to keep it for later.","title":"Get the Azure Blob storage connection string"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Configure_Azure_IoT_Hub_integration/#set-up-the-azure-iot-hub-integration","text":"Use the obtained credentials to establish the integration between Coiote IoT DM and your Azure IoT hub: In your Coiote IoT DM user account, go to Integrations \u2192 Hyperscaler Integration Center In the Integrations tab, find the Azure IoT Hub tile and click Connect . In the dialog window, paste the previously copied IoT Hub connection string and Azure Blob storage connection string into the relevant fields. click Save to keep the setting. Your integration should now be established. To get the integration up and running, try synchronizing devices with Azure IoT Hub","title":"Set up the Azure IoT Hub integration"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Execute/","text":"Perform LwM2M Execute # This section describes how to perform a LwM2M EXECUTE operation in your Azure IoT Hub. An EXECUTE operation lets you perform operations on IoT devices such as a reboot or a firmware upgrade, only on individual resources. In this section, you learn how to: Perform a LwM2M EXECUTE operation on a resource Prerequisites # An active Azure IoT Hub with hub owner access permissions. A Coiote IoT DM user account with permissions to use the integration extension. A device group created in Coiote IoT DM. A configured extension between Coiote IoT DM and Azure Iot Hub . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device . Perform EXECUTE # Let\u2019s perform an EXECUTE operation on the Factory Reset resource with ID 3/0/5 . Note From the Azure IoT integration standpoint, Factory Reset is interpreted as a Command . Read more about how LwM2M data model is mapped to Azure IoT Hub mechanisms in Concepts . In your Azure IoT Hub account, go to Devices from the left pane. Click on the device and then go to Direct method . As Method name , type execute . In Payload , paste the following snippet and click Invoke method : { \"path\": \"3.0.5\" } Note The exact LwM2M path of the Factory reset resource depends on the LwM2M client used and may vary slightly, e.g. in the object instance number: 3/1/5 . For the purpose of this tutorial, the Anjay LwM2M Client is used. If needed, modify the snippet according to your case. See value changes in Azure IoT Hub # The result of the EXECUTE operation is displayed in the same Direct method tab. Scroll down to the Result field and check the HTTP code. The following result means that the device has executed the resource successfully: {\"status\":200,\"payload\":\"Executed `3.0.5` successfully\"}","title":"Perform LwM2M Execute"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Execute/#perform-lwm2m-execute","text":"This section describes how to perform a LwM2M EXECUTE operation in your Azure IoT Hub. An EXECUTE operation lets you perform operations on IoT devices such as a reboot or a firmware upgrade, only on individual resources. In this section, you learn how to: Perform a LwM2M EXECUTE operation on a resource","title":"Perform LwM2M Execute"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Execute/#prerequisites","text":"An active Azure IoT Hub with hub owner access permissions. A Coiote IoT DM user account with permissions to use the integration extension. A device group created in Coiote IoT DM. A configured extension between Coiote IoT DM and Azure Iot Hub . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device .","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Execute/#perform-execute","text":"Let\u2019s perform an EXECUTE operation on the Factory Reset resource with ID 3/0/5 . Note From the Azure IoT integration standpoint, Factory Reset is interpreted as a Command . Read more about how LwM2M data model is mapped to Azure IoT Hub mechanisms in Concepts . In your Azure IoT Hub account, go to Devices from the left pane. Click on the device and then go to Direct method . As Method name , type execute . In Payload , paste the following snippet and click Invoke method : { \"path\": \"3.0.5\" } Note The exact LwM2M path of the Factory reset resource depends on the LwM2M client used and may vary slightly, e.g. in the object instance number: 3/1/5 . For the purpose of this tutorial, the Anjay LwM2M Client is used. If needed, modify the snippet according to your case.","title":"Perform EXECUTE"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Execute/#see-value-changes-in-azure-iot-hub","text":"The result of the EXECUTE operation is displayed in the same Direct method tab. Scroll down to the Result field and check the HTTP code. The following result means that the device has executed the resource successfully: {\"status\":200,\"payload\":\"Executed `3.0.5` successfully\"}","title":"See value changes in Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/","text":"Perform LwM2M Read and Write # This section describes how to perform a LwM2M WRITE and READ operations in your Azure IoT Hub and Coiote IoT DM. A WRITE operation lets you change the current value on the given data model component: object, object instance, and resource. The READ enables you to see the updated value of an object, object instance, or resource. In this section, you learn how to: Perform WRITE on resources Check for the reported value changes in resources Perform READ on resources Prerequisites # An active Azure IoT Hub with hub owner access permissions. A Coiote IoT DM user account with permissions to use the integration extension. A device group created in Coiote IoT DM. A configured extension between Coiote IoT DM and Azure Iot Hub . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device . Perform WRITE # Let\u2019s perform a WRITE operation on the Lifetime resource with ID 1/1/1 . From the Azure IoT integration standpoint, Lifetime it is interpreted as a Property . In Azure IoT Hub, value changes for both Telemetry and Property are stored in the Device twin . To perform a WRITE operation, do the following: In your Azure IoT Hub account, go to Devices from the left pane. Click on the device and then go to Device twin . Find the desired property in the JSON snippet. This is where you define what needs to be observed. To the 1/1/1 (Lifetime) resource, add the following snippet under the \"desired\": { property and click Save : \"lwm2m\": { \"1\": { \"1\": { \"0\": {}, \"1\": { \"value\": 60 }, } }, }, Note The exact LwM2M path of the Lifetime resource depends on the LwM2M client used and may vary slightly, e.g. in the object instance number: 1/0/1 . For the purpose of this tutorial, the Anjay LwM2M Client is used. If needed, modify the snippet according to your case. After you click Save , the line with value: 60 will trigger the WRITE operation. See value changes # In Azure IoT Hub # The value change for the resource is displayed in the same Device Twin JSON snippet. Scroll down to the Reported property and find the value line for the 1/1/1 resource. \"reported\": { \"lwm2m\": { \"1\": { \"1\": { \"0\": {}, \"1\": { \"value\": 60 }, If you don\u2019t see any changes, click Refresh . If it doesn\u2019t help, you can check whether the WRITE operation has been performed in Coiote IoT DM as well. In Coiote IoT DM # This step is optional. If you want to make sure the WRITE has been correctly performed in Coiote IoT DM, do the following: In Coiote IoT DM, go to your device and select the Data model tab. Expand the LwM2M Server object, find the Lifetime (1/1/1) resource in the list. If there is no change in data, use the Refresh icon in the top right corner of the screen. You have successfully performed a LwM2M WRITE on a resource. Perform READ # Let\u2019s perform a READ operation on the Temperature object's Sensor Value resource with ID 3303/0/5700 defined as a Property in the integration template in Coiote IoT DM . To learn more about reading value changes for both Telemetry and Property , refer to LwM2M mappings for Azure IoT Hub . To perform a READ operation, do the following: In Coiote IoT DM, go to your device and select the Data model tab. Expand the Temperature object, and find the Sensor Value (3303/0/5700) resource in the list. Click the Read resource icon located under the OPERATIONS column. The READ is scheduled - if there is any value change, it should be displayed in a few moments (depending on device settings, like the Lifetime resource). See value change in Azure IoT Hub # The value change for the resource is displayed in the Device Twin JSON snippet. Scroll down to the Reported property and find the value line for the 3303/0/5700 resource. \"reported\": { \"lwm2m\": { \"3303\": { \"0\": { \"5601\": {}, \"5602\": {}, \"5603\": {}, \"5604\": {}, \"5700\": { \"value\": 18 }, If you don\u2019t see any changes, click Refresh . If it doesn\u2019t help, you can check whether the READ operation has been performed in Coiote IoT DM as well. Next steps # Air quality monitoring - tutorial","title":"Perform LwM2M Read and Write"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#perform-lwm2m-read-and-write","text":"This section describes how to perform a LwM2M WRITE and READ operations in your Azure IoT Hub and Coiote IoT DM. A WRITE operation lets you change the current value on the given data model component: object, object instance, and resource. The READ enables you to see the updated value of an object, object instance, or resource. In this section, you learn how to: Perform WRITE on resources Check for the reported value changes in resources Perform READ on resources","title":"Perform LwM2M Read and Write"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#prerequisites","text":"An active Azure IoT Hub with hub owner access permissions. A Coiote IoT DM user account with permissions to use the integration extension. A device group created in Coiote IoT DM. A configured extension between Coiote IoT DM and Azure Iot Hub . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device .","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#perform-write","text":"Let\u2019s perform a WRITE operation on the Lifetime resource with ID 1/1/1 . From the Azure IoT integration standpoint, Lifetime it is interpreted as a Property . In Azure IoT Hub, value changes for both Telemetry and Property are stored in the Device twin . To perform a WRITE operation, do the following: In your Azure IoT Hub account, go to Devices from the left pane. Click on the device and then go to Device twin . Find the desired property in the JSON snippet. This is where you define what needs to be observed. To the 1/1/1 (Lifetime) resource, add the following snippet under the \"desired\": { property and click Save : \"lwm2m\": { \"1\": { \"1\": { \"0\": {}, \"1\": { \"value\": 60 }, } }, }, Note The exact LwM2M path of the Lifetime resource depends on the LwM2M client used and may vary slightly, e.g. in the object instance number: 1/0/1 . For the purpose of this tutorial, the Anjay LwM2M Client is used. If needed, modify the snippet according to your case. After you click Save , the line with value: 60 will trigger the WRITE operation.","title":"Perform WRITE"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#see-value-changes","text":"","title":"See value changes"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#in-azure-iot-hub","text":"The value change for the resource is displayed in the same Device Twin JSON snippet. Scroll down to the Reported property and find the value line for the 1/1/1 resource. \"reported\": { \"lwm2m\": { \"1\": { \"1\": { \"0\": {}, \"1\": { \"value\": 60 }, If you don\u2019t see any changes, click Refresh . If it doesn\u2019t help, you can check whether the WRITE operation has been performed in Coiote IoT DM as well.","title":"In Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#in-coiote-iot-dm","text":"This step is optional. If you want to make sure the WRITE has been correctly performed in Coiote IoT DM, do the following: In Coiote IoT DM, go to your device and select the Data model tab. Expand the LwM2M Server object, find the Lifetime (1/1/1) resource in the list. If there is no change in data, use the Refresh icon in the top right corner of the screen. You have successfully performed a LwM2M WRITE on a resource.","title":"In Coiote IoT DM"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#perform-read","text":"Let\u2019s perform a READ operation on the Temperature object's Sensor Value resource with ID 3303/0/5700 defined as a Property in the integration template in Coiote IoT DM . To learn more about reading value changes for both Telemetry and Property , refer to LwM2M mappings for Azure IoT Hub . To perform a READ operation, do the following: In Coiote IoT DM, go to your device and select the Data model tab. Expand the Temperature object, and find the Sensor Value (3303/0/5700) resource in the list. Click the Read resource icon located under the OPERATIONS column. The READ is scheduled - if there is any value change, it should be displayed in a few moments (depending on device settings, like the Lifetime resource).","title":"Perform READ"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#see-value-change-in-azure-iot-hub","text":"The value change for the resource is displayed in the Device Twin JSON snippet. Scroll down to the Reported property and find the value line for the 3303/0/5700 resource. \"reported\": { \"lwm2m\": { \"3303\": { \"0\": { \"5601\": {}, \"5602\": {}, \"5603\": {}, \"5604\": {}, \"5700\": { \"value\": 18 }, If you don\u2019t see any changes, click Refresh . If it doesn\u2019t help, you can check whether the READ operation has been performed in Coiote IoT DM as well.","title":"See value change in Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Perform_Read_Write/#next-steps","text":"Air quality monitoring - tutorial","title":"Next steps"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/","text":"Set an Observation # This section describes how to set an Observation in your Azure IoT Hub. Setting an Observation lets your devices know what value changes and for what particular resources they need to notify you about. An Observation can be set for any or all the components of the data model : objects, objects instances, and resources. Whenever there is a change in values, a device will send a Notify message to Coiote IoT DM, which in turn will transfer it to Azure IoT Hub. In this section, you learn how to: Set an Observation on objects and resources Define Observation attributes See value changes for the observed objects and resources Prerequisites # An active Azure IoT Hub with hub owner access permissions. A Coiote IoT DM user account with permissions to use the integration extension. A device group created in Coiote IoT DM. A configured extension between Coiote IoT DM and Azure Iot Hub . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device . Set an Observation and define its attributes # Let\u2019s set two Observations: one on the whole object with ID 1/1 (1 LwM2M Server, 1 Lifetime) and on the resource with ID 3/0/13 (3 Device, 13 Current time). Both of them are Properties. In Azure IoT Hub, value changes for both Telemetry and Property are stored in Device twin , because Observation is a Property in itself and it does not keep track of historical changes in values. To set an Observation, do the following: In your Azure IoT Hub account, go to Devices from the left pane. Click on the device and then go to Device twin . Find the desired property in the JSON snippet. This is where you define what needs to be observed. To set an Observation on object 1/1 (Lifetime) and resource 3/0/13 (Current time) , add the following fragment under the \"desired\": { property: \"lwm2m\": { \"1\": { \"1\": { \"observed\": true, \"attributes\": { \"pmin\": 60 } } }, \"3\": { \"0\": { \"13\": { \"observed\": true, \"attributes\": { \"pmin\": 1 } } } } }, The line with \u201cobserved\u201d: true sets an Observation. The line with \u201cattributes\u201d specifies the conditions under which notifications will be sent: \u201cpmin\u201d: 1 means that notifications will be sent every second. Info pmin - the minimum time in seconds between two notifications. pmax - the maximum time in seconds between two notifications. The notification is sent even if the value didn't change. Read more about other attributes in our Brief description of OMA LwM2M . Click Save . See value changes # In Azure IoT Hub # The value changes for the observed object and resource are displayed in the same JSON snippet where you set an Observation. Scroll down to the Reported property and find the value line. \"13\": { \"value\": 1634653218000, \"attributes\": { \"pmin\": \"1\" }, \"observed\": true } Because we have specified in the Desired properties that the maximum time between two notifications for the Current time (3/0/13) resource is 1 second ( pmax: 1 ), the number next to value will be changing every 1 second. E.g., 163465321 8 000 will become 163465321 9 000. If you don\u2019t see any changes, click Refresh . If it doesn\u2019t help, you can check whether observation has been set in Coiote IoT DM as well. In Coiote IoT DM # This step is optional. If you want to make sure the Observation has been correctly set in Coiote IoT DM, do the following: In Coiote IoT DM, go to Device inventory --> Objects . For the Observation set on the whole object (1/1) , click the vertical Ellipse button next the search field and then click Refresh . If the Observation has been set correctly, the checkboxes will be filled in green. For the Observation set on the specific resource (3/0/13) , find this resource in the list and click the Refresh button to the left from the Value tracking. You will see that checkboxes next to Value tracking and Attributes are now filled in green. Click Value tracking . You will see pmin set to 1, which is the same as you defined in the JSON in Azure IoT Hub. You have successfully set an Observation on LwM2M object and resource. To add another Observation, add the lines in the same JSON snippet, as described in Step 4 . Delete an Observation # To stop observing an object or resource, do the following: In Azure IoT Hub, click on the device and then go to Device twin . In the JSON snippet, change \"observed\" from true to false . In Coiote IoT DM, you can now go to Device inventory --> Objects and see how Value tracking and Attributes boxes are now unchecked. Next steps # Air quality monitoring - tutorial","title":"Set an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#set-an-observation","text":"This section describes how to set an Observation in your Azure IoT Hub. Setting an Observation lets your devices know what value changes and for what particular resources they need to notify you about. An Observation can be set for any or all the components of the data model : objects, objects instances, and resources. Whenever there is a change in values, a device will send a Notify message to Coiote IoT DM, which in turn will transfer it to Azure IoT Hub. In this section, you learn how to: Set an Observation on objects and resources Define Observation attributes See value changes for the observed objects and resources","title":"Set an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#prerequisites","text":"An active Azure IoT Hub with hub owner access permissions. A Coiote IoT DM user account with permissions to use the integration extension. A device group created in Coiote IoT DM. A configured extension between Coiote IoT DM and Azure Iot Hub . A configured integration template in Coiote IoT DM, assigned to the device group . A connected device .","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#set-an-observation-and-define-its-attributes","text":"Let\u2019s set two Observations: one on the whole object with ID 1/1 (1 LwM2M Server, 1 Lifetime) and on the resource with ID 3/0/13 (3 Device, 13 Current time). Both of them are Properties. In Azure IoT Hub, value changes for both Telemetry and Property are stored in Device twin , because Observation is a Property in itself and it does not keep track of historical changes in values. To set an Observation, do the following: In your Azure IoT Hub account, go to Devices from the left pane. Click on the device and then go to Device twin . Find the desired property in the JSON snippet. This is where you define what needs to be observed. To set an Observation on object 1/1 (Lifetime) and resource 3/0/13 (Current time) , add the following fragment under the \"desired\": { property: \"lwm2m\": { \"1\": { \"1\": { \"observed\": true, \"attributes\": { \"pmin\": 60 } } }, \"3\": { \"0\": { \"13\": { \"observed\": true, \"attributes\": { \"pmin\": 1 } } } } }, The line with \u201cobserved\u201d: true sets an Observation. The line with \u201cattributes\u201d specifies the conditions under which notifications will be sent: \u201cpmin\u201d: 1 means that notifications will be sent every second. Info pmin - the minimum time in seconds between two notifications. pmax - the maximum time in seconds between two notifications. The notification is sent even if the value didn't change. Read more about other attributes in our Brief description of OMA LwM2M . Click Save .","title":"Set an Observation and define its attributes"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#see-value-changes","text":"","title":"See value changes"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#in-azure-iot-hub","text":"The value changes for the observed object and resource are displayed in the same JSON snippet where you set an Observation. Scroll down to the Reported property and find the value line. \"13\": { \"value\": 1634653218000, \"attributes\": { \"pmin\": \"1\" }, \"observed\": true } Because we have specified in the Desired properties that the maximum time between two notifications for the Current time (3/0/13) resource is 1 second ( pmax: 1 ), the number next to value will be changing every 1 second. E.g., 163465321 8 000 will become 163465321 9 000. If you don\u2019t see any changes, click Refresh . If it doesn\u2019t help, you can check whether observation has been set in Coiote IoT DM as well.","title":"In Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#in-coiote-iot-dm","text":"This step is optional. If you want to make sure the Observation has been correctly set in Coiote IoT DM, do the following: In Coiote IoT DM, go to Device inventory --> Objects . For the Observation set on the whole object (1/1) , click the vertical Ellipse button next the search field and then click Refresh . If the Observation has been set correctly, the checkboxes will be filled in green. For the Observation set on the specific resource (3/0/13) , find this resource in the list and click the Refresh button to the left from the Value tracking. You will see that checkboxes next to Value tracking and Attributes are now filled in green. Click Value tracking . You will see pmin set to 1, which is the same as you defined in the JSON in Azure IoT Hub. You have successfully set an Observation on LwM2M object and resource. To add another Observation, add the lines in the same JSON snippet, as described in Step 4 .","title":"In Coiote IoT DM"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#delete-an-observation","text":"To stop observing an object or resource, do the following: In Azure IoT Hub, click on the device and then go to Device twin . In the JSON snippet, change \"observed\" from true to false . In Coiote IoT DM, you can now go to Device inventory --> Objects and see how Value tracking and Attributes boxes are now unchecked.","title":"Delete an Observation"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Set_an_Observation/#next-steps","text":"Air quality monitoring - tutorial","title":"Next steps"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Overview/","text":"Overview # How synchronization works # Coiote IoT DM provides zero-touch provisioning for devices synchronized with Azure IoT Hub. This means any devices imported using a CSV file are automatically created within Coiote IoT DM and Azure IoT Hub and from this time on are synchronized periodically. Therefore, after any successful synchronization, you can be sure that any devices that have been imported via Coiote IoT DM will be presented in their actual state within Azure IoT Hub.","title":"Overview"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Overview/#overview","text":"","title":"Overview"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Overview/#how-synchronization-works","text":"Coiote IoT DM provides zero-touch provisioning for devices synchronized with Azure IoT Hub. This means any devices imported using a CSV file are automatically created within Coiote IoT DM and Azure IoT Hub and from this time on are synchronized periodically. Therefore, after any successful synchronization, you can be sure that any devices that have been imported via Coiote IoT DM will be presented in their actual state within Azure IoT Hub.","title":"How synchronization works"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/","text":"Synchronize devices with Azure IoT Hub # Importing devices to Coiote IoT DM and synchronizing them with Azure IoT Hub is a quick way to start using your Coiote IoT DM - Azure IoT Hub integration. The import operation will do two basic operations automatically: Create device entities in Coiote IoT DM with the credentials that you specified, Create the devices' \"counterparts\" within Azure IoT Hub and synchronize them with Coiote IoT DM. Prerequisites # A connected Azure IoT Hub integration in the Hyperscaler Integration Center. Option 1: Syncronize devices one by one # In Coiote IoT DM, go to the Device inventory and search for the device you want to connect to Azure. Click on the three dots and select the option Connect to Azure . Select the minimal or the rich LwM2M schema (unless you created a custom LwM2M template). Option 2: Import devices from CSV using a default integration template # In the import process, you will need a list of devices that you want to import along with an integration template to be used by the Azure IoT Hub. To learn more about Azure integration templates, see the Configure integration templates section. In Coiote IoT DM, go to Administration -> Hyperscaler Integration Center . Make sure you have an integration connected in the Integration tab. Go to the Device list tab and click Import devices . In the Import devices wizard: From the Select template field, select one of two default integration templates: Default minimal LwM2M schema - a pre-defined template implementing a basic device data model. Default rich LwM2M schema - a pre-defined template implementing an extended device data model. Note Integration templates are crucial in the device import process. Optionally, you can create your custom device template and use it in importing. Check the instructions in the Configure integration templates section. In the Import devices from a CSV file section: If you already have a CSV file with devices for import, click Browse and select the file. If you don't have a CSV with devices for import yet, click the device template link to download an empty template that you can fill in with your data: DeviceId - provide your device ID. For LwM2M-enabled devices, device ID usually equals the endpoint name. IMSI - provide a random but unique number for each entry (or provide IMSI number if your device has one). PSK_Identity_Key - provide a unique plain-text PSK identity key used for secure communication between the device and Coiote IoT DM. PSK_Key - provide a unique HEX-encoded PSK key used for secure communication between the device and Coiote IoT DM. Save the template and upload it using the Browse button and dialog window. Click Sync with Azure . After a moment, the import operation should finish successfully. Now you can connect your physical devices to Coiote IoT DM using their credentials and the dedicated URL displayed after the successful device import. What the import operation does # Once the devices from the CSV template are imported into Coiote IoT DM, the following actions are performed: In Coiote IoT DM, device entities are created based on the credentials provided in the template. All such entities are visible in the Device list tab. In Coiote IoT DM, a dedicated integration group is automatically created (with the name built up by the hyperscalercenter prefix and the template ID, e.g. 618238c8bcafcb43b2911262 ). In your Azure IoT hub, devices are created and ready for operation. Check device error logs # Logs may come helpful for diagnosing and troubleshooting issues with the communication between the three actors in the integration: the device, Coiote IoT DM, and Azure IoT Hub. To see logs for your integrated devices: Go to the single device view in Coiote IoT DM, from the left menu, select the Logs tile. Info The logs are only available in the previous version of Coiote IoT DM. Select Go to previous version in the top-right corner. In the Logs panel, expand the view by clicking on More and configure the following: Store from level - select Use custom and set log level to DEBUG for 1 hour. Tags - select HYPERSCALERS The communication logs will be displayed, allowing you to check, diagnose, or debug any issues.","title":"Synchronize devices with Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/#synchronize-devices-with-azure-iot-hub","text":"Importing devices to Coiote IoT DM and synchronizing them with Azure IoT Hub is a quick way to start using your Coiote IoT DM - Azure IoT Hub integration. The import operation will do two basic operations automatically: Create device entities in Coiote IoT DM with the credentials that you specified, Create the devices' \"counterparts\" within Azure IoT Hub and synchronize them with Coiote IoT DM.","title":"Synchronize devices with Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/#prerequisites","text":"A connected Azure IoT Hub integration in the Hyperscaler Integration Center.","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/#option-1-syncronize-devices-one-by-one","text":"In Coiote IoT DM, go to the Device inventory and search for the device you want to connect to Azure. Click on the three dots and select the option Connect to Azure . Select the minimal or the rich LwM2M schema (unless you created a custom LwM2M template).","title":"Option 1: Syncronize devices one by one"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/#option-2-import-devices-from-csv-using-a-default-integration-template","text":"In the import process, you will need a list of devices that you want to import along with an integration template to be used by the Azure IoT Hub. To learn more about Azure integration templates, see the Configure integration templates section. In Coiote IoT DM, go to Administration -> Hyperscaler Integration Center . Make sure you have an integration connected in the Integration tab. Go to the Device list tab and click Import devices . In the Import devices wizard: From the Select template field, select one of two default integration templates: Default minimal LwM2M schema - a pre-defined template implementing a basic device data model. Default rich LwM2M schema - a pre-defined template implementing an extended device data model. Note Integration templates are crucial in the device import process. Optionally, you can create your custom device template and use it in importing. Check the instructions in the Configure integration templates section. In the Import devices from a CSV file section: If you already have a CSV file with devices for import, click Browse and select the file. If you don't have a CSV with devices for import yet, click the device template link to download an empty template that you can fill in with your data: DeviceId - provide your device ID. For LwM2M-enabled devices, device ID usually equals the endpoint name. IMSI - provide a random but unique number for each entry (or provide IMSI number if your device has one). PSK_Identity_Key - provide a unique plain-text PSK identity key used for secure communication between the device and Coiote IoT DM. PSK_Key - provide a unique HEX-encoded PSK key used for secure communication between the device and Coiote IoT DM. Save the template and upload it using the Browse button and dialog window. Click Sync with Azure . After a moment, the import operation should finish successfully. Now you can connect your physical devices to Coiote IoT DM using their credentials and the dedicated URL displayed after the successful device import.","title":"Option 2: Import devices from CSV using a default integration template"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/#what-the-import-operation-does","text":"Once the devices from the CSV template are imported into Coiote IoT DM, the following actions are performed: In Coiote IoT DM, device entities are created based on the credentials provided in the template. All such entities are visible in the Device list tab. In Coiote IoT DM, a dedicated integration group is automatically created (with the name built up by the hyperscalercenter prefix and the template ID, e.g. 618238c8bcafcb43b2911262 ). In your Azure IoT hub, devices are created and ready for operation.","title":"What the import operation does"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Synchronize_devices_with_Azure_IoT_Hub/#check-device-error-logs","text":"Logs may come helpful for diagnosing and troubleshooting issues with the communication between the three actors in the integration: the device, Coiote IoT DM, and Azure IoT Hub. To see logs for your integrated devices: Go to the single device view in Coiote IoT DM, from the left menu, select the Logs tile. Info The logs are only available in the previous version of Coiote IoT DM. Select Go to previous version in the top-right corner. In the Logs panel, expand the view by clicking on More and configure the following: Store from level - select Use custom and set log level to DEBUG for 1 hour. Tags - select HYPERSCALERS The communication logs will be displayed, allowing you to check, diagnose, or debug any issues.","title":"Check device error logs"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/","text":"Upgrade device firmware # If you would like to upgrade the firmware of devices using the Azure IoT Hub, follow the instruction below. Prerequisites # At least one synchronized Coiote IoT DM - Azure IoT Hub device. A firmware file hosted on an HTTP server that is reachable by the Coiote IoT DM server. Note In this stage of integration, no authentication method is supported for this endpoint - it is required that the firmware is publicly available (or hosted in a private network but with access granted for the Coiote IoT DM server). Scheduling a firmware upgrade # Introduction # The process of upgrading device firmware for Azure IoT Hub devices synchronized with Coiote IoT DM is based on two main elements: the Azure Direct Method mechanism and the Coiote IoT DM Firmware Upgrade task. In the process, the Azure scheduleFirmwareUpdate direct method is invoked, enabling the Coiote IoT DM to download the specified firmware file and add it to its resources. Then, an XML task is scheduled in Coiote IoT DM and the upgrade is performed on the device. Info For firmware file recognition in Coiote IoT DM, global identifiers are used. This means that it is recommended to name your firmware files using the format: yourdomainName + randomized value. If the same firmware file name is used again, then Coiote IoT DM will be able to utilize the once downloaded resource without the need to download it again. Step 1: Invoking the Azure scheduleFirmwareUpdate direct method # To initiate the firmware upgrade procedure for your device: Go to your Azure hub account and under Explorers , select IoT devices . From the list, choose the device for which you want to upgrade the firmware. In the device view, select the Direct Method tab. Provide data for the following fields: Method Name - paste the scheduleFirmwareUpdate direct method name here. Payload - use the following payload with firmware upgrade parameters (remember to replace the example values where needed): { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", // optional - default=\"1200s\", any valid duration in format \"<length><unit>\" \"timeout\": \"1200s\", // optional - default=\"COAP\" \"protocolType\": \"COAP\", // optional - default=null <-> keep firmware file forever, any valid duration in format \"<length><unit>\" or null \"retentionPeriod\": \"300s\", // optional - default=\"\" \"description\": \"This is anjay demo firmware\", // optional - default=false \"useQuota\": false, // optional - default=false \"useCachedData\": false, // optional - default=false \"resumeAfterDownlinkFailure\": false, // optional - default=\"pull\", possible values = [\"pull\", \"push\"] \"imageDeliveryMethod\": \"pull\", // optional - default=\"WithoutObservations\", possible values = [\"ObservationTrigger\", \"WithoutObservations\", \"ObservationBased\", \"SendBased\"] \"upgradeStrategy\": \"WithoutObservations\", // optional - default=\"always\", possible values = [\"always\", \"weekends\", \"nights-home\", \"nights-enterprise-weekends\", \"nights-enterprise\", user-defined schedules] \"schedule\": \"always\" } Connection timeout - specify a timeout for the Azure - Coiote IoT DM connection (the recommended value is not less than 5 seconds). Method timeout - specify a timeout for direct method result notification. Once you have provided the required data, click Invoke method . After a short moment, you should be able to see the direct method result in the Result field. The 200 as the \"status\" parameter value means that the firmware upgrade task was completed successfully. Importantly, the result \"payload\" value will be needed for other FOTA actions like status check or cancellation, so be sure to copy it to your clipboard if needed. Tip Out of all the parameters provided in Firmware upgrade direct method payload, only two are mandatory: name - the unique file name used for firmware identification. firmwareUrl - the URL used by Coiote IoT DM to download the firmware file and include it as a resource. Therefore it is correct to include only those two in the payload, as in here: { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", } Step 2: Checking the firmware upgrade result # To check the status of a scheduled firmware upgrade, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the checkFirmwareUpdateStatus direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field: Step 3: Checking Coiote IoT DM FOTA task execution # Once you have executed the Azure-side steps of the procedure, you can check its status from the side of Coiote IoT DM. Go to your Coiote IoT DM account and in the Device Inventory , select your device. In the Device Management Center, enter the LwM2M firmware tab. Check the status of the FOTA task execution for your device: In the Current firmware section, check if the device firmware is updated to the newest version. In the Installation history section, check if the lwm2mFirmwareUpdate task invoked earlier by the Azure scheduleFirmwareUpdate direct method has been completed with success. Cancelling the firmware upgrade procedure # To cancel the firmware upgrade procedure, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the cancelFirmwareUpdate direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field: See also # See the relevant section of LwM2M mappings to learn the details of how Azure IoT Hub Direct Methods are mapped in Coiote IoT DM.","title":"Upgrade device firmware"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#upgrade-device-firmware","text":"If you would like to upgrade the firmware of devices using the Azure IoT Hub, follow the instruction below.","title":"Upgrade device firmware"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#prerequisites","text":"At least one synchronized Coiote IoT DM - Azure IoT Hub device. A firmware file hosted on an HTTP server that is reachable by the Coiote IoT DM server. Note In this stage of integration, no authentication method is supported for this endpoint - it is required that the firmware is publicly available (or hosted in a private network but with access granted for the Coiote IoT DM server).","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#scheduling-a-firmware-upgrade","text":"","title":"Scheduling a firmware upgrade"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#introduction","text":"The process of upgrading device firmware for Azure IoT Hub devices synchronized with Coiote IoT DM is based on two main elements: the Azure Direct Method mechanism and the Coiote IoT DM Firmware Upgrade task. In the process, the Azure scheduleFirmwareUpdate direct method is invoked, enabling the Coiote IoT DM to download the specified firmware file and add it to its resources. Then, an XML task is scheduled in Coiote IoT DM and the upgrade is performed on the device. Info For firmware file recognition in Coiote IoT DM, global identifiers are used. This means that it is recommended to name your firmware files using the format: yourdomainName + randomized value. If the same firmware file name is used again, then Coiote IoT DM will be able to utilize the once downloaded resource without the need to download it again.","title":"Introduction"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#step-1-invoking-the-azure-schedulefirmwareupdate-direct-method","text":"To initiate the firmware upgrade procedure for your device: Go to your Azure hub account and under Explorers , select IoT devices . From the list, choose the device for which you want to upgrade the firmware. In the device view, select the Direct Method tab. Provide data for the following fields: Method Name - paste the scheduleFirmwareUpdate direct method name here. Payload - use the following payload with firmware upgrade parameters (remember to replace the example values where needed): { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", // optional - default=\"1200s\", any valid duration in format \"<length><unit>\" \"timeout\": \"1200s\", // optional - default=\"COAP\" \"protocolType\": \"COAP\", // optional - default=null <-> keep firmware file forever, any valid duration in format \"<length><unit>\" or null \"retentionPeriod\": \"300s\", // optional - default=\"\" \"description\": \"This is anjay demo firmware\", // optional - default=false \"useQuota\": false, // optional - default=false \"useCachedData\": false, // optional - default=false \"resumeAfterDownlinkFailure\": false, // optional - default=\"pull\", possible values = [\"pull\", \"push\"] \"imageDeliveryMethod\": \"pull\", // optional - default=\"WithoutObservations\", possible values = [\"ObservationTrigger\", \"WithoutObservations\", \"ObservationBased\", \"SendBased\"] \"upgradeStrategy\": \"WithoutObservations\", // optional - default=\"always\", possible values = [\"always\", \"weekends\", \"nights-home\", \"nights-enterprise-weekends\", \"nights-enterprise\", user-defined schedules] \"schedule\": \"always\" } Connection timeout - specify a timeout for the Azure - Coiote IoT DM connection (the recommended value is not less than 5 seconds). Method timeout - specify a timeout for direct method result notification. Once you have provided the required data, click Invoke method . After a short moment, you should be able to see the direct method result in the Result field. The 200 as the \"status\" parameter value means that the firmware upgrade task was completed successfully. Importantly, the result \"payload\" value will be needed for other FOTA actions like status check or cancellation, so be sure to copy it to your clipboard if needed. Tip Out of all the parameters provided in Firmware upgrade direct method payload, only two are mandatory: name - the unique file name used for firmware identification. firmwareUrl - the URL used by Coiote IoT DM to download the firmware file and include it as a resource. Therefore it is correct to include only those two in the payload, as in here: { \"name\": \"anjay-firmware\", \"firmwareUrl\": \"https://example.repository.com/artifactory/gitlfs/demo.fw-pkg\", }","title":"Step 1: Invoking the Azure scheduleFirmwareUpdate direct method"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#step-2-checking-the-firmware-upgrade-result","text":"To check the status of a scheduled firmware upgrade, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the checkFirmwareUpdateStatus direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field:","title":"Step 2: Checking the firmware upgrade result"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#step-3-checking-coiote-iot-dm-fota-task-execution","text":"Once you have executed the Azure-side steps of the procedure, you can check its status from the side of Coiote IoT DM. Go to your Coiote IoT DM account and in the Device Inventory , select your device. In the Device Management Center, enter the LwM2M firmware tab. Check the status of the FOTA task execution for your device: In the Current firmware section, check if the device firmware is updated to the newest version. In the Installation history section, check if the lwm2mFirmwareUpdate task invoked earlier by the Azure scheduleFirmwareUpdate direct method has been completed with success.","title":"Step 3: Checking Coiote IoT DM FOTA task execution"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#cancelling-the-firmware-upgrade-procedure","text":"To cancel the firmware upgrade procedure, follow these steps: In the Direct Method tab of your device, provide data for the following fields: Method Name - paste the cancelFirmwareUpdate direct method name here. Payload - use the payload displayed in the Firmware upgrade result field (remember to replace the placeholder value with your copied value): { \"fotaId\": \"fotaIdReturnedByScheduleOperation\" } Click Invoke method . Check the direct method status in the Result field:","title":"Cancelling the firmware upgrade procedure"},{"location":"Cloud_integrations/Azure_IoT/Azure_IoT_Hub/Device_operations/Upgrading_firmware/#see-also","text":"See the relevant section of LwM2M mappings to learn the details of how Azure IoT Hub Direct Methods are mapped in Coiote IoT DM.","title":"See also"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/","text":"LwM2M mappings - Azure IoT Central # In this section you'll get to know how the mappings are arranged between the LwM2M protocol as used in Coiote IoT DM and the data retrieval and processing mechanisms of Azure IoT Central. These processing mechanisms of Azure IoT Central have the same names as data formats in Coiote IoT DM: Properties, Command, and Telemetry. Properties describe the actual value, Command executes commands, and Telemetry observes changes in values over time. Introduction # The LwM2M protocol data model is organized as a three-level tree that has the following structure: object (e.g. a 'temperature sensor') object instance (e.g. 'temperature sensor #1', 'temperature sensor #2' etc.) resource (e.g. 'current temperature value') In terms of operations that can be performed on an LwM2M Client, an LwM2M Server can READ all of the data model entities, and, depending on their characteristics, may also WRITE to some of them, and execute some of them (COMMAND). Additionally, an LwM2M Server can also OBSERVE selected resources. Info If you would like to dive deeper into the details of the Lightweight M2M protocol, please refer to our brief introduction to LwM2M . This division into readable, writable, executable and observable data model entities is the basis for the mapping of LwM2M resources (as interpreted by Coiote IoT DM) into the Azure IoT Central data processing mechanisms. LwM2M readable and writable resources # Within the Coiote IoT DM - Azure IoT Central integration , readable and writable resources are interpreted as Properties. The data structure is represented in one line where objects, object instances, and resources are separated by n . For example: n1n0n3 , where 1 is object, 0 is object instance, and 3 is resource. In Azure IoT Central, Properties as well as other device capabilities (Telemetry and Command, read more on them below) are defined in a model which is part of the device template . The device template defines the characteristics of the device that is connected to your IoT Central application. READ - Communication flow # Data model resources that are read-only, such as Manufacturer (with ID 3/0/0 ) will be mapped to Azure IoT Central as a reported property. WRITE - Communication flow # On the other hand, a writable resource, such as Lifetime (with ID 1/0/1 ), apart from being represented as a reported property, can be additionally mapped as a desired property. This enables you to synchronize the device data model and configuration between Azure and Coiote IoT DM. In Azure IoT Central, changing the value of a writable resource is done by running a job . LwM2M executable resources # As a rule, LwM2M resources that can be executable translate into Commands in Azure IoT Central. This means that by invoking Command from Azure, you can trigger a COMMAND operation on a chosen resource available for your device and the request will be transferred immediately by the LwM2M Server to the device. Note To learn about Commands, read the respective subsection in the Message payloads section. To do so, select a device from the Devices page in Azure IoT Central and click the Commands tab. Click Run to run a necessary command. COMMAND - Communication flow # Invoking Command from Azure IoT Central and handling it by Coiote IoT DM in the form of a COMMAND operation passed to the device has the following flow: LwM2M observable resources # In Coiote IoT DM, some of the resources within the device data model can be observed for changes in value. These are generally resources related to telemetry data or other measurements. Their value changes can be monitored by Coiote IoT DM and reported to Azure IoT Central with help of Telemetry device capability. Note To learn more about Telemetry, go to the respective subsection of the Azure IoT Central documentation. Observe - Communication flow # Setting an Observe operation on a resource in Coiote IoT DM, for instance a temperature reading, will result in a Notify message sent by the device upon value change. Then Coiote IoT DM transfers this message to Azure IoT Central using Telemetry. To set an Observe operation in Azure IoT Central, you need to add a Job in the IoT Central application. As you can see in the Devices > Raw data tab, an Observation is represented in the following format: \u201cn1n1n1_attributes\u201d: \u201c(\\\u201dobserved\\\u201d:true,\\\u201dpmin\\\u201d:20}\u201d Next steps Configure integration templates","title":"LwM2M mappings - Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#lwm2m-mappings-azure-iot-central","text":"In this section you'll get to know how the mappings are arranged between the LwM2M protocol as used in Coiote IoT DM and the data retrieval and processing mechanisms of Azure IoT Central. These processing mechanisms of Azure IoT Central have the same names as data formats in Coiote IoT DM: Properties, Command, and Telemetry. Properties describe the actual value, Command executes commands, and Telemetry observes changes in values over time.","title":"LwM2M mappings - Azure IoT Central"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#introduction","text":"The LwM2M protocol data model is organized as a three-level tree that has the following structure: object (e.g. a 'temperature sensor') object instance (e.g. 'temperature sensor #1', 'temperature sensor #2' etc.) resource (e.g. 'current temperature value') In terms of operations that can be performed on an LwM2M Client, an LwM2M Server can READ all of the data model entities, and, depending on their characteristics, may also WRITE to some of them, and execute some of them (COMMAND). Additionally, an LwM2M Server can also OBSERVE selected resources. Info If you would like to dive deeper into the details of the Lightweight M2M protocol, please refer to our brief introduction to LwM2M . This division into readable, writable, executable and observable data model entities is the basis for the mapping of LwM2M resources (as interpreted by Coiote IoT DM) into the Azure IoT Central data processing mechanisms.","title":"Introduction"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#lwm2m-readable-and-writable-resources","text":"Within the Coiote IoT DM - Azure IoT Central integration , readable and writable resources are interpreted as Properties. The data structure is represented in one line where objects, object instances, and resources are separated by n . For example: n1n0n3 , where 1 is object, 0 is object instance, and 3 is resource. In Azure IoT Central, Properties as well as other device capabilities (Telemetry and Command, read more on them below) are defined in a model which is part of the device template . The device template defines the characteristics of the device that is connected to your IoT Central application.","title":"LwM2M readable and writable resources"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#read-communication-flow","text":"Data model resources that are read-only, such as Manufacturer (with ID 3/0/0 ) will be mapped to Azure IoT Central as a reported property.","title":"READ - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#write-communication-flow","text":"On the other hand, a writable resource, such as Lifetime (with ID 1/0/1 ), apart from being represented as a reported property, can be additionally mapped as a desired property. This enables you to synchronize the device data model and configuration between Azure and Coiote IoT DM. In Azure IoT Central, changing the value of a writable resource is done by running a job .","title":"WRITE - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#lwm2m-executable-resources","text":"As a rule, LwM2M resources that can be executable translate into Commands in Azure IoT Central. This means that by invoking Command from Azure, you can trigger a COMMAND operation on a chosen resource available for your device and the request will be transferred immediately by the LwM2M Server to the device. Note To learn about Commands, read the respective subsection in the Message payloads section. To do so, select a device from the Devices page in Azure IoT Central and click the Commands tab. Click Run to run a necessary command.","title":"LwM2M executable resources"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#command-communication-flow","text":"Invoking Command from Azure IoT Central and handling it by Coiote IoT DM in the form of a COMMAND operation passed to the device has the following flow:","title":"COMMAND - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#lwm2m-observable-resources","text":"In Coiote IoT DM, some of the resources within the device data model can be observed for changes in value. These are generally resources related to telemetry data or other measurements. Their value changes can be monitored by Coiote IoT DM and reported to Azure IoT Central with help of Telemetry device capability. Note To learn more about Telemetry, go to the respective subsection of the Azure IoT Central documentation.","title":"LwM2M observable resources"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Central/#observe-communication-flow","text":"Setting an Observe operation on a resource in Coiote IoT DM, for instance a temperature reading, will result in a Notify message sent by the device upon value change. Then Coiote IoT DM transfers this message to Azure IoT Central using Telemetry. To set an Observe operation in Azure IoT Central, you need to add a Job in the IoT Central application. As you can see in the Devices > Raw data tab, an Observation is represented in the following format: \u201cn1n1n1_attributes\u201d: \u201c(\\\u201dobserved\\\u201d:true,\\\u201dpmin\\\u201d:20}\u201d Next steps Configure integration templates","title":"Observe - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/","text":"LwM2M mappings - Azure IoT Hub # In this section you'll get to know how the mappings are arranged between the LwM2M protocol as used in Coiote IoT DM and the data retrieval and processing mechanisms of the Azure IoT Hub. Introduction # The LwM2M protocol data model is organized as a three-level tree that has the following structure: object (e.g. a 'temperature sensor') object instance (e.g. 'temperature sensor #1', 'temperature sensor #2' etc.) resource (e.g. 'current temperature value') In terms of operations that can be performed on an LwM2M Client, an LwM2M Server can READ all of the data model entities, and, depending on their characteristics, may also WRITE to some of them, and EXECUTE some of them. Additionally, an LwM2M Server can also OBSERVE selected resources. Info If you would like to dive deeper into the details of the Lightweight M2M protocol, please refer to our brief introduction to LwM2M . This division into readable, writable, executable and observable data model entities is the basis for the mapping of LwM2M resources (as interpreted by Coiote IoT DM) into Azure IoT Hub data processing mechanisms. LwM2M readable and writable resources # Within the Coiote IoT DM - Azure IoT Hub integration, readable and writable resources are usually interpreted as part of Azure Device twin data structure. Note To learn more about Device twins, go to the Understand and use Device twins section of the Azure IoT Hub documentation. For instance, the sample JSON snippet below is a tree with nested resources to represent a fragment of the LwM2M data model with path /3/1/1 : { \"deviceId\": \"airquality-0\", ... \"properties\": { \"reported\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 90 }, \"4\": {}, \"6\": {}, \"7\": {}, \"8\": {} } }, \"3\": { \"1\": { \"1\": { \"value\": \"airquality-0-Valparaiso\" } } }, ... READ - Communication flow # Data model resources that are read-only, such as Manufacturer (with ID 3/0/0 ) will be mapped into the Device twin as a reported property in Azure IoT Hub. WRITE - Communication flow # On the other hand, a writable resource, such as Lifetime (with ID 1/0/1 ), apart from being represented as a reported property, can be additionally mapped as a desired property. This enables you to synchronize the device data model and configuration between Azure and Coiote IoT DM. In Azure IoT Hub , changing the value of a writable resource involves creating a properly formatted JSON snippet in the desired property field within the Device twin that introduces a value change: ... \"properties\": { \"desired\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 30 } } } }, ... After JSON is saved, Azure notifies Coiote IoT DM of the desired change which is then transferred to the device in form of a WRITE command. Once the value is changed on the device, Coiote IoT DM reports back to Azure that the value of the corresponding reported property should be updated in the Device twin JSON structure. LwM2M executable resources # As a rule, LwM2M resources that can be executable translate into Direct methods in Azure IoT Hub. This means that by invoking a direct method or Command from Azure, you can trigger an EXECUTE operation on a chosen resource available for your device and the request will be transferred immediately by the LwM2M Server to the device. Note To learn more about Direct methods, go to the Understand Direct methods section of the Azure IoT Hub documentation. In Azure IoT Hub , an executable LwM2M resource ID is mapped to a direct method in the following way: method name: execute { path: \"object.objectInstance.resource\", [args: \"optional arguments to execute\"] } Thus, for instance, to execute a factory reset on a device, you need to invoke a direct method with the execute name and the following payload: { \"path\": \"3.0.5\" } EXECUTE - Communication flow # Invoking a direct method from Azure IoT Hub and handling it by Coiote IoT DM in the form of an EXECUTE operation passed to the device has the following flow: LwM2M observable resources # In Coiote IoT DM, some of the resources within the device data model can be observed for changes in value. These are generally resources related to telemetry data or other measurements. Their value changes can be monitored by Coiote IoT DM and reported to the Azure IoT Hub Device-to-cloud mechanism. Note To learn more about the Azure Device-to-cloud, go to sending device-to-cloud messages section of the Azure IoT Hub documentation. Observe - Communication flow # Setting an Observe operation on a resource in Coiote IoT DM, for instance a temperature reading, will result in a Notify message sent by the device upon value change that Coiote IoT DM will transfer to the Device-to-cloud mechanism of Azure IoT Hub . What is more, you can set observations on LwM2M resources from the Azure IoT Hub level by adding appropriate attributes to the resource as a Device twin desired property. For instance, an Observe operation on resource ID 3303/1/5700 is set in the following way: ... \"properties\": { \"desired\": { \"lwm2m\": { \"3303\": { \"1\": { \"5700\": { \"observed\": true, \"attributes\": { \"pmin\": 60 } } } } } ... After JSON is saved, Azure notifies Coiote IoT DM of the desired attribute setting which is then transferred to the device in form of an Observe operation. Once Coiote IoT DM is notified of a value change, it is reported to the Azure Device-to-cloud mechanism. Next steps Configure integration templates","title":"LwM2M mappings - Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#lwm2m-mappings-azure-iot-hub","text":"In this section you'll get to know how the mappings are arranged between the LwM2M protocol as used in Coiote IoT DM and the data retrieval and processing mechanisms of the Azure IoT Hub.","title":"LwM2M mappings - Azure IoT Hub"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#introduction","text":"The LwM2M protocol data model is organized as a three-level tree that has the following structure: object (e.g. a 'temperature sensor') object instance (e.g. 'temperature sensor #1', 'temperature sensor #2' etc.) resource (e.g. 'current temperature value') In terms of operations that can be performed on an LwM2M Client, an LwM2M Server can READ all of the data model entities, and, depending on their characteristics, may also WRITE to some of them, and EXECUTE some of them. Additionally, an LwM2M Server can also OBSERVE selected resources. Info If you would like to dive deeper into the details of the Lightweight M2M protocol, please refer to our brief introduction to LwM2M . This division into readable, writable, executable and observable data model entities is the basis for the mapping of LwM2M resources (as interpreted by Coiote IoT DM) into Azure IoT Hub data processing mechanisms.","title":"Introduction"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#lwm2m-readable-and-writable-resources","text":"Within the Coiote IoT DM - Azure IoT Hub integration, readable and writable resources are usually interpreted as part of Azure Device twin data structure. Note To learn more about Device twins, go to the Understand and use Device twins section of the Azure IoT Hub documentation. For instance, the sample JSON snippet below is a tree with nested resources to represent a fragment of the LwM2M data model with path /3/1/1 : { \"deviceId\": \"airquality-0\", ... \"properties\": { \"reported\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 90 }, \"4\": {}, \"6\": {}, \"7\": {}, \"8\": {} } }, \"3\": { \"1\": { \"1\": { \"value\": \"airquality-0-Valparaiso\" } } }, ...","title":"LwM2M readable and writable resources"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#read-communication-flow","text":"Data model resources that are read-only, such as Manufacturer (with ID 3/0/0 ) will be mapped into the Device twin as a reported property in Azure IoT Hub.","title":"READ - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#write-communication-flow","text":"On the other hand, a writable resource, such as Lifetime (with ID 1/0/1 ), apart from being represented as a reported property, can be additionally mapped as a desired property. This enables you to synchronize the device data model and configuration between Azure and Coiote IoT DM. In Azure IoT Hub , changing the value of a writable resource involves creating a properly formatted JSON snippet in the desired property field within the Device twin that introduces a value change: ... \"properties\": { \"desired\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 30 } } } }, ... After JSON is saved, Azure notifies Coiote IoT DM of the desired change which is then transferred to the device in form of a WRITE command. Once the value is changed on the device, Coiote IoT DM reports back to Azure that the value of the corresponding reported property should be updated in the Device twin JSON structure.","title":"WRITE - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#lwm2m-executable-resources","text":"As a rule, LwM2M resources that can be executable translate into Direct methods in Azure IoT Hub. This means that by invoking a direct method or Command from Azure, you can trigger an EXECUTE operation on a chosen resource available for your device and the request will be transferred immediately by the LwM2M Server to the device. Note To learn more about Direct methods, go to the Understand Direct methods section of the Azure IoT Hub documentation. In Azure IoT Hub , an executable LwM2M resource ID is mapped to a direct method in the following way: method name: execute { path: \"object.objectInstance.resource\", [args: \"optional arguments to execute\"] } Thus, for instance, to execute a factory reset on a device, you need to invoke a direct method with the execute name and the following payload: { \"path\": \"3.0.5\" }","title":"LwM2M executable resources"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#execute-communication-flow","text":"Invoking a direct method from Azure IoT Hub and handling it by Coiote IoT DM in the form of an EXECUTE operation passed to the device has the following flow:","title":"EXECUTE - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#lwm2m-observable-resources","text":"In Coiote IoT DM, some of the resources within the device data model can be observed for changes in value. These are generally resources related to telemetry data or other measurements. Their value changes can be monitored by Coiote IoT DM and reported to the Azure IoT Hub Device-to-cloud mechanism. Note To learn more about the Azure Device-to-cloud, go to sending device-to-cloud messages section of the Azure IoT Hub documentation.","title":"LwM2M observable resources"},{"location":"Cloud_integrations/Azure_IoT/Concepts/LwM2M_mappings_Hub/#observe-communication-flow","text":"Setting an Observe operation on a resource in Coiote IoT DM, for instance a temperature reading, will result in a Notify message sent by the device upon value change that Coiote IoT DM will transfer to the Device-to-cloud mechanism of Azure IoT Hub . What is more, you can set observations on LwM2M resources from the Azure IoT Hub level by adding appropriate attributes to the resource as a Device twin desired property. For instance, an Observe operation on resource ID 3303/1/5700 is set in the following way: ... \"properties\": { \"desired\": { \"lwm2m\": { \"3303\": { \"1\": { \"5700\": { \"observed\": true, \"attributes\": { \"pmin\": 60 } } } } } ... After JSON is saved, Azure notifies Coiote IoT DM of the desired attribute setting which is then transferred to the device in form of an Observe operation. Once Coiote IoT DM is notified of a value change, it is reported to the Azure Device-to-cloud mechanism. Next steps Configure integration templates","title":"Observe - Communication flow"},{"location":"Cloud_integrations/Azure_IoT/Configure_integration_templates/Azure_integration_templates/","text":"Configure integration templates # Integration templates define the format in which the data is exchanged between devices and Azure. The data can be either a property or a telemetry. Property describes the actual value. For example: at 1:00 PM a thermometer shows 5\u00b0C, and only this value is sent. Telemetry is used to observe changes in values. For example: it was 5\u00b0C at 1:00 PM, and one hour later it\u2019s 6\u00b0C. In other words, you need to decide whether you want to send and receive historical data or not. If you select the Property option, then Coiote IoT DM reports data to Azure using Device Twins. For the Telemetry data it uses Azure IoT Hub Device-to-cloud mechanism. Read more about these key concepts in the LwM2M mappings section. Follow the instruction below to create integration templates and learn how they work. Prerequisites # An active Azure IoT Central, IoT Hub, or DPS with hub owner access permissions. A Coiote IoT DM user account with permissions to use Hyperscaler Integration Center. Create a new template # In your Coiote IoT DM user account, go to Hyperscaler Integration Center and select the Templates tab. Click Add new in the top-right corner. In the Create new template wizard that appears, provide the Basic data: Template name Azure IoT Central template model ID . This step is optional. If it's enabled, copy and paste the model ID of a device template from the Azure public model repository . This model ID will be used as DPS payload while the device is connected to Azure IoT Central. In this case, Coiote IoT DM won\u2019t generate the template for Azure IoT Central. Note that the assigned model ID can\u2019t be changed. Click Next step . The Data model scheme page displays the list of all LwM2M objects that are available to you. Info If you don't specify the Azure IoT Central template model ID , the Data model scheme by default will contain only two objects: LwM2M Server and Device that are necessary to connect a device to a LwM2M server. You can use this default template to test your integration or for some basic operations. If you have a more complex case (for example, your device contains other LwM2M objects), then you need to add missing objects. To choose the objects and resources that you want to report to Azure, expand the lists and check the respective boxes. To add more objects or resources, click Add missing objects . Select the type of data that needs to be reported (Capability type): Telemetry, Property, or Command. Example Manufacturer is unlikely to change over time, so it is a Property . Reboot is an executable Command . Battery Level is more ambiguous: it can be a property if we just want to have the actual value. But because we want to have its historical values, it is a Telemetry . Click Next step . Check the Summary and click Save template . How integration templates work # As you now know, the Azure integration template is based on a data model which consists of the objects and resources. Coiote IoT DM sends data to Azure every time a device data model is changed, provided that you have set an Observation on the objects and resources in this data model. (Read about setting an Observation in Azure IoT Hub and Azure IoT Central .) Let\u2019s illustrate the process with two examples. In the first case, the change in the data model is triggered by the device. Battery level is defined as a property. When the value of the Battery level resource changes, the device sends Send or Notify messages via LwM2M. The device information in Coiote IoT DM is then updated and translated to Device Twin JSON, which in turn is sent to Azure. Info When Battery level is defined as a telemetry, then Device-to-cloud messages are used. In the second example, the change in the data model is triggered by Coiote IoT DM. When you set an Observation on the Battery level , this information is sent to Azure in the Device Twin JSON. To check whether the values of the Battery level resource on the device and Coiote IoT DM are the same, Coiote IoT DM performs a READ operation on this resource. If the value is different, a WRITE operation is performed to change the value in Coiote IoT DM. Then the Device Twin JSON is updated and sent to Azure. Next steps # Air quality monitoring - tutorial","title":"Configure integration templates"},{"location":"Cloud_integrations/Azure_IoT/Configure_integration_templates/Azure_integration_templates/#configure-integration-templates","text":"Integration templates define the format in which the data is exchanged between devices and Azure. The data can be either a property or a telemetry. Property describes the actual value. For example: at 1:00 PM a thermometer shows 5\u00b0C, and only this value is sent. Telemetry is used to observe changes in values. For example: it was 5\u00b0C at 1:00 PM, and one hour later it\u2019s 6\u00b0C. In other words, you need to decide whether you want to send and receive historical data or not. If you select the Property option, then Coiote IoT DM reports data to Azure using Device Twins. For the Telemetry data it uses Azure IoT Hub Device-to-cloud mechanism. Read more about these key concepts in the LwM2M mappings section. Follow the instruction below to create integration templates and learn how they work.","title":"Configure integration templates"},{"location":"Cloud_integrations/Azure_IoT/Configure_integration_templates/Azure_integration_templates/#prerequisites","text":"An active Azure IoT Central, IoT Hub, or DPS with hub owner access permissions. A Coiote IoT DM user account with permissions to use Hyperscaler Integration Center.","title":"Prerequisites"},{"location":"Cloud_integrations/Azure_IoT/Configure_integration_templates/Azure_integration_templates/#create-a-new-template","text":"In your Coiote IoT DM user account, go to Hyperscaler Integration Center and select the Templates tab. Click Add new in the top-right corner. In the Create new template wizard that appears, provide the Basic data: Template name Azure IoT Central template model ID . This step is optional. If it's enabled, copy and paste the model ID of a device template from the Azure public model repository . This model ID will be used as DPS payload while the device is connected to Azure IoT Central. In this case, Coiote IoT DM won\u2019t generate the template for Azure IoT Central. Note that the assigned model ID can\u2019t be changed. Click Next step . The Data model scheme page displays the list of all LwM2M objects that are available to you. Info If you don't specify the Azure IoT Central template model ID , the Data model scheme by default will contain only two objects: LwM2M Server and Device that are necessary to connect a device to a LwM2M server. You can use this default template to test your integration or for some basic operations. If you have a more complex case (for example, your device contains other LwM2M objects), then you need to add missing objects. To choose the objects and resources that you want to report to Azure, expand the lists and check the respective boxes. To add more objects or resources, click Add missing objects . Select the type of data that needs to be reported (Capability type): Telemetry, Property, or Command. Example Manufacturer is unlikely to change over time, so it is a Property . Reboot is an executable Command . Battery Level is more ambiguous: it can be a property if we just want to have the actual value. But because we want to have its historical values, it is a Telemetry . Click Next step . Check the Summary and click Save template .","title":"Create a new template"},{"location":"Cloud_integrations/Azure_IoT/Configure_integration_templates/Azure_integration_templates/#how-integration-templates-work","text":"As you now know, the Azure integration template is based on a data model which consists of the objects and resources. Coiote IoT DM sends data to Azure every time a device data model is changed, provided that you have set an Observation on the objects and resources in this data model. (Read about setting an Observation in Azure IoT Hub and Azure IoT Central .) Let\u2019s illustrate the process with two examples. In the first case, the change in the data model is triggered by the device. Battery level is defined as a property. When the value of the Battery level resource changes, the device sends Send or Notify messages via LwM2M. The device information in Coiote IoT DM is then updated and translated to Device Twin JSON, which in turn is sent to Azure. Info When Battery level is defined as a telemetry, then Device-to-cloud messages are used. In the second example, the change in the data model is triggered by Coiote IoT DM. When you set an Observation on the Battery level , this information is sent to Azure in the Device Twin JSON. To check whether the values of the Battery level resource on the device and Coiote IoT DM are the same, Coiote IoT DM performs a READ operation on this resource. If the value is different, a WRITE operation is performed to change the value in Coiote IoT DM. Then the Device Twin JSON is updated and sent to Azure.","title":"How integration templates work"},{"location":"Cloud_integrations/Azure_IoT/Configure_integration_templates/Azure_integration_templates/#next-steps","text":"Air quality monitoring - tutorial","title":"Next steps"},{"location":"Cloud_integrations/nRF_Cloud_Location_services/Configure_nRF_Cloud_integration/","text":"Connect nRF Cloud integration # Connect your nRF Cloud devices to Coiote IoT DM to track their location and save battery life. Read more about Nordic Semiconductor Location services . Prerequisites # An nRF Cloud account. If you don't have it, create one here . A Coiote IoT DM user account. If you don't have one, register here . To enable communication and data flow between the Nordic Semiconductor nRF Cloud and Coiote IoT DM platforms, you first need to integrate them using the nRF Cloud integration in Coiote IoT DM. Follow the instructions below to learn how to do it. Get the Service Evaluation Token from nRF Cloud # In your nRF Cloud user account, from the expandable top-right menu, select Team . In the Service Evaluation Token field, click Generate Token and click on the icon to copy it. Integrate nRF Cloud with Coiote IoT DM # In your Coiote IoT DM user account, go to Administration --> Integrations --> Location services . In the nRF Cloud tile, click Connect . In the dialog window, paste the previously copied nRFC Service Evaluation Token. click Save to keep the setting. Now the integration between Coiote IoT DM and nRF Cloud is established. Read the next section on how to display device location in Coiote IoT DM. View device location in Coiote IoT DM # Caution To display your device location, you first need to set up the Google Maps property for your domain. Go to Coiote IoT DM User Guide to learn how to do it. In your Coiote IoT DM user account, go to Device Inventory . Click the Management link next to your device to enter the Device Center . If not selected, click the Overview tab and scroll down to the Device location section.","title":"Connect nRF Cloud integration"},{"location":"Cloud_integrations/nRF_Cloud_Location_services/Configure_nRF_Cloud_integration/#connect-nrf-cloud-integration","text":"Connect your nRF Cloud devices to Coiote IoT DM to track their location and save battery life. Read more about Nordic Semiconductor Location services .","title":"Connect nRF Cloud integration"},{"location":"Cloud_integrations/nRF_Cloud_Location_services/Configure_nRF_Cloud_integration/#prerequisites","text":"An nRF Cloud account. If you don't have it, create one here . A Coiote IoT DM user account. If you don't have one, register here . To enable communication and data flow between the Nordic Semiconductor nRF Cloud and Coiote IoT DM platforms, you first need to integrate them using the nRF Cloud integration in Coiote IoT DM. Follow the instructions below to learn how to do it.","title":"Prerequisites"},{"location":"Cloud_integrations/nRF_Cloud_Location_services/Configure_nRF_Cloud_integration/#get-the-service-evaluation-token-from-nrf-cloud","text":"In your nRF Cloud user account, from the expandable top-right menu, select Team . In the Service Evaluation Token field, click Generate Token and click on the icon to copy it.","title":"Get the Service Evaluation Token from nRF Cloud"},{"location":"Cloud_integrations/nRF_Cloud_Location_services/Configure_nRF_Cloud_integration/#integrate-nrf-cloud-with-coiote-iot-dm","text":"In your Coiote IoT DM user account, go to Administration --> Integrations --> Location services . In the nRF Cloud tile, click Connect . In the dialog window, paste the previously copied nRFC Service Evaluation Token. click Save to keep the setting. Now the integration between Coiote IoT DM and nRF Cloud is established. Read the next section on how to display device location in Coiote IoT DM.","title":"Integrate nRF Cloud with Coiote IoT DM"},{"location":"Cloud_integrations/nRF_Cloud_Location_services/Configure_nRF_Cloud_integration/#view-device-location-in-coiote-iot-dm","text":"Caution To display your device location, you first need to set up the Google Maps property for your domain. Go to Coiote IoT DM User Guide to learn how to do it. In your Coiote IoT DM user account, go to Device Inventory . Click the Management link next to your device to enter the Device Center . If not selected, click the Overview tab and scroll down to the Device location section.","title":"View device location in Coiote IoT DM"},{"location":"Coiote_IoT_DM/Device_Center/","text":"Device Center # The Device Center is designed for effective management of single devices. It enables IoT developers to build LwM2M applications quickly and intuitively and features actionable sections for quick access to the most important device info and data. Important This chapter refers to the beta version of the new Device Center. It replaces the previous Device Management Center view which is still supported - use the Go to previous version button and the Go to new Device Center link to switch between them. To enter the Device Center, go to the Device inventory and click on one of your devices. Summary sidebar # Use it to have the essential device info, status and actions always at hand. Device actions include: Reboot - make the device reboot by executing the Reboot resource from device data model. Data model refresh - make the device refresh its data model to check for new objects, object instances or resources. This is done by executing the LwM2M Discover operation on the device. Clear DTLS context - erase the context established between the device and the server during the DTLS handshake. A DTLS handshake will be performed to create a new DTLS context for communication. Delete device - permanently deletes the device entity and its data. The device summary lets you quickly check connection status and essential info about the device: Overview tab # Use this tab to see widgets related to device status and connectivity : Configuration tab # Quickly view, copy and edit device connection parameters and edit device details such as Friendly name and image. To upload device image, click Upload device image , browse an image from your local drive and click Save . To change device Friendly name , click on the pen icon next to the device name in the widget. To copy each connection parameter, use the copy icon next to a given field. To change connection parameters, e.g. Security mode , click on the pen icon in the top right corner, change the required data and click Save . Data model tab # Perform or schedule operations on device objects, object instances, and resources: To search the data model for device objects, object instances, and resources, start typing in the Search field to see results: Read # To perform a LwM2M READ operation on an object, object instance, or resource, click the circular icon in the Operations column (or via the 3 vertical dots menu in case of objects and object instances). Write # To perform a LwM2M WRITE operation on an object, object instance, or resource, click the pen icon in the Operations column. In the side navigation menu, type the desired value and click Set value . Execute # To perform a LwM2M EXECUTE operation on a resource, click the cogwheel icon in the Operations column and select Execute , or Execute with parameters to set additional EXECUTE conditions. Set observation # To set an observation on a resource (and, effectively, start performing LwM2M OBSERVE operations on the device): Click the eye icon in the Operations column. In the side navigation menu, enable the desired attributes, fill in the values, and click Set observation . Info Not more often than once every - the minimum time in seconds between two notifications. At least once every - the maximum time in seconds between two notifications. The notification is sent even if the value hasn't changed. Read more about other attributes in our Brief description of OMA LwM2M . To set an observation on an object or object instance, click on the 3 vertical dots menu and select Set observation , then follow the steps described above.","title":"Device center"},{"location":"Coiote_IoT_DM/Device_Center/#device-center","text":"The Device Center is designed for effective management of single devices. It enables IoT developers to build LwM2M applications quickly and intuitively and features actionable sections for quick access to the most important device info and data. Important This chapter refers to the beta version of the new Device Center. It replaces the previous Device Management Center view which is still supported - use the Go to previous version button and the Go to new Device Center link to switch between them. To enter the Device Center, go to the Device inventory and click on one of your devices.","title":"Device Center"},{"location":"Coiote_IoT_DM/Device_Center/#summary-sidebar","text":"Use it to have the essential device info, status and actions always at hand. Device actions include: Reboot - make the device reboot by executing the Reboot resource from device data model. Data model refresh - make the device refresh its data model to check for new objects, object instances or resources. This is done by executing the LwM2M Discover operation on the device. Clear DTLS context - erase the context established between the device and the server during the DTLS handshake. A DTLS handshake will be performed to create a new DTLS context for communication. Delete device - permanently deletes the device entity and its data. The device summary lets you quickly check connection status and essential info about the device:","title":"Summary sidebar"},{"location":"Coiote_IoT_DM/Device_Center/#overview-tab","text":"Use this tab to see widgets related to device status and connectivity :","title":"Overview tab"},{"location":"Coiote_IoT_DM/Device_Center/#configuration-tab","text":"Quickly view, copy and edit device connection parameters and edit device details such as Friendly name and image. To upload device image, click Upload device image , browse an image from your local drive and click Save . To change device Friendly name , click on the pen icon next to the device name in the widget. To copy each connection parameter, use the copy icon next to a given field. To change connection parameters, e.g. Security mode , click on the pen icon in the top right corner, change the required data and click Save .","title":"Configuration tab"},{"location":"Coiote_IoT_DM/Device_Center/#data-model-tab","text":"Perform or schedule operations on device objects, object instances, and resources: To search the data model for device objects, object instances, and resources, start typing in the Search field to see results:","title":"Data model tab"},{"location":"Coiote_IoT_DM/Device_Center/#read","text":"To perform a LwM2M READ operation on an object, object instance, or resource, click the circular icon in the Operations column (or via the 3 vertical dots menu in case of objects and object instances).","title":"Read"},{"location":"Coiote_IoT_DM/Device_Center/#write","text":"To perform a LwM2M WRITE operation on an object, object instance, or resource, click the pen icon in the Operations column. In the side navigation menu, type the desired value and click Set value .","title":"Write"},{"location":"Coiote_IoT_DM/Device_Center/#execute","text":"To perform a LwM2M EXECUTE operation on a resource, click the cogwheel icon in the Operations column and select Execute , or Execute with parameters to set additional EXECUTE conditions.","title":"Execute"},{"location":"Coiote_IoT_DM/Device_Center/#set-observation","text":"To set an observation on a resource (and, effectively, start performing LwM2M OBSERVE operations on the device): Click the eye icon in the Operations column. In the side navigation menu, enable the desired attributes, fill in the values, and click Set observation . Info Not more often than once every - the minimum time in seconds between two notifications. At least once every - the maximum time in seconds between two notifications. The notification is sent even if the value hasn't changed. Read more about other attributes in our Brief description of OMA LwM2M . To set an observation on an object or object instance, click on the 3 vertical dots menu and select Set observation , then follow the steps described above.","title":"Set observation"},{"location":"Coiote_IoT_DM/Visualize_data/","text":"Visualize device data # The Dashboard consists of widgets which display telemetry data. Data can be collected in one of the following ways: An observation is set on a resource A read command is invoked on a resouce The device sends a LwM2M SEND message with a resource value Set observation # To start collecting data to be displayed on your Dashboard, start observing one or multiple resources. Note By default, the data is stored for 30 days . The storage retention period can be changed in the Domain configuration view. Important Any monitored string resource values that exceed the 100-character limit will be automatically trimmed to fit within the limit. Go to the Device Center of a connected device and click the Data model tab. In the list of objects, expand an object (e.g. Temperature /3303/ ) and click the eye icon in the Operations column. In the side navigation menu, enable the Not more often than once every and At least once every attributes and click Save . Info Not more often than once every - the minimum time in seconds between two notifications. At least once every - the maximum time in seconds between two notifications. The notification is sent even if the value hasn't changed. Create Widget # In the expanded object card, click the Add widget icon in the Widget column. Important The action of adding a widget applies to all the devices in your domain, but the widget will only display data from the 10 oldest devices (based on their Creation time ). View widget in your Dashboard # To see the device data visualized on the widget, enter your Dashboard . From the left-side menu, select Dashboard . Expand the widget you just created, you should see a view similar to this: Adjust the timespan for the collected data by selecting the desired period in the timespan expandable list. Note The data is refreshed automatically and periodically every 15 seconds, there's no need to refresh the page manually. Tip If the widget chart displays no data, the cause might be that the 10 oldest devices in your domain were not active within the chosen timespan and no data was reported. Try choosing a wider timespan or check device connection status. Customize dashboard # Dashboards can be customized. Click Customize dashboard to switch to edit mode. To change the widget name, expand a widget and click the pencil icon. Type the new name and click Save . To delete a widget, expand a widget and click the trash bin icon. To undo or redo your edits, click the undo or redo arrows. To exit edition mode without saving changes, click Discard changes and Discard in the dialog window. To exit edition mode and save changes, click Save changes .","title":"Data visualization"},{"location":"Coiote_IoT_DM/Visualize_data/#visualize-device-data","text":"The Dashboard consists of widgets which display telemetry data. Data can be collected in one of the following ways: An observation is set on a resource A read command is invoked on a resouce The device sends a LwM2M SEND message with a resource value","title":"Visualize device data"},{"location":"Coiote_IoT_DM/Visualize_data/#set-observation","text":"To start collecting data to be displayed on your Dashboard, start observing one or multiple resources. Note By default, the data is stored for 30 days . The storage retention period can be changed in the Domain configuration view. Important Any monitored string resource values that exceed the 100-character limit will be automatically trimmed to fit within the limit. Go to the Device Center of a connected device and click the Data model tab. In the list of objects, expand an object (e.g. Temperature /3303/ ) and click the eye icon in the Operations column. In the side navigation menu, enable the Not more often than once every and At least once every attributes and click Save . Info Not more often than once every - the minimum time in seconds between two notifications. At least once every - the maximum time in seconds between two notifications. The notification is sent even if the value hasn't changed.","title":"Set observation"},{"location":"Coiote_IoT_DM/Visualize_data/#create-widget","text":"In the expanded object card, click the Add widget icon in the Widget column. Important The action of adding a widget applies to all the devices in your domain, but the widget will only display data from the 10 oldest devices (based on their Creation time ).","title":"Create Widget"},{"location":"Coiote_IoT_DM/Visualize_data/#view-widget-in-your-dashboard","text":"To see the device data visualized on the widget, enter your Dashboard . From the left-side menu, select Dashboard . Expand the widget you just created, you should see a view similar to this: Adjust the timespan for the collected data by selecting the desired period in the timespan expandable list. Note The data is refreshed automatically and periodically every 15 seconds, there's no need to refresh the page manually. Tip If the widget chart displays no data, the cause might be that the 10 oldest devices in your domain were not active within the chosen timespan and no data was reported. Try choosing a wider timespan or check device connection status.","title":"View widget in your Dashboard"},{"location":"Coiote_IoT_DM/Visualize_data/#customize-dashboard","text":"Dashboards can be customized. Click Customize dashboard to switch to edit mode. To change the widget name, expand a widget and click the pencil icon. Type the new name and click Save . To delete a widget, expand a widget and click the trash bin icon. To undo or redo your edits, click the undo or redo arrows. To exit edition mode without saving changes, click Discard changes and Discard in the dialog window. To exit edition mode and save changes, click Save changes .","title":"Customize dashboard"},{"location":"Coiote_IoT_DM/firmware_update/","text":"Basic Firmware Update # Remotely update the firmware of your LwM2M device using the Firmware Update Object /5 . Prerequisites # An active Coiote IoT DM user account A device which supports Firmware Update Object /5 Note The Anjay LwM2M Client supports the Firmware Update Object. Learn more about Anjay by visiting the official Anjay Documentation site or Anjay SDK on GitHub . Firmware Update Object /5 # The Firmware Update process is defined in the Firmware Update Object /5 . This Object contains Resources which define the update process using 4 Update States (representing the phase of the update process) and 11 Update Results (representing the most common outcomes of the firmware update process). Resource /5/*/3 represents the State Resource /5/*/5 represents the Update Result Update States ID State Description state 0 Idle Before downloading and after successfully updating state 1 Downloading The new firmware is on the way state 2 Downloaded The firmware download is completed state 3 Updating The Client starts updating its firmware, after which it changes its state back to Idle Update Results Result Description update result 0 Initial value update result 1 Firmware updated successfully update result 2 Insufficient flash memory for the new firmware package update result 3 Out of RAM during downloading proces update result 4 Connection lost during downloading process update result 5 Integrity check failure for new downloaded package update result 6 Unsupported package type update result 7 Invalid URI update result 8 Firmware update failed update result 9 Unsupported protocol update result 10 Firmware update cancelled update result 11 Firmware update deferred Info Learn more about the Firmware Update Object in the OMA LwM2M Object and Resource Registry . Prepare the Firmware Update # In the Coiote IoT Device Management platform, go to Device Inventory . Select the device you want to update by clicking on its endpoint name. Go to the Data model tab to validate if the Firmware Update Object /5 is present. If so, the Object is supported by the LwM2M Client. Go to the Firmware update tab. Click the Update Firmware button. Select Basic Firmware Update . Upload the firmware image . Choose between Pull and Push : Pull method (recommended): The LwM2M Client receives the URI of the file that is to be downloaded and pulls the file from it. Push method : The LwM2M Server pushes the firmware file to the device. Info Pull supports the following transport types : CoAP or CoAPs over UDP CoAP or CoAPs over TCP HTTP or HTTPs Push transmits the firmware over the same transport type as is used for device management, which is CoAPs over UDP by default. Which transport protocol to choose? Downloads using CoAP(s) over UDP tend to be slow due to the limitation of the maximum CoAP Block size of 1024 bytes and the required acknowledgements for each Block transfer. Choosing CoAP(s) over TCP or HTTP(s) usually results in faster download speeds. However, not every device supports these transport protocols. Click Schedule Update to trigger the Firmware Update process. Download & Upgrade Process # If the Firmware Update is scheduled successfully, the device starts downloading the firmware at the next practical opportunity. The actual firmware update starts once the integrity and authenticity of the firmware image has been validated by the LwM2M Client. Once executed successfully, the status in the Update list panel changes to Success . Note While the device is updating its firmware, it will deregister and reboot using the new firmware. This process may time several minutes. Monitoring the update process # During the update process, the status of the firmware update can be monitored by reviewing the Resources State /5/*/3 and Update Results /5/*/5 . To find the Resources, select the Data model tab and open the Firmware Update Object /5 . If no errors occur, the update process follows this pattern: Downloading state 1 & update result 0 Downloaded state 2 & update result 0 Updating state 3 & update result 0 Updated state 0 & update result 1 Update successful? Does the State /5/*/3 report 0 and the Update Results /5/*/5 report 1 ? Congratulations! You've successfully updated the firmware of your device. \ud83c\udf89 Troubleshooting # Firmware Update only works over CoAP, not over CoAPs # For the firmware update over CoAPs transfer to work, the LwM2M Client shall use the same security credentials (i.e. PSK or certificates) as those used for the management interface. This is the default behavior of the Anjay client, but you might need to configure it explicitly when using other LwM2M Client implementations. Zephyr LwM2M Client configuration instruction The security tags needs to the same in the \" Security tag for FOTA download library \" as in the \" LwM2M server TLS tag \" (e.g. using Nordic's default tag: 35724861 ). To update the security tags, edit the Kconfig in the directory: Zephyr Kernel > Modules > nrf > Nordic nRF Connect > Networking > Application protocols > LwM2M client utilities library > Security object support > Firmware Update object support Kconfig editor in nRF Connect for VS Code Useful Links # Anjay firmware update documentation Anjay SDK Anjay Zephyr SDK Anjay ESP32 SDK OMA LwM2M Object and Resource Registry","title":"Basic firmware update"},{"location":"Coiote_IoT_DM/firmware_update/#basic-firmware-update","text":"Remotely update the firmware of your LwM2M device using the Firmware Update Object /5 .","title":"Basic Firmware Update"},{"location":"Coiote_IoT_DM/firmware_update/#prerequisites","text":"An active Coiote IoT DM user account A device which supports Firmware Update Object /5 Note The Anjay LwM2M Client supports the Firmware Update Object. Learn more about Anjay by visiting the official Anjay Documentation site or Anjay SDK on GitHub .","title":"Prerequisites"},{"location":"Coiote_IoT_DM/firmware_update/#firmware-update-object-5","text":"The Firmware Update process is defined in the Firmware Update Object /5 . This Object contains Resources which define the update process using 4 Update States (representing the phase of the update process) and 11 Update Results (representing the most common outcomes of the firmware update process). Resource /5/*/3 represents the State Resource /5/*/5 represents the Update Result Update States ID State Description state 0 Idle Before downloading and after successfully updating state 1 Downloading The new firmware is on the way state 2 Downloaded The firmware download is completed state 3 Updating The Client starts updating its firmware, after which it changes its state back to Idle Update Results Result Description update result 0 Initial value update result 1 Firmware updated successfully update result 2 Insufficient flash memory for the new firmware package update result 3 Out of RAM during downloading proces update result 4 Connection lost during downloading process update result 5 Integrity check failure for new downloaded package update result 6 Unsupported package type update result 7 Invalid URI update result 8 Firmware update failed update result 9 Unsupported protocol update result 10 Firmware update cancelled update result 11 Firmware update deferred Info Learn more about the Firmware Update Object in the OMA LwM2M Object and Resource Registry .","title":"Firmware Update Object /5"},{"location":"Coiote_IoT_DM/firmware_update/#prepare-the-firmware-update","text":"In the Coiote IoT Device Management platform, go to Device Inventory . Select the device you want to update by clicking on its endpoint name. Go to the Data model tab to validate if the Firmware Update Object /5 is present. If so, the Object is supported by the LwM2M Client. Go to the Firmware update tab. Click the Update Firmware button. Select Basic Firmware Update . Upload the firmware image . Choose between Pull and Push : Pull method (recommended): The LwM2M Client receives the URI of the file that is to be downloaded and pulls the file from it. Push method : The LwM2M Server pushes the firmware file to the device. Info Pull supports the following transport types : CoAP or CoAPs over UDP CoAP or CoAPs over TCP HTTP or HTTPs Push transmits the firmware over the same transport type as is used for device management, which is CoAPs over UDP by default. Which transport protocol to choose? Downloads using CoAP(s) over UDP tend to be slow due to the limitation of the maximum CoAP Block size of 1024 bytes and the required acknowledgements for each Block transfer. Choosing CoAP(s) over TCP or HTTP(s) usually results in faster download speeds. However, not every device supports these transport protocols. Click Schedule Update to trigger the Firmware Update process.","title":"Prepare the Firmware Update"},{"location":"Coiote_IoT_DM/firmware_update/#download-upgrade-process","text":"If the Firmware Update is scheduled successfully, the device starts downloading the firmware at the next practical opportunity. The actual firmware update starts once the integrity and authenticity of the firmware image has been validated by the LwM2M Client. Once executed successfully, the status in the Update list panel changes to Success . Note While the device is updating its firmware, it will deregister and reboot using the new firmware. This process may time several minutes.","title":"Download &amp; Upgrade Process"},{"location":"Coiote_IoT_DM/firmware_update/#monitoring-the-update-process","text":"During the update process, the status of the firmware update can be monitored by reviewing the Resources State /5/*/3 and Update Results /5/*/5 . To find the Resources, select the Data model tab and open the Firmware Update Object /5 . If no errors occur, the update process follows this pattern: Downloading state 1 & update result 0 Downloaded state 2 & update result 0 Updating state 3 & update result 0 Updated state 0 & update result 1 Update successful? Does the State /5/*/3 report 0 and the Update Results /5/*/5 report 1 ? Congratulations! You've successfully updated the firmware of your device. \ud83c\udf89","title":"Monitoring the update process"},{"location":"Coiote_IoT_DM/firmware_update/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Coiote_IoT_DM/firmware_update/#firmware-update-only-works-over-coap-not-over-coaps","text":"For the firmware update over CoAPs transfer to work, the LwM2M Client shall use the same security credentials (i.e. PSK or certificates) as those used for the management interface. This is the default behavior of the Anjay client, but you might need to configure it explicitly when using other LwM2M Client implementations. Zephyr LwM2M Client configuration instruction The security tags needs to the same in the \" Security tag for FOTA download library \" as in the \" LwM2M server TLS tag \" (e.g. using Nordic's default tag: 35724861 ). To update the security tags, edit the Kconfig in the directory: Zephyr Kernel > Modules > nrf > Nordic nRF Connect > Networking > Application protocols > LwM2M client utilities library > Security object support > Firmware Update object support Kconfig editor in nRF Connect for VS Code","title":"Firmware Update only works over CoAP, not over CoAPs"},{"location":"Coiote_IoT_DM/firmware_update/#useful-links","text":"Anjay firmware update documentation Anjay SDK Anjay Zephyr SDK Anjay ESP32 SDK OMA LwM2M Object and Resource Registry","title":"Useful Links"},{"location":"Coiote_IoT_DM/introduction/","text":"Coiote IoT Device Management platform # Coiote IoT Device Management platform allows you to manage your LwM2M devices throughout their entire lifecycle. Coiote IoT DM supports device onboarding, data management, data visualization, automated tests, firmware updates, monitoring & alerting and cloud integrations. Visit Coiote IoT DM Sign up free of charge Get started by signing up to Coiote IoT Device Management platform. You can sign up for a developer account which allows you to connect up to 10 devices free of charge. Device inventory # Once logged in, you enter the Device inventory which provides an overview of all registered LwM2M devices. After selecting one of your devices, you enter the Device center which allows you to monitor and manage single devices. In the Device center you can: Alter device configurations Set observations Schedule firmware updates \u2192 Learn more about the Device center . Dashboard # The Dashboard is composed of widgets which display telemetry data. Widgets use different kinds of charts depending on the type of data collected. Go to the Device center to configure widgets. \u2192 Learn more about Data visualization . Operations center # Use the Operations center to easily monitor your devices. It provides a clear overview of alerts, which highlight the devices requiring immediate attention. Device groups* # Note Features marked with an \" * \" are only included in the premium version of Coiote IoT DM. Devices can be added to Groups allowing for easy management of your device fleet. Instead of managing devices one by one, configurations and firmware can be updated for a group of devices with a single click. Integrations # Initiate integrations with popular cloud platforms such as Azure IoT Hub, AWS IoT Core or nRF Cloud. \u2192 Learn more about Cloud integrations . Device test repository* # Test the performance of your device firmware by mimicking real-world scenarios. Device tests allow you to validate new application firmware, to test the implementation of the LwM2M standard, and to run regression tests to ensure new firmware doesn\u2019t break existing functionality. \u2192 Learn more about Device tests . Monitoring & Reporting* # The Monitoring module is responsible for collecting historical data about device states which can be aggregated and downloaded using the Reporting feature. Administration # Manage additional settings in the administration section, such as Billing , User management and Domain management .","title":"Introduction"},{"location":"Coiote_IoT_DM/introduction/#coiote-iot-device-management-platform","text":"Coiote IoT Device Management platform allows you to manage your LwM2M devices throughout their entire lifecycle. Coiote IoT DM supports device onboarding, data management, data visualization, automated tests, firmware updates, monitoring & alerting and cloud integrations. Visit Coiote IoT DM Sign up free of charge Get started by signing up to Coiote IoT Device Management platform. You can sign up for a developer account which allows you to connect up to 10 devices free of charge.","title":"Coiote IoT Device Management platform"},{"location":"Coiote_IoT_DM/introduction/#device-inventory","text":"Once logged in, you enter the Device inventory which provides an overview of all registered LwM2M devices. After selecting one of your devices, you enter the Device center which allows you to monitor and manage single devices. In the Device center you can: Alter device configurations Set observations Schedule firmware updates \u2192 Learn more about the Device center .","title":"Device inventory"},{"location":"Coiote_IoT_DM/introduction/#dashboard","text":"The Dashboard is composed of widgets which display telemetry data. Widgets use different kinds of charts depending on the type of data collected. Go to the Device center to configure widgets. \u2192 Learn more about Data visualization .","title":"Dashboard"},{"location":"Coiote_IoT_DM/introduction/#operations-center","text":"Use the Operations center to easily monitor your devices. It provides a clear overview of alerts, which highlight the devices requiring immediate attention.","title":"Operations center"},{"location":"Coiote_IoT_DM/introduction/#device-groups","text":"Note Features marked with an \" * \" are only included in the premium version of Coiote IoT DM. Devices can be added to Groups allowing for easy management of your device fleet. Instead of managing devices one by one, configurations and firmware can be updated for a group of devices with a single click.","title":"Device groups*"},{"location":"Coiote_IoT_DM/introduction/#integrations","text":"Initiate integrations with popular cloud platforms such as Azure IoT Hub, AWS IoT Core or nRF Cloud. \u2192 Learn more about Cloud integrations .","title":"Integrations"},{"location":"Coiote_IoT_DM/introduction/#device-test-repository","text":"Test the performance of your device firmware by mimicking real-world scenarios. Device tests allow you to validate new application firmware, to test the implementation of the LwM2M standard, and to run regression tests to ensure new firmware doesn\u2019t break existing functionality. \u2192 Learn more about Device tests .","title":"Device test repository*"},{"location":"Coiote_IoT_DM/introduction/#monitoring-reporting","text":"The Monitoring module is responsible for collecting historical data about device states which can be aggregated and downloaded using the Reporting feature.","title":"Monitoring &amp; Reporting*"},{"location":"Coiote_IoT_DM/introduction/#administration","text":"Manage additional settings in the administration section, such as Billing , User management and Domain management .","title":"Administration"},{"location":"Coiote_IoT_DM/multi_firmware_update/","text":"Multi-component Firmware Update # Remotely update a component of your LwM2M device's firmware using the Advanced Firmware Update Object /33629 . Object /33629 is designed as an extension of the Firmware Update object /5 . It supports multiple instances, each representing a \"component\" of the device's firmware that can be upgraded separately. The specific meaning and purpose of these components are not standardized and can vary depending on the implementation. However, they typically encompass elements such as bootloaders, application code, cellular modem firmwares, security processor firmwares, and other related firmware entities. Prerequisites # An active Coiote IoT DM user account A device which supports the Advanced Firmware Update Object /33629 Firmware Update Object /33629 # Object /33629 defines the update process using 4 Update States representing the phase of the update process. Additionally, a total of 13 Update Results may be reported, representing the most common outcomes of the firmware update process. Resource /33629/*/3 represents the State Resource /33629/*/5 represents the Update Result Update States ID State Description state 0 Idle Before downloading and after successfully updating state 1 Downloading The new firmware is on the way state 2 Downloaded The firmware download is completed state 3 Updating The Client starts updating its firmware, after which it changes its state back to Idle Update Results Result Description update result 0 Initial value update result 1 Firmware updated successfully update result 2 Insufficient flash memory for the new firmware package update result 3 Out of RAM during downloading proces update result 4 Connection lost during downloading process update result 5 Integrity check failure for new downloaded package update result 6 Unsupported package type update result 7 Invalid URI update result 8 Firmware update failed update result 9 Unsupported protocol update result 10 Firmware update cancelled update result 11 Firmware update deferred update result 12 Conflicting state update result 13 Dependency error Prepare the Firmware Update # In the Coiote IoT Device Management platform, go to Device Inventory . Select the device you want to update by clicking on its endpoint name. Go to the Data model tab to validate if the Firmware Update Object /33629 is present. If so, the Object is supported by the LwM2M Client. Info Each Object Instance represents a component of the device's firmware which can be updated. Click the Object Instances of Object /33629 to see what components can be updated. Go to the Firmware update tab. Click the Update Firmware button. Select Multi-component Firmware Update . Select the components you would like to update, e.g. modem, application or bootloader. Note In this example, the modem firmware of the nRF9160 SiP is being updated using the delta update file: mfw_nrf9160_update_from_1.3.3_to_1.3.4.bin which is provided by Nordic . Upload the firmware image . Choose between Pull and Push : Pull method (recommended): The LwM2M Client receives the URI of the file that is to be downloaded and pulls the file from it. Push method : The LwM2M Server pushes the firmware file to the device. Info Pull supports the following transport types : CoAP or CoAPs over UDP CoAP or CoAPs over TCP HTTP or HTTPs Push transmits the firmware over the same transport type as is used for device management, which is CoAPs over UDP by default. Which transport protocol to choose? Downloads using CoAP(s) over UDP tend to be slow due to the limitation of the maximum CoAP Block size of 1024 bytes and the required acknowledgements for each Block transfer. Choosing CoAP(s) over TCP or HTTP(s) usually results in faster download speeds. However, not every device supports these transport protocols. Click Schedule Update to trigger the Firmware Update process. Download & Upgrade Process # If the Firmware Update is scheduled successfully, the device starts downloading the firmware at the next practical opportunity. The actual firmware update starts once the integrity and authenticity of the firmware image has been validated by the LwM2M Client. Once executed successfully, the status in the Update list panel changes to Success . Note While the device is updating its firmware, it will deregister and reboot using the new firmware. This process may time several minutes. Monitoring the update process # During the update process, the status of the firmware update can be monitored by reviewing the Resources State /33629/*/3 and Update Results /33629/*/5 . To find the Resources, select the Data model tab and open the Advanced Firmware Update Object /33629 . If no errors occur, the update process follows this pattern: Downloading state 1 & update result 0 Downloaded state 2 & update result 0 Updating state 3 & update result 0 Updated state 0 & update result 1 Update successful? Does the State /33629/*/3 report 0 and the Update Results /33629/*/5 report 1 ? Congratulations! You've successfully updated the firmware of your device. \ud83c\udf89 Useful Links # Anjay firmware update documentation","title":"Multi-component firmware update"},{"location":"Coiote_IoT_DM/multi_firmware_update/#multi-component-firmware-update","text":"Remotely update a component of your LwM2M device's firmware using the Advanced Firmware Update Object /33629 . Object /33629 is designed as an extension of the Firmware Update object /5 . It supports multiple instances, each representing a \"component\" of the device's firmware that can be upgraded separately. The specific meaning and purpose of these components are not standardized and can vary depending on the implementation. However, they typically encompass elements such as bootloaders, application code, cellular modem firmwares, security processor firmwares, and other related firmware entities.","title":"Multi-component Firmware Update"},{"location":"Coiote_IoT_DM/multi_firmware_update/#prerequisites","text":"An active Coiote IoT DM user account A device which supports the Advanced Firmware Update Object /33629","title":"Prerequisites"},{"location":"Coiote_IoT_DM/multi_firmware_update/#firmware-update-object-33629","text":"Object /33629 defines the update process using 4 Update States representing the phase of the update process. Additionally, a total of 13 Update Results may be reported, representing the most common outcomes of the firmware update process. Resource /33629/*/3 represents the State Resource /33629/*/5 represents the Update Result Update States ID State Description state 0 Idle Before downloading and after successfully updating state 1 Downloading The new firmware is on the way state 2 Downloaded The firmware download is completed state 3 Updating The Client starts updating its firmware, after which it changes its state back to Idle Update Results Result Description update result 0 Initial value update result 1 Firmware updated successfully update result 2 Insufficient flash memory for the new firmware package update result 3 Out of RAM during downloading proces update result 4 Connection lost during downloading process update result 5 Integrity check failure for new downloaded package update result 6 Unsupported package type update result 7 Invalid URI update result 8 Firmware update failed update result 9 Unsupported protocol update result 10 Firmware update cancelled update result 11 Firmware update deferred update result 12 Conflicting state update result 13 Dependency error","title":"Firmware Update Object /33629"},{"location":"Coiote_IoT_DM/multi_firmware_update/#prepare-the-firmware-update","text":"In the Coiote IoT Device Management platform, go to Device Inventory . Select the device you want to update by clicking on its endpoint name. Go to the Data model tab to validate if the Firmware Update Object /33629 is present. If so, the Object is supported by the LwM2M Client. Info Each Object Instance represents a component of the device's firmware which can be updated. Click the Object Instances of Object /33629 to see what components can be updated. Go to the Firmware update tab. Click the Update Firmware button. Select Multi-component Firmware Update . Select the components you would like to update, e.g. modem, application or bootloader. Note In this example, the modem firmware of the nRF9160 SiP is being updated using the delta update file: mfw_nrf9160_update_from_1.3.3_to_1.3.4.bin which is provided by Nordic . Upload the firmware image . Choose between Pull and Push : Pull method (recommended): The LwM2M Client receives the URI of the file that is to be downloaded and pulls the file from it. Push method : The LwM2M Server pushes the firmware file to the device. Info Pull supports the following transport types : CoAP or CoAPs over UDP CoAP or CoAPs over TCP HTTP or HTTPs Push transmits the firmware over the same transport type as is used for device management, which is CoAPs over UDP by default. Which transport protocol to choose? Downloads using CoAP(s) over UDP tend to be slow due to the limitation of the maximum CoAP Block size of 1024 bytes and the required acknowledgements for each Block transfer. Choosing CoAP(s) over TCP or HTTP(s) usually results in faster download speeds. However, not every device supports these transport protocols. Click Schedule Update to trigger the Firmware Update process.","title":"Prepare the Firmware Update"},{"location":"Coiote_IoT_DM/multi_firmware_update/#download-upgrade-process","text":"If the Firmware Update is scheduled successfully, the device starts downloading the firmware at the next practical opportunity. The actual firmware update starts once the integrity and authenticity of the firmware image has been validated by the LwM2M Client. Once executed successfully, the status in the Update list panel changes to Success . Note While the device is updating its firmware, it will deregister and reboot using the new firmware. This process may time several minutes.","title":"Download &amp; Upgrade Process"},{"location":"Coiote_IoT_DM/multi_firmware_update/#monitoring-the-update-process","text":"During the update process, the status of the firmware update can be monitored by reviewing the Resources State /33629/*/3 and Update Results /33629/*/5 . To find the Resources, select the Data model tab and open the Advanced Firmware Update Object /33629 . If no errors occur, the update process follows this pattern: Downloading state 1 & update result 0 Downloaded state 2 & update result 0 Updating state 3 & update result 0 Updated state 0 & update result 1 Update successful? Does the State /33629/*/3 report 0 and the Update Results /33629/*/5 report 1 ? Congratulations! You've successfully updated the firmware of your device. \ud83c\udf89","title":"Monitoring the update process"},{"location":"Coiote_IoT_DM/multi_firmware_update/#useful-links","text":"Anjay firmware update documentation","title":"Useful Links"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/","text":"Configure tests # Introduction # This chapter covers the configuration aspects of the device tests. It explains how to list and view the configuration of tests, and how to add, edit, delete, import, and export them. Note The configuration of tests is device-independent, which means that all the configured tests can be applied for all the devices that have registered to the platform. Device test repository panel # In this section you'll learn about the layout and main features of the Device test repository panel. To enter the panel, select Device test repository and then Server simulator in the navigation menu. Search \u2013 use it to search the test list. Filter - use it to filter tests either per domain or per test type (Automated or Semi-Manual). Add test \u2013 use it to add a test manually or import tests from a .conf file. 'Select all' checkbox \u2013 use it to select or deselect all tests visible in the list. Actions \u2013 drop-down menu \u2013 use it to download or delete selected tests. Actions \u2013 context menu - use it to preview, download, or delete selected tests. Test list \u2013 it features all the tests available for you at the moment, or all the tests meeting the search criteria (if entered). Test type \u2013 it shows the test type: either Automated or Semi-Manual. Domain name \u2013 it shows the names of domains and subdomains to which your test belong. Creation date \u2013 it shows the date when the test was created. Last modified \u2013 it shows the date when the test was last modified. Description \u2013 it shows a test description, if the test has any. Listing tests # The tests appearing in the Device test repository panel are presented in the form of a searchable alphabetical list to ensure their convenient viewing and management. Read on this section to learn how to use the search to list your tests. Using the search # To search the list of configured tests, start typing your entry into the search field. The matching items will appear in the list. Tip Note that if you select a test from the filtered list and then erase your entry from the search field, the selection is carried over to the complete list view. Similarly, if you use the Select all checkbox in the full list view and then filter the list using the search, the selection is carried over to the filtered list view. Viewing test configuration # Read this section to learn how to view the configuration of an individual test: From the navigation menu, select Device test repository . In the list, find the test you want to view and click its name. In the action list, expand the action items by clicking the \u02c5 icon. To expand or collapse the complete action list, use the Expand all and Collapse all buttons. Optionally, you can use the Edit test button to edit your test or click the trash bin icon to delete it. Adding new tests # Read this section to learn how to add a new test. You can either add a test manually or import tests as a .conf file. Add a test manually # From the navigation menu, select Device test repository . Click Add test and select Add test manually Configure your test: Enter your Test name (this field is mandatory). Enter your Test description (this field is optional). Select your Reference device (this field is optional). You can either: type the exact device ID in the Reference device search field and hit Enter , click Select reference device and select your device from the list. If you can't see your device in the list, start typing its name in the search field to get matching results. In the Action list , specify your actions: To add your first action item, choose its name from the drop-down list, or type its name in the Specify action field. Within the action, fill in the mandatory attributes field. To add another action item, use the Add action button and specify your next action. To change the order of actions within the test, drag and drop the action item you want to move by using the drag icon. To copy an action item, click the copy icon (except for the Loop action). To delete an action item, click the trash bin icon. If your test is ready and all the mandatory fields are filled, click Add a new test . Note To learn more about individual test actions, see the Test action chapter. Import tests from .conf file # From the navigation menu, select Device test repository . Click Add test and select Import tests from .conf file . A dialogue box prompting you to import a .conf file appears. Add the file and click Import . Tip To download tests into a .conf file, check the Downloading tests section. Editing tests # Read this section to learn how to edit a test. Note If you edit a test that was executed before, the existing historical results for this test will no longer be available. From the navigation menu, select Device test repository . From the list, choose the test you want to edit and click its name. Click Edit test in the top-right corner. Edit your test: Modify your Test name (this field is mandatory). Modify your Test description (this field is optional). Change or add your Reference device (this field is optional). You can either: type the exact device ID in the Reference device search field and hit Enter , click Select reference device and select your device from the list. If you can't see your device in the list, start typing its name in the search field to get matching results. In the Action list , edit your actions: Edit an existing action item by changing its name, modifying its attributes. Add another action item using the Add action button. Change the order of actions within the test by dragging and dropping the action item you want to move using the drag icon. Copy an action item by clicking on the copy icon (except for the Loop action). Delete an action item by clicking on the trash bin icon. If you are done editing your test and all the mandatory fields remain filled, click Save changes . Deleting tests # Read this section to learn how to delete tests. From the navigation menu, select Device test repository . From the list, select the tests you want to delete. There are two ways to delete the selected tests: Click the Actions drop-down menu and select Delete . Click the context menu on the right and select Delete . In the dialog that appears, click Delete . The test will be permanently deleted and you won't be able to recover it. Downloading tests # Read this section to learn how to export tests. From the navigation menu, select Device test repository . From the list, select the test(s) you want to export. There are two ways to download the selected tests: for batch export, click the Actions drop-down menu and select Download tests . for single test export, click the context menu on the right the test entry and select Download test . The tests are downloaded in the .conf format. Tip Edit the exported tests using Windows Notepad or other standard text editor. Previewing test # Select the test you want to preview. Click the context menu on the right and select Preview test .","title":"Configure tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#configure-tests","text":"","title":"Configure tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#introduction","text":"This chapter covers the configuration aspects of the device tests. It explains how to list and view the configuration of tests, and how to add, edit, delete, import, and export them. Note The configuration of tests is device-independent, which means that all the configured tests can be applied for all the devices that have registered to the platform.","title":"Introduction"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#device-test-repository-panel","text":"In this section you'll learn about the layout and main features of the Device test repository panel. To enter the panel, select Device test repository and then Server simulator in the navigation menu. Search \u2013 use it to search the test list. Filter - use it to filter tests either per domain or per test type (Automated or Semi-Manual). Add test \u2013 use it to add a test manually or import tests from a .conf file. 'Select all' checkbox \u2013 use it to select or deselect all tests visible in the list. Actions \u2013 drop-down menu \u2013 use it to download or delete selected tests. Actions \u2013 context menu - use it to preview, download, or delete selected tests. Test list \u2013 it features all the tests available for you at the moment, or all the tests meeting the search criteria (if entered). Test type \u2013 it shows the test type: either Automated or Semi-Manual. Domain name \u2013 it shows the names of domains and subdomains to which your test belong. Creation date \u2013 it shows the date when the test was created. Last modified \u2013 it shows the date when the test was last modified. Description \u2013 it shows a test description, if the test has any.","title":"Device test repository panel"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#listing-tests","text":"The tests appearing in the Device test repository panel are presented in the form of a searchable alphabetical list to ensure their convenient viewing and management. Read on this section to learn how to use the search to list your tests.","title":"Listing tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#using-the-search","text":"To search the list of configured tests, start typing your entry into the search field. The matching items will appear in the list. Tip Note that if you select a test from the filtered list and then erase your entry from the search field, the selection is carried over to the complete list view. Similarly, if you use the Select all checkbox in the full list view and then filter the list using the search, the selection is carried over to the filtered list view.","title":"Using the search"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#viewing-test-configuration","text":"Read this section to learn how to view the configuration of an individual test: From the navigation menu, select Device test repository . In the list, find the test you want to view and click its name. In the action list, expand the action items by clicking the \u02c5 icon. To expand or collapse the complete action list, use the Expand all and Collapse all buttons. Optionally, you can use the Edit test button to edit your test or click the trash bin icon to delete it.","title":"Viewing test configuration"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#adding-new-tests","text":"Read this section to learn how to add a new test. You can either add a test manually or import tests as a .conf file.","title":"Adding new tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#add-a-test-manually","text":"From the navigation menu, select Device test repository . Click Add test and select Add test manually Configure your test: Enter your Test name (this field is mandatory). Enter your Test description (this field is optional). Select your Reference device (this field is optional). You can either: type the exact device ID in the Reference device search field and hit Enter , click Select reference device and select your device from the list. If you can't see your device in the list, start typing its name in the search field to get matching results. In the Action list , specify your actions: To add your first action item, choose its name from the drop-down list, or type its name in the Specify action field. Within the action, fill in the mandatory attributes field. To add another action item, use the Add action button and specify your next action. To change the order of actions within the test, drag and drop the action item you want to move by using the drag icon. To copy an action item, click the copy icon (except for the Loop action). To delete an action item, click the trash bin icon. If your test is ready and all the mandatory fields are filled, click Add a new test . Note To learn more about individual test actions, see the Test action chapter.","title":"Add a test manually"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#import-tests-from-conf-file","text":"From the navigation menu, select Device test repository . Click Add test and select Import tests from .conf file . A dialogue box prompting you to import a .conf file appears. Add the file and click Import . Tip To download tests into a .conf file, check the Downloading tests section.","title":"Import tests from .conf file"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#editing-tests","text":"Read this section to learn how to edit a test. Note If you edit a test that was executed before, the existing historical results for this test will no longer be available. From the navigation menu, select Device test repository . From the list, choose the test you want to edit and click its name. Click Edit test in the top-right corner. Edit your test: Modify your Test name (this field is mandatory). Modify your Test description (this field is optional). Change or add your Reference device (this field is optional). You can either: type the exact device ID in the Reference device search field and hit Enter , click Select reference device and select your device from the list. If you can't see your device in the list, start typing its name in the search field to get matching results. In the Action list , edit your actions: Edit an existing action item by changing its name, modifying its attributes. Add another action item using the Add action button. Change the order of actions within the test by dragging and dropping the action item you want to move using the drag icon. Copy an action item by clicking on the copy icon (except for the Loop action). Delete an action item by clicking on the trash bin icon. If you are done editing your test and all the mandatory fields remain filled, click Save changes .","title":"Editing tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#deleting-tests","text":"Read this section to learn how to delete tests. From the navigation menu, select Device test repository . From the list, select the tests you want to delete. There are two ways to delete the selected tests: Click the Actions drop-down menu and select Delete . Click the context menu on the right and select Delete . In the dialog that appears, click Delete . The test will be permanently deleted and you won't be able to recover it.","title":"Deleting tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#downloading-tests","text":"Read this section to learn how to export tests. From the navigation menu, select Device test repository . From the list, select the test(s) you want to export. There are two ways to download the selected tests: for batch export, click the Actions drop-down menu and select Download tests . for single test export, click the context menu on the right the test entry and select Download test . The tests are downloaded in the .conf format. Tip Edit the exported tests using Windows Notepad or other standard text editor.","title":"Downloading tests"},{"location":"Coiote_IoT_DM/Device_tests/Configure_tests/#previewing-test","text":"Select the test you want to preview. Click the context menu on the right and select Preview test .","title":"Previewing test"},{"location":"Coiote_IoT_DM/Device_tests/Data_model_and_variables/","text":"Device data model and variables # Displaying device data model and running simple actions # Coiote IoT DM gives you the possibility to view and perform actions on the data model of individual devices defined by the LwM2M protocol. This view is available under the Objects panel of your device. Read this chapter to learn how to use the panel. Search - use it to find a particular object. To find the object, type its name. If checked, the changes you make to device objects will be applied immediately. Otherwise, you will have to wait for the device to trigger action execution or use the Execute tasks button (for devices in non-queue mode). Note The Apply immediately option is only available for devices in non-queue mode. Use this button to add a new LwM2M object definition. Division into objects. The info icon - click it to see the object description. Managing instances: [A] - Use it to select another instance of an object if the object has instances. [B] - Use it to add a new instance if an object allows it. [C] - Use it to select another instance or remove it. Search - use it to find a particular resource. To find the resource, type its name. Use it to refresh data, track values (send an Observe task) and add additional attributes to a selected instance. Use it to refresh data, track values (send an Observe task) and add additional attributes to a selected object. The table with resources of an object instance. Note The icon displaying the status of execution is available after clicking on one of the action buttons located in the Actions column. If you click it, you will see additional information about execution. Use it to refresh the resource. Value tracking - use it to send an Observe task to the device and configure monitoring to collect data. Attributes - use it to edit resource attributes or add new ones. Use it to edit a value of a resource. Execute - use it to send an Execute task to the device. Click the icon next to the button to add additional parameters. Managing device variables # Use the Variables panel to add custom variables onto your device for the purpose of protocol tests and view the existing variables that the device has inherited. To enter the Variables panel, go to Device Management Center by clicking on a selected device name and choose the Variables tab. Important If the Variables tab is not visible in your Device Management Center , click the Configure visible tabs icon, drag and drop the Variables tab into the Selected tabs column, and click Confirm . The Custom device variables list shows the variables that belong to this particular device. To add a variable, click on Add , provide its name and value, and click Save . Note that every custom variable that you add will have the VARIABLE_ prefix. To delete a previously added variable, click the Trash bin icon and click Save . The Inherited variables list shows only the variables that the device inherits from the groups of devices that it belongs to. The list is view-only. To add a variable to this list, go to Device Groups and, in the Profiles panel, add an entry with the name beginning with VARIABLE_ . To search for variables in the table, use the search field above it. To export existing variables, click the Export button. A .variables file will be downloaded onto your local drive. To import variables, click the Import button. From your local drive, select a .variables file with variables. Any new variables contained in the file will be imported into the Custom device variables table Using variables in test actions # To use device variables, enter the expression context by typing ${variable.<variableName>} while defining a test action. Remember that each variable is treated as a string, therefore, to use it as a different data type, you will have to cast it to the appropriate type.\u2003 Using variables - example # Learn how to use device variables in Device tests in a few steps: Use case: Testing the WRITE action on the LwM2M Server.1.Lifetime resource. Add the variable: In Device inventory , click on a selected device name to enter its Device Management Center . Select the Variables tab. Tip If the Variables tab is not visible in the menu, use the settings button under the menu to add it: drag it from Available tabs and drop it in Selected tabs and click Confirm . Click on Add and provide the following: Name: lifetime120 . Value: 120 . Click Save . Create a test and include the new variable in the appropriate format: To add a new test, follow the steps in Creating your first test section, but including the adjustments below: For example purposes, pick only the Write action. In the Parameter name field, type LwM2M Server.1.Lifetime (note that the path may vary slightly depending on your device data model). In the Value field, type ${variable.lifetime120.toInt} . Tip By default, the variable value is rendered as a string data type. To cast it to the integer data type, .toInt suffix is added to the created expression, as seen above. Run the created test and check if the variable works correctly: To run the test, follow the steps in Running the test on device using the test created in the previous step. After the test is finished, check if the Lifetime resource value has changed on the device: Go to the Objects panel of your device and under the LwM2M Server object, look for the Lifetime resource value: If the value has changed accordingly, the variable can be now reused and populated to any other tests.","title":"Device data model and variables"},{"location":"Coiote_IoT_DM/Device_tests/Data_model_and_variables/#device-data-model-and-variables","text":"","title":"Device data model and variables"},{"location":"Coiote_IoT_DM/Device_tests/Data_model_and_variables/#displaying-device-data-model-and-running-simple-actions","text":"Coiote IoT DM gives you the possibility to view and perform actions on the data model of individual devices defined by the LwM2M protocol. This view is available under the Objects panel of your device. Read this chapter to learn how to use the panel. Search - use it to find a particular object. To find the object, type its name. If checked, the changes you make to device objects will be applied immediately. Otherwise, you will have to wait for the device to trigger action execution or use the Execute tasks button (for devices in non-queue mode). Note The Apply immediately option is only available for devices in non-queue mode. Use this button to add a new LwM2M object definition. Division into objects. The info icon - click it to see the object description. Managing instances: [A] - Use it to select another instance of an object if the object has instances. [B] - Use it to add a new instance if an object allows it. [C] - Use it to select another instance or remove it. Search - use it to find a particular resource. To find the resource, type its name. Use it to refresh data, track values (send an Observe task) and add additional attributes to a selected instance. Use it to refresh data, track values (send an Observe task) and add additional attributes to a selected object. The table with resources of an object instance. Note The icon displaying the status of execution is available after clicking on one of the action buttons located in the Actions column. If you click it, you will see additional information about execution. Use it to refresh the resource. Value tracking - use it to send an Observe task to the device and configure monitoring to collect data. Attributes - use it to edit resource attributes or add new ones. Use it to edit a value of a resource. Execute - use it to send an Execute task to the device. Click the icon next to the button to add additional parameters.","title":"Displaying device data model and running simple actions"},{"location":"Coiote_IoT_DM/Device_tests/Data_model_and_variables/#managing-device-variables","text":"Use the Variables panel to add custom variables onto your device for the purpose of protocol tests and view the existing variables that the device has inherited. To enter the Variables panel, go to Device Management Center by clicking on a selected device name and choose the Variables tab. Important If the Variables tab is not visible in your Device Management Center , click the Configure visible tabs icon, drag and drop the Variables tab into the Selected tabs column, and click Confirm . The Custom device variables list shows the variables that belong to this particular device. To add a variable, click on Add , provide its name and value, and click Save . Note that every custom variable that you add will have the VARIABLE_ prefix. To delete a previously added variable, click the Trash bin icon and click Save . The Inherited variables list shows only the variables that the device inherits from the groups of devices that it belongs to. The list is view-only. To add a variable to this list, go to Device Groups and, in the Profiles panel, add an entry with the name beginning with VARIABLE_ . To search for variables in the table, use the search field above it. To export existing variables, click the Export button. A .variables file will be downloaded onto your local drive. To import variables, click the Import button. From your local drive, select a .variables file with variables. Any new variables contained in the file will be imported into the Custom device variables table","title":"Managing device variables"},{"location":"Coiote_IoT_DM/Device_tests/Data_model_and_variables/#using-variables-in-test-actions","text":"To use device variables, enter the expression context by typing ${variable.<variableName>} while defining a test action. Remember that each variable is treated as a string, therefore, to use it as a different data type, you will have to cast it to the appropriate type.","title":"Using variables in test actions"},{"location":"Coiote_IoT_DM/Device_tests/Data_model_and_variables/#using-variables-example","text":"Learn how to use device variables in Device tests in a few steps: Use case: Testing the WRITE action on the LwM2M Server.1.Lifetime resource. Add the variable: In Device inventory , click on a selected device name to enter its Device Management Center . Select the Variables tab. Tip If the Variables tab is not visible in the menu, use the settings button under the menu to add it: drag it from Available tabs and drop it in Selected tabs and click Confirm . Click on Add and provide the following: Name: lifetime120 . Value: 120 . Click Save . Create a test and include the new variable in the appropriate format: To add a new test, follow the steps in Creating your first test section, but including the adjustments below: For example purposes, pick only the Write action. In the Parameter name field, type LwM2M Server.1.Lifetime (note that the path may vary slightly depending on your device data model). In the Value field, type ${variable.lifetime120.toInt} . Tip By default, the variable value is rendered as a string data type. To cast it to the integer data type, .toInt suffix is added to the created expression, as seen above. Run the created test and check if the variable works correctly: To run the test, follow the steps in Running the test on device using the test created in the previous step. After the test is finished, check if the Lifetime resource value has changed on the device: Go to the Objects panel of your device and under the LwM2M Server object, look for the Lifetime resource value: If the value has changed accordingly, the variable can be now reused and populated to any other tests.","title":"Using variables - example"},{"location":"Coiote_IoT_DM/Device_tests/Getting_started/","text":"Getting started # Start using the Device tests feature right away. This short instruction will help you create your first test, run it on a device and see the execution logs. Prerequisites # A device that is added and registered in the platform. Create your first test # From the navigation menu on the left, select Device test repository and then Server simulator . Click Add test and select Add test manually . Configure your test: Provide a name for your test. Under the Action list , click Add action , select Write from the drop down list and provide data for the following fields: Parameter name : Device.0.Manufacturer , Expected value : Example_manufacturer , Expected response code : 4.05 MethodNotAllowed . Under the Action list , select Read from the drop down list and provide data for the following fields: Parameter name : LwM2M Server.1.Binding , Expected value : U , Expected response code : 2.05 Content . Click Add a new test . Run test on your device # In the Device inventory , select a currently registered device and enter its Device Management Center . In Device Management Center , select the Device tests tab. Note If the Device tests tab is not visible in the menu, use the settings button under the menu to add it: drag it from Available tabs and drop it in Selected tabs and click Confirm . Tick the test you have just created and click Run selected (1) . After a few moments, the execution ends and the test status should change from In progress to Success . Tip The Success status of a test measures the correctness of the device response against the expected test parameters. Depending on the device and tester's needs, there may be tests that are successful when the device responds with a Failure message (similarly to the example presented in this section). Check test execution details # To see execution logs for your tests: While in the Device tests panel, find your test and click its name. Expand the Logs section using the ^ arrow icon to see execution details. Use the Check logs button for each action inside the test to see the highlighted results for this action.","title":"Getting started"},{"location":"Coiote_IoT_DM/Device_tests/Getting_started/#getting-started","text":"Start using the Device tests feature right away. This short instruction will help you create your first test, run it on a device and see the execution logs.","title":"Getting started"},{"location":"Coiote_IoT_DM/Device_tests/Getting_started/#prerequisites","text":"A device that is added and registered in the platform.","title":"Prerequisites"},{"location":"Coiote_IoT_DM/Device_tests/Getting_started/#create-your-first-test","text":"From the navigation menu on the left, select Device test repository and then Server simulator . Click Add test and select Add test manually . Configure your test: Provide a name for your test. Under the Action list , click Add action , select Write from the drop down list and provide data for the following fields: Parameter name : Device.0.Manufacturer , Expected value : Example_manufacturer , Expected response code : 4.05 MethodNotAllowed . Under the Action list , select Read from the drop down list and provide data for the following fields: Parameter name : LwM2M Server.1.Binding , Expected value : U , Expected response code : 2.05 Content . Click Add a new test .","title":"Create your first test"},{"location":"Coiote_IoT_DM/Device_tests/Getting_started/#run-test-on-your-device","text":"In the Device inventory , select a currently registered device and enter its Device Management Center . In Device Management Center , select the Device tests tab. Note If the Device tests tab is not visible in the menu, use the settings button under the menu to add it: drag it from Available tabs and drop it in Selected tabs and click Confirm . Tick the test you have just created and click Run selected (1) . After a few moments, the execution ends and the test status should change from In progress to Success . Tip The Success status of a test measures the correctness of the device response against the expected test parameters. Depending on the device and tester's needs, there may be tests that are successful when the device responds with a Failure message (similarly to the example presented in this section).","title":"Run test on your device"},{"location":"Coiote_IoT_DM/Device_tests/Getting_started/#check-test-execution-details","text":"To see execution logs for your tests: While in the Device tests panel, find your test and click its name. Expand the Logs section using the ^ arrow icon to see execution details. Use the Check logs button for each action inside the test to see the highlighted results for this action.","title":"Check test execution details"},{"location":"Coiote_IoT_DM/Device_tests/Overview/","text":"Overview # Device tests - also known as hardware in the loop tests - is a solution to test the performance of LwM2M devices and is offered as part of the Coiote IoT Device Management platform . Device tests are an essential tool in the development process of device firmware as they can be used for: Validating new functionalities Testing the proper implementation of the LwM2M standard Regression tests to ensure new firmware doesn\u2019t break existing functionality Info The device tests are executed on real hardware . In practice this means you can mimic real-world scenarios by instructing the server to send a series of operations to a device and monitor its behavior. The tests include basic LwM2M server operations such as Read , Write , Execute , Discover , Delete as well as advanced actions such as Loop or Wait to build more complex test cases. The following guide walks you through the basic functionalities of the device tests solution. You will learn how to configure, run and manage your tests.","title":"Overview"},{"location":"Coiote_IoT_DM/Device_tests/Overview/#overview","text":"Device tests - also known as hardware in the loop tests - is a solution to test the performance of LwM2M devices and is offered as part of the Coiote IoT Device Management platform . Device tests are an essential tool in the development process of device firmware as they can be used for: Validating new functionalities Testing the proper implementation of the LwM2M standard Regression tests to ensure new firmware doesn\u2019t break existing functionality Info The device tests are executed on real hardware . In practice this means you can mimic real-world scenarios by instructing the server to send a series of operations to a device and monitor its behavior. The tests include basic LwM2M server operations such as Read , Write , Execute , Discover , Delete as well as advanced actions such as Loop or Wait to build more complex test cases. The following guide walks you through the basic functionalities of the device tests solution. You will learn how to configure, run and manage your tests.","title":"Overview"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/","text":"Run tests # If you have tests configured in the platform, you can run them on your device using the Device tests panel. Read this chapter to learn how to display test descriptions, start and stop test execution and view test results and logs. Device tests panel description # The Device tests panel is available in the Device Management Center individually for each device. To access it, select a device in Device Inventory to enter its Device Management Center and select Device tests from the menu on the left. Tip If the Device tests tab is not visible in the menu, use the Configure visible tabs button under the menu to add it: drag the tab from Available tabs , drop it in Selected tabs and click Confirm . Read this section to learn about the main components that it comprises. Test list \u2013 views all the tests available for a given device. It is searchable and can be filtered. Info icon \u2013 hover over this icon to see test description. 'Select all' checkbox \u2013 use this checkbox to select all items visible in the list. Note that if you filter or search the list, the previously made selection you will be kept nonetheless. In such a case, the number of selected tests visible in the Run selected button will be their total count, which may not correspond to the number of selections in your filtered list view. Status \u2013 use this field to filter your list view by test execution status. Type - use this field to filter your list view by test type ( Automated or Semi-manual ). Search \u2013 use this field to search among the listed tests by their name. Start typing to get matching results. Show report - use this button to view a summary of tests commissioned for your devices along with test success rate. To get the report in the CSV format, select the Download summary file button. 'Run selected (_)' button \u2013 use it to start the execution of previously selected tests. The number of tests to be run is shown in brackets. Displaying test description # Read this section to learn how to display details of tests. In Device Inventory , find your device in the list and click on its name. In Device Management Center , select the Device tests tab. Select a test and click on its name to enter the detailed view. Starting tests # Read this section to learn how to start the execution of tests on a device. In Device Inventory , find your device in the list and click on its name. In Device Management Center , select the Device tests tab. Select the tests you want to run and click Run selected (_) . Note Even if you leave the Device tests panel, tests once run will continue until all are finished or stopped. Stopping tests # Read this section to learn how to stop the execution of tests on a device. With the tests running, go to Device Inventory . Find your device in the list and click on its name. In Device Management Center , select the Device tests tab. Click the Cancel all tests button located inside the footer bar. Test execution will be stopped. Note Tests completed before you hit the Cancel all tests button will display their execution status. Test statuses and logs # Test statuses # Test statuses are labels attached to tests that help to identify their state in each stage of their execution. There are eight available test statuses: New \u2013 a test that has been recently added and has not been scheduled nor executed. NotScheduled \u2013 a test that has never been picked for execution. NotTested \u2013 a test that has been picked for execution, but its execution has not started due to some error or test execution interruption. Pending \u2013 a test whose execution is pending. In progress \u2013 a test whose execution is under way. Halted \u2013 a test whose execution is temporarily stopped. Warning \u2013 a test that has finished with error(s). Success \u2013 a test that has finished with success. Tip Statuses are available both for tests after execution as well as for individual actions inside a test. To view test results for individual actions, enter the finished test and see the action list. Test logs # Logs store detailed information on the test execution and can be displayed after its completion. To display the logs for an individual test, enter the test and click Check logs or expand the Logs list. If there are many logs from a selected period of time, use Scroll to the bottom and Scroll to the top links to navigate. If a log entry is long, not all lines are displayed at once. To see more lines, click the Show \u2026 lines/characters more link. To display only particular logs and logs of a higher level, use Show from level list . To wrap words of logs, select the Word wrap checkbox. To format messages in a more readable way, select the Format messages checkbox. To see which messages were received (green color) and which were sent (blue color), select the Color messages checkbox. To download logs from a particular period of time matching with used filters, click the Download button.","title":"Run tests"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#run-tests","text":"If you have tests configured in the platform, you can run them on your device using the Device tests panel. Read this chapter to learn how to display test descriptions, start and stop test execution and view test results and logs.","title":"Run tests"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#device-tests-panel-description","text":"The Device tests panel is available in the Device Management Center individually for each device. To access it, select a device in Device Inventory to enter its Device Management Center and select Device tests from the menu on the left. Tip If the Device tests tab is not visible in the menu, use the Configure visible tabs button under the menu to add it: drag the tab from Available tabs , drop it in Selected tabs and click Confirm . Read this section to learn about the main components that it comprises. Test list \u2013 views all the tests available for a given device. It is searchable and can be filtered. Info icon \u2013 hover over this icon to see test description. 'Select all' checkbox \u2013 use this checkbox to select all items visible in the list. Note that if you filter or search the list, the previously made selection you will be kept nonetheless. In such a case, the number of selected tests visible in the Run selected button will be their total count, which may not correspond to the number of selections in your filtered list view. Status \u2013 use this field to filter your list view by test execution status. Type - use this field to filter your list view by test type ( Automated or Semi-manual ). Search \u2013 use this field to search among the listed tests by their name. Start typing to get matching results. Show report - use this button to view a summary of tests commissioned for your devices along with test success rate. To get the report in the CSV format, select the Download summary file button. 'Run selected (_)' button \u2013 use it to start the execution of previously selected tests. The number of tests to be run is shown in brackets.","title":"Device tests panel description"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#displaying-test-description","text":"Read this section to learn how to display details of tests. In Device Inventory , find your device in the list and click on its name. In Device Management Center , select the Device tests tab. Select a test and click on its name to enter the detailed view.","title":"Displaying test description"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#starting-tests","text":"Read this section to learn how to start the execution of tests on a device. In Device Inventory , find your device in the list and click on its name. In Device Management Center , select the Device tests tab. Select the tests you want to run and click Run selected (_) . Note Even if you leave the Device tests panel, tests once run will continue until all are finished or stopped.","title":"Starting tests"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#stopping-tests","text":"Read this section to learn how to stop the execution of tests on a device. With the tests running, go to Device Inventory . Find your device in the list and click on its name. In Device Management Center , select the Device tests tab. Click the Cancel all tests button located inside the footer bar. Test execution will be stopped. Note Tests completed before you hit the Cancel all tests button will display their execution status.","title":"Stopping tests"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#test-statuses-and-logs","text":"","title":"Test statuses and logs"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#test-statuses","text":"Test statuses are labels attached to tests that help to identify their state in each stage of their execution. There are eight available test statuses: New \u2013 a test that has been recently added and has not been scheduled nor executed. NotScheduled \u2013 a test that has never been picked for execution. NotTested \u2013 a test that has been picked for execution, but its execution has not started due to some error or test execution interruption. Pending \u2013 a test whose execution is pending. In progress \u2013 a test whose execution is under way. Halted \u2013 a test whose execution is temporarily stopped. Warning \u2013 a test that has finished with error(s). Success \u2013 a test that has finished with success. Tip Statuses are available both for tests after execution as well as for individual actions inside a test. To view test results for individual actions, enter the finished test and see the action list.","title":"Test statuses"},{"location":"Coiote_IoT_DM/Device_tests/Run_tests/#test-logs","text":"Logs store detailed information on the test execution and can be displayed after its completion. To display the logs for an individual test, enter the test and click Check logs or expand the Logs list. If there are many logs from a selected period of time, use Scroll to the bottom and Scroll to the top links to navigate. If a log entry is long, not all lines are displayed at once. To see more lines, click the Show \u2026 lines/characters more link. To display only particular logs and logs of a higher level, use Show from level list . To wrap words of logs, select the Word wrap checkbox. To format messages in a more readable way, select the Format messages checkbox. To see which messages were received (green color) and which were sent (blue color), select the Color messages checkbox. To download logs from a particular period of time matching with used filters, click the Download button.","title":"Test logs"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/","text":"Test actions # Introduction # Based on the LwM2M 1.0 standard protocol operations, Actions are steps that can be defined within a test. While some are used for the communication between the Server and the LwM2M test device, others help to define the test logic. Read this chapter to learn how to use Actions in the configuration of customizable device tests. Action attributes # All the available Actions are defined using a set of configurable attributes that you can specify while adding or editing a test. The attributes available under each action are determined by the type of given Action. However, to set up a test, not all attributes are mandatory. The general rule is that if you leave an optional attribute\u2019s field blank, the final test result won\u2019t be affected in any way. Tip if you would like to make the test device ignore a particular attribute so that it doesn\u2019t answer to the server request, type None in the optional attribute\u2019s field. Description of Actions # Within the Server simulator tests, the following Actions are available. READ # READ is used to access the value of an object, object instances, a resource and single resource instances. You can define it using four attributes: Parameter name \u2013 the name of the data model parameter you want to read. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected value \u2013 if the value you enter here equals the value read from the device, the test will be passed. If left blank, the value will only show up in the test log and it will have no impact on the test result. Note that this READ attribute works only for Resources and Resource Instances. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. LwM2M: Requested content format \u2013 the content format of the device answer that you request for your read operation. If the device doesn\u2019t support the requested format, the test will fail. If left blank, the device can decide what content format to use; any format will be accepted. WRITE # WRITE is used to change the value of a Resource. You can define it using four attributes: Parameter name \u2013 the name of the data model parameter for which you want to set a new value or overwrite the existing one. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Value \u2013 the value you enter here sets a new value or overwrites the existing one. If left blank, the existing value will be kept and the test will be passed. LwM2M: Content format \u2013 the content format in which you send the write request to the device. If the device doesn\u2019t support the specified format, the test will fail. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. EXECUTE # EXECUTE is used to initiate some action and can only be performed on individual Resources. If the device receives an EXECUTE for an Object Instance(s) or Resource Instance(s), it will return an error. You can define it using two attributes: Parameter name \u2013 the name of the data model parameter for which you will issue an execute. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Execute arguments \u2013 the execution arguments passed to the device expressed in Plain Text format. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. DISCOVER # DISCOVER is used to discover LwM2M Attributes attached to an Object, Object Instances, and Resources. You can define it using two attributes: Parameter name \u2013 the name of the data model parameter whose attributes you want to discover. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. DELETE # DELETE is used for the server to delete an Object Instance within the LwM2M Client. Note that an Object Instance to be deleted must be an Object Instance that is announced by the Client to the Server using the Register and Update operations of the Client Registration Interface. Object instance \u2013 the object instance that you want to delete. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0) or the numerical (e.g. 3.0) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. CREATE # CREATE is used by the Server simulator to create Object Instance(s) within the LwM2M Client. You can define the action using three parameters and a set of Object Instance-dependent values: Object ID or name \u2013 the Object that you want to create an Instance for. Note that it can be specified either using the full name in the string (e.g. \u2018Portfolio\u2019) or the numerical (e.g. \u201816\u2019) value of the parameter. LwM2M: Instance number \u2013 the number assigned to the Object Instance to be created. If left blank, the number will be chosen by the device. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Resources \u2013 click the Provide initial values button to view and specify the possible Resources and Resource Instances of the Object Instance to be created. Note that if the values marked as required are left blank, the action will fail for devices that correctly implement LwM2M. WRITE ATTRIBUTES # WRITE ATTRIBUTES is used to attach metadata containing parameters for Notifications to an Object, an Object Instance or a Resource. You can define it using seven attributes: Parameter name \u2013 the name of the data model parameter for which you will write attributes. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Minimum period \u2013 the minimum time in seconds that the device waits between two notifications. Maximum period \u2013 the minimum time in seconds that the device waits between two notifications. Value greater than \u2013 notifications will be sent only when the monitored value crosses the threshold you set here. However, please note that the interpretation of this parameter may differ depending on the specific LwM2M Client implementation. Value less than \u2013 notifications will be sent only when the monitored value crosses the threshold you set here. However, please note that the interpretation of this parameter may differ depending on the specific LwM2M Client implementation. Step \u2013 the minimum change value between two notifications. CLEAR ATTRIBUTES # CLEAR ATTRIBUTES is used to clear the metadata attached to an Object, an Object Instance or a Resource which contain parameters for Notifications. You can define it using seven attributes: Parameter name \u2013 the name of the data model parameter for which you will clear attributes. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Clear minimum period \u2013 if set to true, it clears the minimum time in seconds between two notifications. If set to false, the value is kept. Clear maximum period \u2013 if set to true, it clears the maximum time set between two notifications. If set to false, the value is kept. Clear value greater than \u2013 if set to true, it clears the threshold set for the monitored value. If set to false, the value is kept. Clear value less than \u2013 if set to true, it clears the threshold set for the monitored value. If set to false, the value is kept. Clear step \u2013 if set to true, it clears the minimum change value between two notifications. If set to false, the value is kept. OBSERVE # OBSERVE is used to initiate an observation request for changes of a specific Resource, Resources within an Object Instance or for all the Object Instances of an Object. You can define it using four attributes: Parameter name \u2013 the name of the data model parameter whose value(s) you will observe. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Fail if already observed \u2013 if set to true, the test will fail in case there is an existing observation set on this parameter. In case there is no observation set, your observe request should be accepted and the test won\u2019t fail. If set to false, any existing observations will be cancelled and requested again by this one and the test will be passed. LwM2M: Content format \u2013 the content format in which you send the OBSERVE request to the device. If the device doesn\u2019t support the specified format, the test will fail. CANCEL OBSERVE # CANCEL OBSERVE is used to cancel an observation. You can define it using three attributes: Parameter name \u2013 the name of the data model parameter for which you will cancel an existing observation. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Cancel type \u2013 the mode in which the CANCEL OBSERVE will be sent to the device. o ACTIVE - CANCEL OBSERVE is sent to the device immediately. o PASSIVE - CoAP RESET is sent in response to the next notification message received from the device. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Firmware Update # Firmware Update is used to perform a firmware update operation on the test device. You can define it using five attributes: Firmware \u2013 the ID of the resource used as the firmware source. Update timeout \u2013 the time period in seconds within which the firmware update should be completed. In case the timeout is up and the update process has not finished, the action will fail. Delivery method \u2013 The protocol and transfer method used to deliver the firmware file to the device. Use notifications \u2013 if set to true, an OBSERVE will be issued automatically for the \u2018State\u2019 and \u2018Update result\u2019 parameters while upgrading the device. The notifications returned by the device will be visible in the test logs. Expected update result \u2013 if the update result you enter here equals the result returned by the device, the test will be passed. If left blank, the server will expect the default result defined by the LwM2M standard. You can choose among the ten update results defined as per the LwM2M protocol specification. WAIT # Wait is used to set the waiting time before executing the next action. You can define it using two attributes: Waiting time \u2013 the interval set before the next action is executed. In progress message \u2013 a custom text that will be displayed as the test progress message while waiting for the execution of the next action. Pause response # Pause response is used to delay a response to be sent to the device. If set, the server will wait before sending the response until the Send paused response action is executed. Request type \u2013 the kind of request for which you want to pause the response. Wait for uplink request # Wait for uplink request is used to prevent the server from executing any tasks or actions until an uplink request arrives from the device. You can define the action using three attributes: Request type to wait for \u2013 the kind of request you want to wait for. Timeout \u2013 the time period in seconds within which the uplink request should arrive. In case the timeout is up with no request, the action will fail. Waiting message \u2013 the message displayed during the test execution while waiting for the arrival of the uplink request. Send paused response # Send paused response is used to send the previously paused response to the device. Request type \u2013 the kind of request for which you want to send the previously paused response. Start Notification recording # Start Notification recording is used to make the Server simulator save all notifications received from the device in its memory. The limit of recorded notifications can be configured using the ddscNotificationRecordingLimit setting value. Once the limit is reached, new notifications are not recorded. Execute the Start Notification recording action again in the same test to clear the recording state and to be able to match more notifications than the recording limit. Expect Notification # Expect Notification is used to check if recorded Notifications match the required criteria. You can define it using five attributes: Expected path \u2013 only notifications that were received on this path will be validated. In case of a notification with multiple paths and values, each path and value are treated as separate notifications. Expected value \u2013 use it to check if there is any notification that has a given value and matches all other criteria. Expected arrival order \u2013 use it to limit the validation only to one notification on a given path that arrived in a given order since the last Start Notification recording action. Note that the counting starts from 0 and that the Observe response is also counted if it is executed after the recording action started. Timeout \u2013 if the expected notification does not arrive within this time limit, the action will fail. Waiting message \u2013 a custom text that will be displayed as the test progress message while waiting for the action execution. Start Send recording # Start Send recording is used to make the Server simulator save all Send messages sent from device in its memory. The limit of recorded Send messages can be configured using the ddscSendRecordingLimit setting value. Once the limit is reached, new Send messages are not recorded. Execute the Start Send recording action again in the same test to clear the recording state and to be able to match more Send messages than the recording limit. Expect Send # Expect Send is used to check if recorded Send messages match the required criteria. You can define it using five attributes: Expected path \u2013 only Send messages that were received on this path will be validated. In case of a Send message with multiple paths and values, each path and value are treated as separate messages. Expected value \u2013 use it to check if there is any Send message that has a given value and matches all other criteria. Expected arrival order \u2013 use it to limit the validation only to one Send message on a given path that was sent in a given order since the last Start Send recording action. Timeout \u2013 if the expected Send message does not arrive within this time limit, the action fails. Waiting message \u2013 a custom text that is displayed as the test progress message while waiting for the action execution. Loop start # Loop start is used to repeat an action or a set of actions within a test. Note that when configuring the first action inside the loop, the Loop end action is added automatically. Repetitions \u2013 the number of iterations of action(s) inside the loop.","title":"Test actions"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#test-actions","text":"","title":"Test actions"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#introduction","text":"Based on the LwM2M 1.0 standard protocol operations, Actions are steps that can be defined within a test. While some are used for the communication between the Server and the LwM2M test device, others help to define the test logic. Read this chapter to learn how to use Actions in the configuration of customizable device tests.","title":"Introduction"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#action-attributes","text":"All the available Actions are defined using a set of configurable attributes that you can specify while adding or editing a test. The attributes available under each action are determined by the type of given Action. However, to set up a test, not all attributes are mandatory. The general rule is that if you leave an optional attribute\u2019s field blank, the final test result won\u2019t be affected in any way. Tip if you would like to make the test device ignore a particular attribute so that it doesn\u2019t answer to the server request, type None in the optional attribute\u2019s field.","title":"Action attributes"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#description-of-actions","text":"Within the Server simulator tests, the following Actions are available.","title":"Description of Actions"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#read","text":"READ is used to access the value of an object, object instances, a resource and single resource instances. You can define it using four attributes: Parameter name \u2013 the name of the data model parameter you want to read. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected value \u2013 if the value you enter here equals the value read from the device, the test will be passed. If left blank, the value will only show up in the test log and it will have no impact on the test result. Note that this READ attribute works only for Resources and Resource Instances. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. LwM2M: Requested content format \u2013 the content format of the device answer that you request for your read operation. If the device doesn\u2019t support the requested format, the test will fail. If left blank, the device can decide what content format to use; any format will be accepted.","title":"READ"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#write","text":"WRITE is used to change the value of a Resource. You can define it using four attributes: Parameter name \u2013 the name of the data model parameter for which you want to set a new value or overwrite the existing one. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Value \u2013 the value you enter here sets a new value or overwrites the existing one. If left blank, the existing value will be kept and the test will be passed. LwM2M: Content format \u2013 the content format in which you send the write request to the device. If the device doesn\u2019t support the specified format, the test will fail. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard.","title":"WRITE"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#execute","text":"EXECUTE is used to initiate some action and can only be performed on individual Resources. If the device receives an EXECUTE for an Object Instance(s) or Resource Instance(s), it will return an error. You can define it using two attributes: Parameter name \u2013 the name of the data model parameter for which you will issue an execute. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Execute arguments \u2013 the execution arguments passed to the device expressed in Plain Text format. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard.","title":"EXECUTE"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#discover","text":"DISCOVER is used to discover LwM2M Attributes attached to an Object, Object Instances, and Resources. You can define it using two attributes: Parameter name \u2013 the name of the data model parameter whose attributes you want to discover. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard.","title":"DISCOVER"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#delete","text":"DELETE is used for the server to delete an Object Instance within the LwM2M Client. Note that an Object Instance to be deleted must be an Object Instance that is announced by the Client to the Server using the Register and Update operations of the Client Registration Interface. Object instance \u2013 the object instance that you want to delete. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0) or the numerical (e.g. 3.0) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard.","title":"DELETE"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#create","text":"CREATE is used by the Server simulator to create Object Instance(s) within the LwM2M Client. You can define the action using three parameters and a set of Object Instance-dependent values: Object ID or name \u2013 the Object that you want to create an Instance for. Note that it can be specified either using the full name in the string (e.g. \u2018Portfolio\u2019) or the numerical (e.g. \u201816\u2019) value of the parameter. LwM2M: Instance number \u2013 the number assigned to the Object Instance to be created. If left blank, the number will be chosen by the device. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Resources \u2013 click the Provide initial values button to view and specify the possible Resources and Resource Instances of the Object Instance to be created. Note that if the values marked as required are left blank, the action will fail for devices that correctly implement LwM2M.","title":"CREATE"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#write-attributes","text":"WRITE ATTRIBUTES is used to attach metadata containing parameters for Notifications to an Object, an Object Instance or a Resource. You can define it using seven attributes: Parameter name \u2013 the name of the data model parameter for which you will write attributes. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Minimum period \u2013 the minimum time in seconds that the device waits between two notifications. Maximum period \u2013 the minimum time in seconds that the device waits between two notifications. Value greater than \u2013 notifications will be sent only when the monitored value crosses the threshold you set here. However, please note that the interpretation of this parameter may differ depending on the specific LwM2M Client implementation. Value less than \u2013 notifications will be sent only when the monitored value crosses the threshold you set here. However, please note that the interpretation of this parameter may differ depending on the specific LwM2M Client implementation. Step \u2013 the minimum change value between two notifications.","title":"WRITE ATTRIBUTES"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#clear-attributes","text":"CLEAR ATTRIBUTES is used to clear the metadata attached to an Object, an Object Instance or a Resource which contain parameters for Notifications. You can define it using seven attributes: Parameter name \u2013 the name of the data model parameter for which you will clear attributes. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Clear minimum period \u2013 if set to true, it clears the minimum time in seconds between two notifications. If set to false, the value is kept. Clear maximum period \u2013 if set to true, it clears the maximum time set between two notifications. If set to false, the value is kept. Clear value greater than \u2013 if set to true, it clears the threshold set for the monitored value. If set to false, the value is kept. Clear value less than \u2013 if set to true, it clears the threshold set for the monitored value. If set to false, the value is kept. Clear step \u2013 if set to true, it clears the minimum change value between two notifications. If set to false, the value is kept.","title":"CLEAR ATTRIBUTES"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#observe","text":"OBSERVE is used to initiate an observation request for changes of a specific Resource, Resources within an Object Instance or for all the Object Instances of an Object. You can define it using four attributes: Parameter name \u2013 the name of the data model parameter whose value(s) you will observe. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard. Fail if already observed \u2013 if set to true, the test will fail in case there is an existing observation set on this parameter. In case there is no observation set, your observe request should be accepted and the test won\u2019t fail. If set to false, any existing observations will be cancelled and requested again by this one and the test will be passed. LwM2M: Content format \u2013 the content format in which you send the OBSERVE request to the device. If the device doesn\u2019t support the specified format, the test will fail.","title":"OBSERVE"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#cancel-observe","text":"CANCEL OBSERVE is used to cancel an observation. You can define it using three attributes: Parameter name \u2013 the name of the data model parameter for which you will cancel an existing observation. Note that it can be specified either using the full name in the string (e.g. \u2018Device.0.Manufacturer) or the numerical (e.g. 3.0.1) value of the parameter. Cancel type \u2013 the mode in which the CANCEL OBSERVE will be sent to the device. o ACTIVE - CANCEL OBSERVE is sent to the device immediately. o PASSIVE - CoAP RESET is sent in response to the next notification message received from the device. Expected response code \u2013 if the response code you enter here equals the response code returned by the device, the test will be passed. If left blank, the server will expect the default response code defined by the LwM2M standard.","title":"CANCEL OBSERVE"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#firmware-update","text":"Firmware Update is used to perform a firmware update operation on the test device. You can define it using five attributes: Firmware \u2013 the ID of the resource used as the firmware source. Update timeout \u2013 the time period in seconds within which the firmware update should be completed. In case the timeout is up and the update process has not finished, the action will fail. Delivery method \u2013 The protocol and transfer method used to deliver the firmware file to the device. Use notifications \u2013 if set to true, an OBSERVE will be issued automatically for the \u2018State\u2019 and \u2018Update result\u2019 parameters while upgrading the device. The notifications returned by the device will be visible in the test logs. Expected update result \u2013 if the update result you enter here equals the result returned by the device, the test will be passed. If left blank, the server will expect the default result defined by the LwM2M standard. You can choose among the ten update results defined as per the LwM2M protocol specification.","title":"Firmware Update"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#wait","text":"Wait is used to set the waiting time before executing the next action. You can define it using two attributes: Waiting time \u2013 the interval set before the next action is executed. In progress message \u2013 a custom text that will be displayed as the test progress message while waiting for the execution of the next action.","title":"WAIT"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#pause-response","text":"Pause response is used to delay a response to be sent to the device. If set, the server will wait before sending the response until the Send paused response action is executed. Request type \u2013 the kind of request for which you want to pause the response.","title":"Pause response"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#wait-for-uplink-request","text":"Wait for uplink request is used to prevent the server from executing any tasks or actions until an uplink request arrives from the device. You can define the action using three attributes: Request type to wait for \u2013 the kind of request you want to wait for. Timeout \u2013 the time period in seconds within which the uplink request should arrive. In case the timeout is up with no request, the action will fail. Waiting message \u2013 the message displayed during the test execution while waiting for the arrival of the uplink request.","title":"Wait for uplink request"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#send-paused-response","text":"Send paused response is used to send the previously paused response to the device. Request type \u2013 the kind of request for which you want to send the previously paused response.","title":"Send paused response"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#start-notification-recording","text":"Start Notification recording is used to make the Server simulator save all notifications received from the device in its memory. The limit of recorded notifications can be configured using the ddscNotificationRecordingLimit setting value. Once the limit is reached, new notifications are not recorded. Execute the Start Notification recording action again in the same test to clear the recording state and to be able to match more notifications than the recording limit.","title":"Start Notification recording"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#expect-notification","text":"Expect Notification is used to check if recorded Notifications match the required criteria. You can define it using five attributes: Expected path \u2013 only notifications that were received on this path will be validated. In case of a notification with multiple paths and values, each path and value are treated as separate notifications. Expected value \u2013 use it to check if there is any notification that has a given value and matches all other criteria. Expected arrival order \u2013 use it to limit the validation only to one notification on a given path that arrived in a given order since the last Start Notification recording action. Note that the counting starts from 0 and that the Observe response is also counted if it is executed after the recording action started. Timeout \u2013 if the expected notification does not arrive within this time limit, the action will fail. Waiting message \u2013 a custom text that will be displayed as the test progress message while waiting for the action execution.","title":"Expect Notification"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#start-send-recording","text":"Start Send recording is used to make the Server simulator save all Send messages sent from device in its memory. The limit of recorded Send messages can be configured using the ddscSendRecordingLimit setting value. Once the limit is reached, new Send messages are not recorded. Execute the Start Send recording action again in the same test to clear the recording state and to be able to match more Send messages than the recording limit.","title":"Start Send recording"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#expect-send","text":"Expect Send is used to check if recorded Send messages match the required criteria. You can define it using five attributes: Expected path \u2013 only Send messages that were received on this path will be validated. In case of a Send message with multiple paths and values, each path and value are treated as separate messages. Expected value \u2013 use it to check if there is any Send message that has a given value and matches all other criteria. Expected arrival order \u2013 use it to limit the validation only to one Send message on a given path that was sent in a given order since the last Start Send recording action. Timeout \u2013 if the expected Send message does not arrive within this time limit, the action fails. Waiting message \u2013 a custom text that is displayed as the test progress message while waiting for the action execution.","title":"Expect Send"},{"location":"Coiote_IoT_DM/Device_tests/Test_actions/#loop-start","text":"Loop start is used to repeat an action or a set of actions within a test. Note that when configuring the first action inside the loop, the Loop end action is added automatically. Repetitions \u2013 the number of iterations of action(s) inside the loop.","title":"Loop start"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/","text":"Jenkins/GitLab integration with device tests API # If you would like to automate your device tests, you can use the Coiote IoT DM API and integrate it with a CI/CD environment like Jenkins or GitLab. Follow the guide below to learn how to configure the integration, run tests and summarize your test execution using these tools. Note The following instruction is based on integration with Jenkins. To integrate with GitLab, you can follow the same steps, but with slight adjustments - for details, please see subsection on GitLab . Prerequisites # An active Jenkins and GitLab account. A Git project repository. A working Coiote IoT DM installation and a port for communication with the installation API. A device registered in the platform (if the tests require the device to be registered). A Coiote IoT DM user with access to the device and the appropriate API permissions. Jenkins - standard pipeline # Set up standard pipeline # Upload a file with python script used to run tests to your project repository: Edit the following python script where required to adjust it to your environment (remember to select the appropriate tab with script depending on whether you want to run your tests on a single device or a device group). Device #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_NAME = \"test-device\" # type the endpoint name of your device. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the device. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/device/\" + DEVICE_NAME REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/device/\" + DEVICE_NAME PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = result . json ()[ \"waitingForExecution\" ] time . sleep ( 15 ) for test in result . json ()[ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Group #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_GROUP = \"root.mt.embedded.devicetypes.test.demo_client.2_9_0\" # type the name of your device group. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the group. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/group/\" + DEVICE_GROUP REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/group/\" + DEVICE_GROUP PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : still_running = 0 result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) exit ( 1 ) for device in result . json (): if not ( result . json ()[ device ][ \"waitingForExecution\" ] == []): still_running += 1 if ( still_running == 0 ): tests_running = False time . sleep ( 15 ) for device in result . json (): for test in result . json ()[ device ][ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ device ][ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ device ][ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Save the script as a .py file and upload it to your project repository. Create a pipeline for your project: Go to your Jenkins account and in the Dashboard view, select New Item from the menu on the left. Enter a name for your pipeline, select Pipeline , and confirm by clicking OK . Configure your pipeline: Go to your newly created pipeline and select Configure from the menu on the left. In the Source Code Management section, select the Git option and provide the following: Repository URL - enter the URL address of your GitLab repository that hosts the python script file from Step 1 . Credentials - add the user name and password of your git repository account. Branch Specifier - choose the GitLab branch you want to use in the pipeline. In the Build section, select the Execute Shell option from the drop-down list and provide the command to run the python script file from Step 1 : python3 example_filename.py Additionally, in the Post-build Actions section, select the Publish Junit test result report to set up test result report generation: Depending on your preferences, check or uncheck the Allow empty results option. Click Save . Run standard pipeline # Enter pipeline and select Build Now . Note Remember to check if the device you run the tests for is connected and registered in Coiote IoT DM. Once the tests are performed, you will see your build status along with a graph reporting the execution status for each test. Jenkins multibranch pipeline # Set up multibranch pipeline # Alternatively to the standard pipeline, you may configure a multibranch pipeline to run your tests. Upload the Jenkinsfile that will define your multibranch pipeline to your project repository: Edit the script where required to adjust it to your environment: Note Remember to change the name example_filename.py to your custom name that you will choose in Step 2 . pipeline { options { disableConcurrentBuilds () } agent any stages { stage ( 'protocol_tests' ) { steps { sh 'python3 example_filename.py' } } } post { always { junit \"report.xml\" archiveArtifacts artifacts : 'report.xml' } cleanup { script { clean () } } } } Save the file as Jenkinsfile and upload it to the chosen branch of your project repository. Upload a file with python script used to run tests to your project repository: Edit the following python script where required to adjust it to your environment (remember to select the appropriate tab with script depending on whether you want to run your tests on a single device or a device group). Device #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_NAME = \"test-device\" # type the endpoint name of your device. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the device. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/device/\" + DEVICE_NAME REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/device/\" + DEVICE_NAME PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = result . json ()[ \"waitingForExecution\" ] time . sleep ( 15 ) for test in result . json ()[ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Group #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_GROUP = \"root.mt.embedded.devicetypes.test.demo_client.2_9_0\" # type the name of your device group. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the group. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/group/\" + DEVICE_GROUP REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/group/\" + DEVICE_GROUP PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : still_running = 0 result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) exit ( 1 ) for device in result . json (): if not ( result . json ()[ device ][ \"waitingForExecution\" ] == []): still_running += 1 if ( still_running == 0 ): tests_running = False time . sleep ( 15 ) for device in result . json (): for test in result . json ()[ device ][ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ device ][ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ device ][ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Save the script as a .py file (using the filename specified in the Jenkinsfile in the previous step) and upload it to your project repository. Create a pipeline for your project: Go to your Jenkins account and in the Dashboard view, select New Item from the menu on the left. Enter a name for your pipeline, select Multibranch Pipeline and confirm by clicking OK . Configure your pipeline: Go to your newly created pipeline and select Configure from the menu on the left. In the Branch Sources section, select the Git option and provide the following: Project Repository - enter the URL address of your project repository that hosts the Jenkinsfile and the python script file from Step 2 . Credentials - add the user name and password of your GitLab account. In the Build Configuration section, select the by Jenkinsfile mode from the drop-down list and provide the GitLab path to the Jenkinsfile from Step 1 (if the file is located in the GitLab root folder, it is enough to type Jenkinsfile ) Click Save . Run multibranch pipeline # Before running the tests for a chosen branch, you have to perform a scan to detect available branches (those with a Jenkinsfile ): Go to your multibranch pipeline and select Scan Multibranch Pipeline Now option from the menu on the left. Once the scan is completed, you will see a list of available branches. Enter a chosen branch by clicking on its name and select Build Now . Note Remember to check if the device you run the tests for is connected and registered in Coiote IoT DM. Once the tests are performed, you will see your build status along with a graph reporting the execution status for each test. GitLab - configure and run pipeline # Coiote IoT DM interop tests API can also be integrated with GitLab using the GitLab's CI/CD toolset. Here is how to do it: Upload the gitlab-ci.yml file that will define your GitLab pipeline to your project repository: Edit the script where required to adjust it to your environment: Note Remember to change the name example_filename.py to your custom name that you will choose in the next step. Also, keep in mind that running a pipeline in GitLab requires a docker image of a Linux distribution (or any operating system that can run python script). image : name : example.repository.com/docker-local/linux_image protocol-tests : stage : test script : - python3 example_filename.py artifacts : when : always paths : - report.xml reports : junit : report.xml Save the file as gitlab-ci.yml and upload it to the chosen branch of your project repository. Follow Step 2 from Creating a Jenkins multibranch pipeline (uploading a file with python script to your GitLab repository). Run a created pipeline for your project: Go to your GitLab project and in the Dashboard view, select CI/CD from the menu on the left and click Pipelines . Attention Note that to be able to run a pipeline, you will need to have the GitLab CI/CD toolset configured. For details, please check https://docs.gitlab.com/ee/ci/introduction/index.html . You should be able to see the branch with the uploaded gitlab-ci.yml file. Select the Run pipeline button, then confirm again by clicking Run pipeline . Once the pipeline execution is finished, you should be able to see the results in the Tests tab of your pipeline. Note Viewing graphs with test results is not supported in GitLab by default as it requires additional plugins.","title":"Jenkins/GitLab integration with device tests API"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#jenkinsgitlab-integration-with-device-tests-api","text":"If you would like to automate your device tests, you can use the Coiote IoT DM API and integrate it with a CI/CD environment like Jenkins or GitLab. Follow the guide below to learn how to configure the integration, run tests and summarize your test execution using these tools. Note The following instruction is based on integration with Jenkins. To integrate with GitLab, you can follow the same steps, but with slight adjustments - for details, please see subsection on GitLab .","title":"Jenkins/GitLab integration with device tests API"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#prerequisites","text":"An active Jenkins and GitLab account. A Git project repository. A working Coiote IoT DM installation and a port for communication with the installation API. A device registered in the platform (if the tests require the device to be registered). A Coiote IoT DM user with access to the device and the appropriate API permissions.","title":"Prerequisites"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#jenkins-standard-pipeline","text":"","title":"Jenkins - standard pipeline"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#set-up-standard-pipeline","text":"Upload a file with python script used to run tests to your project repository: Edit the following python script where required to adjust it to your environment (remember to select the appropriate tab with script depending on whether you want to run your tests on a single device or a device group). Device #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_NAME = \"test-device\" # type the endpoint name of your device. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the device. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/device/\" + DEVICE_NAME REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/device/\" + DEVICE_NAME PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = result . json ()[ \"waitingForExecution\" ] time . sleep ( 15 ) for test in result . json ()[ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Group #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_GROUP = \"root.mt.embedded.devicetypes.test.demo_client.2_9_0\" # type the name of your device group. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the group. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/group/\" + DEVICE_GROUP REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/group/\" + DEVICE_GROUP PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : still_running = 0 result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) exit ( 1 ) for device in result . json (): if not ( result . json ()[ device ][ \"waitingForExecution\" ] == []): still_running += 1 if ( still_running == 0 ): tests_running = False time . sleep ( 15 ) for device in result . json (): for test in result . json ()[ device ][ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ device ][ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ device ][ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Save the script as a .py file and upload it to your project repository. Create a pipeline for your project: Go to your Jenkins account and in the Dashboard view, select New Item from the menu on the left. Enter a name for your pipeline, select Pipeline , and confirm by clicking OK . Configure your pipeline: Go to your newly created pipeline and select Configure from the menu on the left. In the Source Code Management section, select the Git option and provide the following: Repository URL - enter the URL address of your GitLab repository that hosts the python script file from Step 1 . Credentials - add the user name and password of your git repository account. Branch Specifier - choose the GitLab branch you want to use in the pipeline. In the Build section, select the Execute Shell option from the drop-down list and provide the command to run the python script file from Step 1 : python3 example_filename.py Additionally, in the Post-build Actions section, select the Publish Junit test result report to set up test result report generation: Depending on your preferences, check or uncheck the Allow empty results option. Click Save .","title":"Set up standard pipeline"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#run-standard-pipeline","text":"Enter pipeline and select Build Now . Note Remember to check if the device you run the tests for is connected and registered in Coiote IoT DM. Once the tests are performed, you will see your build status along with a graph reporting the execution status for each test.","title":"Run standard pipeline"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#jenkins-multibranch-pipeline","text":"","title":"Jenkins multibranch pipeline"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#set-up-multibranch-pipeline","text":"Alternatively to the standard pipeline, you may configure a multibranch pipeline to run your tests. Upload the Jenkinsfile that will define your multibranch pipeline to your project repository: Edit the script where required to adjust it to your environment: Note Remember to change the name example_filename.py to your custom name that you will choose in Step 2 . pipeline { options { disableConcurrentBuilds () } agent any stages { stage ( 'protocol_tests' ) { steps { sh 'python3 example_filename.py' } } } post { always { junit \"report.xml\" archiveArtifacts artifacts : 'report.xml' } cleanup { script { clean () } } } } Save the file as Jenkinsfile and upload it to the chosen branch of your project repository. Upload a file with python script used to run tests to your project repository: Edit the following python script where required to adjust it to your environment (remember to select the appropriate tab with script depending on whether you want to run your tests on a single device or a device group). Device #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_NAME = \"test-device\" # type the endpoint name of your device. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the device. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/device/\" + DEVICE_NAME REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/device/\" + DEVICE_NAME PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = result . json ()[ \"waitingForExecution\" ] time . sleep ( 15 ) for test in result . json ()[ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Group #!/usr/bin/python import requests import json import time import xml.etree.cElementTree as ET # ___Edit below___ # DEVICE_GROUP = \"root.mt.embedded.devicetypes.test.demo_client.2_9_0\" # type the name of your device group. INSTALLATION_URL = \"https://lwm2m-test.avsystem.io\" # provide the URL of your Coiote IoT DM installation. INSTALLATION_API_PORT = \"8087\" # provide the port for communication with the API. The default value is `8087`. CREDENTIALS = ( 'user_login' , 'password' ) # provide user name and password of your Coiote IoT DM user account. TEST_NAMES = { # type the names of the tests that you want to execute on the group. \"testCases\" :[ \"protocol_test_1\" , \"protocol_test_2\" , \"protocol_test_3\" , \"protocol_test_4\" , \"protocol_test_5\" , ] } # ___Edit above___ # SCHEDULE_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/schedule/group/\" + DEVICE_GROUP REPORT_URL = INSTALLATION_URL + \":\" + INSTALLATION_API_PORT + \"/api/coiotedm/v3/protocolTests/report/group/\" + DEVICE_GROUP PARAMS = { 'accept' : 'application/json' , 'Content-Type' : 'application/json' } root = ET . Element ( \"testsuite\" ) result = requests . post ( url = SCHEDULE_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 201 : print ( 'Could not schedule the tests.' ) print ( 'Server returned: ' + str ( result . status_code )) print ( 'Error message: ' + str ( result . json ()[ 'error' ])) exit ( 1 ) tests_running = True while tests_running : still_running = 0 result = requests . post ( url = REPORT_URL , json = TEST_NAMES , auth = CREDENTIALS , params = PARAMS ) if result . status_code != 200 : print ( 'Could not read the tests status.' ) print ( 'Server returned: ' + str ( result . status_code )) exit ( 1 ) for device in result . json (): if not ( result . json ()[ device ][ \"waitingForExecution\" ] == []): still_running += 1 if ( still_running == 0 ): tests_running = False time . sleep ( 15 ) for device in result . json (): for test in result . json ()[ device ][ 'failed' ]: a = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( a , \"failure\" , type = \"failure\" ) for test in result . json ()[ device ][ 'passedWithWarning' ]: b = ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) ET . SubElement ( b , \"failure\" , type = \"warning\" ) for test in result . json ()[ device ][ 'passedSuccessfully' ]: ET . SubElement ( root , \"testcase\" , classname = \"interop\" , name = test , device = device ) tree = ET . ElementTree ( root ) tree . write ( \"report.xml\" ) Save the script as a .py file (using the filename specified in the Jenkinsfile in the previous step) and upload it to your project repository. Create a pipeline for your project: Go to your Jenkins account and in the Dashboard view, select New Item from the menu on the left. Enter a name for your pipeline, select Multibranch Pipeline and confirm by clicking OK . Configure your pipeline: Go to your newly created pipeline and select Configure from the menu on the left. In the Branch Sources section, select the Git option and provide the following: Project Repository - enter the URL address of your project repository that hosts the Jenkinsfile and the python script file from Step 2 . Credentials - add the user name and password of your GitLab account. In the Build Configuration section, select the by Jenkinsfile mode from the drop-down list and provide the GitLab path to the Jenkinsfile from Step 1 (if the file is located in the GitLab root folder, it is enough to type Jenkinsfile ) Click Save .","title":"Set up multibranch pipeline"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#run-multibranch-pipeline","text":"Before running the tests for a chosen branch, you have to perform a scan to detect available branches (those with a Jenkinsfile ): Go to your multibranch pipeline and select Scan Multibranch Pipeline Now option from the menu on the left. Once the scan is completed, you will see a list of available branches. Enter a chosen branch by clicking on its name and select Build Now . Note Remember to check if the device you run the tests for is connected and registered in Coiote IoT DM. Once the tests are performed, you will see your build status along with a graph reporting the execution status for each test.","title":"Run multibranch pipeline"},{"location":"Coiote_IoT_DM/Device_tests/Use_API_Jenkins_integration/#gitlab-configure-and-run-pipeline","text":"Coiote IoT DM interop tests API can also be integrated with GitLab using the GitLab's CI/CD toolset. Here is how to do it: Upload the gitlab-ci.yml file that will define your GitLab pipeline to your project repository: Edit the script where required to adjust it to your environment: Note Remember to change the name example_filename.py to your custom name that you will choose in the next step. Also, keep in mind that running a pipeline in GitLab requires a docker image of a Linux distribution (or any operating system that can run python script). image : name : example.repository.com/docker-local/linux_image protocol-tests : stage : test script : - python3 example_filename.py artifacts : when : always paths : - report.xml reports : junit : report.xml Save the file as gitlab-ci.yml and upload it to the chosen branch of your project repository. Follow Step 2 from Creating a Jenkins multibranch pipeline (uploading a file with python script to your GitLab repository). Run a created pipeline for your project: Go to your GitLab project and in the Dashboard view, select CI/CD from the menu on the left and click Pipelines . Attention Note that to be able to run a pipeline, you will need to have the GitLab CI/CD toolset configured. For details, please check https://docs.gitlab.com/ee/ci/introduction/index.html . You should be able to see the branch with the uploaded gitlab-ci.yml file. Select the Run pipeline button, then confirm again by clicking Run pipeline . Once the pipeline execution is finished, you should be able to see the results in the Tests tab of your pipeline. Note Viewing graphs with test results is not supported in GitLab by default as it requires additional plugins.","title":"GitLab - configure and run pipeline"},{"location":"Coiote_IoT_DM/Onboarding/bootstrap/","text":"Add a device via the Bootstrap Server # To add a device using the Bootstrap server: From the navigation menu, select Device Inventory and click the Add device button. Note If you're a new user with no added devices, the Add your LwM2M device panel will be displayed upon logging in to the platform. Select the Connect your LwM2M device via the Bootstrap server tile. In the Device credentials step, provide the following: Device ID - enter the endpoint name of your LwM2M device. Friendly name (optional) - enter a name for your device that will help user identify it in the platform. Security mode: PSK - authorize your device using a pre-shared key. To use this option, provide the following: Key identity - define the name that the device will use during DTLS handshake. Can be equal with the LwM2M device endpoint name. Key - provide the shared secret used in the device-server authentication. Select the Key in hexadecimal check box to enable specifying the key in hexadecimal format. NoSec - use the device with no security established for the device-server communication. It is recommended to use this mode only for testing purposes. Certificate - secure your device-server communication with a certificate: Select Use a previously uploaded certificate if you have already uploaded a certificate to the platform using the DTLS/TLS Certificates panel. Select Upload a new certificate to load your certificate file using the Browse button. Click the Configuration button to go to the next step. In the Configuration step, select a Management server for your device from the drop-down list: Use the bootstrap configuration set as default for your domain - use this setting if you want to make use of the inherited bootstrap settings for your domain. This Coiote IoT DM Management Server (Cert with EST) - use this setting if you have chosen the Certificate mode in the Device credentials step. This Coiote IoT DM Management Server NoSec - use this setting to establish the device-server communication with no security. Using this mode is not recommended except for testing purposes. This Coiote IoT DM Management Server PSK - use this setting to authorize the device-server communication using a pre-shared key. Your custom bootstrap setting - this type of setting will appear if you have configured a bootstrap server setting using the Bootstrap configuration panel. Click the Add device button and Confirm in the confirmation pop-up. Important At this stage, your device will be already visible in the platform. However, to get your device connected, you need to configure it using the credentials from the next step. In the Connect your device step, insert the given connection parameters into your device to start connection. Click Go to device to see your added device dashboard.","title":"Bootstrap server (advanced)"},{"location":"Coiote_IoT_DM/Onboarding/bootstrap/#add-a-device-via-the-bootstrap-server","text":"To add a device using the Bootstrap server: From the navigation menu, select Device Inventory and click the Add device button. Note If you're a new user with no added devices, the Add your LwM2M device panel will be displayed upon logging in to the platform. Select the Connect your LwM2M device via the Bootstrap server tile. In the Device credentials step, provide the following: Device ID - enter the endpoint name of your LwM2M device. Friendly name (optional) - enter a name for your device that will help user identify it in the platform. Security mode: PSK - authorize your device using a pre-shared key. To use this option, provide the following: Key identity - define the name that the device will use during DTLS handshake. Can be equal with the LwM2M device endpoint name. Key - provide the shared secret used in the device-server authentication. Select the Key in hexadecimal check box to enable specifying the key in hexadecimal format. NoSec - use the device with no security established for the device-server communication. It is recommended to use this mode only for testing purposes. Certificate - secure your device-server communication with a certificate: Select Use a previously uploaded certificate if you have already uploaded a certificate to the platform using the DTLS/TLS Certificates panel. Select Upload a new certificate to load your certificate file using the Browse button. Click the Configuration button to go to the next step. In the Configuration step, select a Management server for your device from the drop-down list: Use the bootstrap configuration set as default for your domain - use this setting if you want to make use of the inherited bootstrap settings for your domain. This Coiote IoT DM Management Server (Cert with EST) - use this setting if you have chosen the Certificate mode in the Device credentials step. This Coiote IoT DM Management Server NoSec - use this setting to establish the device-server communication with no security. Using this mode is not recommended except for testing purposes. This Coiote IoT DM Management Server PSK - use this setting to authorize the device-server communication using a pre-shared key. Your custom bootstrap setting - this type of setting will appear if you have configured a bootstrap server setting using the Bootstrap configuration panel. Click the Add device button and Confirm in the confirmation pop-up. Important At this stage, your device will be already visible in the platform. However, to get your device connected, you need to configure it using the credentials from the next step. In the Connect your device step, insert the given connection parameters into your device to start connection. Click Go to device to see your added device dashboard.","title":"Add a device via the Bootstrap Server"},{"location":"Coiote_IoT_DM/Onboarding/certificate/","text":"Generate certificate and key in OpenSSL # Learn how to onboard a LwM2M device in just a few clicks using Certificates. Connect a demo device with a certificate # Prerequisites # An active Coiote IoT DM user account with appropriate roles assigned. Compiled Anjay SDK demo library for simulating a device. Installed OpenSSL (or similar) for generating the certificate. Generate certificate and key in OpenSSL # Open the OpenSSL command line terminal and run the following command(s): Windows openssl ecparam -name secp384r1 -out ecparam.der openssl req -new -x509 -nodes -newkey ec:ecparam.der -keyout demo-cert.key -out demo-cert.crt -days 3650 Linux openssl req -new -x509 -nodes -newkey ec:<(openssl ecparam -name secp384r1) -keyout demo-cert.key -out demo-cert.crt -days 3650` You will be asked to provide certificate information inside the terminal. You may leave the fields blank by pressing Enter for each or fill them in with your data. Convert the generated certificates into the .der format by running the following command: openssl x509 -in demo-cert.crt -outform der -out demo-cert.der openssl ec -in demo-cert.key -outform der -out demo_key.der Add device to Coiote IoT DM and connect # Upon logging in to Coiote IoT DM for the first time, you will see the Add your LwM2M device panel. Note If you had previously added a device, in Device inventory , click the Add device button. Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name enter your LwM2M device endpoint name, e.g. test_device . In the Security mode section, select the Certificate mode. Click Upload a new certificate and Browse . In the pop-up, go to the directory where your certificate has been generated, select the demo-cert.crt file and click Open . Click Add device . In the Connect your device step, insert the given connection parameters and the path to your certificate and key into the command used for starting the Anjay demo device. The following is an example command: ./output/bin/demo --endpoint-name test_device --security-mode cert -C c:/certificates/demo-cert.der -K c:/certificates/demo_key.der --server-uri coaps://eu.iot.avsystem.cloud:5684 Note You need to change the c:/certificates/ path for the path where your generated certificate and key are stored. In the command line terminal, open the Anjay directory, paste the appropriately modified command and run it. In Coiote IoT DM, click Next , Go to Summary to skip the third step, and Finish to see your Device Center.","title":"Certificate mode"},{"location":"Coiote_IoT_DM/Onboarding/certificate/#generate-certificate-and-key-in-openssl","text":"Learn how to onboard a LwM2M device in just a few clicks using Certificates.","title":"Generate certificate and key in OpenSSL"},{"location":"Coiote_IoT_DM/Onboarding/certificate/#connect-a-demo-device-with-a-certificate","text":"","title":"Connect a demo device with a certificate"},{"location":"Coiote_IoT_DM/Onboarding/certificate/#prerequisites","text":"An active Coiote IoT DM user account with appropriate roles assigned. Compiled Anjay SDK demo library for simulating a device. Installed OpenSSL (or similar) for generating the certificate.","title":"Prerequisites"},{"location":"Coiote_IoT_DM/Onboarding/certificate/#generate-certificate-and-key-in-openssl_1","text":"Open the OpenSSL command line terminal and run the following command(s): Windows openssl ecparam -name secp384r1 -out ecparam.der openssl req -new -x509 -nodes -newkey ec:ecparam.der -keyout demo-cert.key -out demo-cert.crt -days 3650 Linux openssl req -new -x509 -nodes -newkey ec:<(openssl ecparam -name secp384r1) -keyout demo-cert.key -out demo-cert.crt -days 3650` You will be asked to provide certificate information inside the terminal. You may leave the fields blank by pressing Enter for each or fill them in with your data. Convert the generated certificates into the .der format by running the following command: openssl x509 -in demo-cert.crt -outform der -out demo-cert.der openssl ec -in demo-cert.key -outform der -out demo_key.der","title":"Generate certificate and key in OpenSSL"},{"location":"Coiote_IoT_DM/Onboarding/certificate/#add-device-to-coiote-iot-dm-and-connect","text":"Upon logging in to Coiote IoT DM for the first time, you will see the Add your LwM2M device panel. Note If you had previously added a device, in Device inventory , click the Add device button. Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name enter your LwM2M device endpoint name, e.g. test_device . In the Security mode section, select the Certificate mode. Click Upload a new certificate and Browse . In the pop-up, go to the directory where your certificate has been generated, select the demo-cert.crt file and click Open . Click Add device . In the Connect your device step, insert the given connection parameters and the path to your certificate and key into the command used for starting the Anjay demo device. The following is an example command: ./output/bin/demo --endpoint-name test_device --security-mode cert -C c:/certificates/demo-cert.der -K c:/certificates/demo_key.der --server-uri coaps://eu.iot.avsystem.cloud:5684 Note You need to change the c:/certificates/ path for the path where your generated certificate and key are stored. In the command line terminal, open the Anjay directory, paste the appropriately modified command and run it. In Coiote IoT DM, click Next , Go to Summary to skip the third step, and Finish to see your Device Center.","title":"Add device to Coiote IoT DM and connect"},{"location":"Coiote_IoT_DM/Onboarding/connect/","text":"Add a device via the Management Server # This guide walks you through the process of adding new devices to Coiote IoT DM using the Management server . Info The LwM2M standard defines two methods for device registration: Management server (default) - The LwM2M Client negotiates security credentials directly with the LwM2M server. Bootstrap server (enhanced security) - The Bootstrap server is a dedicated server that acts as an intermediate to securely provision LwM2M Clients with the necessary information to register with a LwM2M server. For more information, visit the Bootstrap guide . Prerequisites # An active Coiote IoT DM user account A LwM2M device Sign up free of charge You can create a free developer account allowing you connect up to 10 devices, to register visit: eu.iot.avsystem.cloud Add a device via the Management server # Log in to Coiote IoT DM and from the left side menu, select Device inventory . In Device inventory click Add device . Note If you're a new user with no added devices, the Add your LwM2M device panel will be displayed upon logging in to the platform. Select the Connect your LwM2M device via the Management server tile. In the Device credentials step: Endpoint name - enter your LwM2M device endpoint name Friendly name (optional) - enter a name that will help you identify your device Choose one of the Security modes : Note For more information about the Security modes, see the Security modes section. Click Add device and Confirm in the confirmation dialog window. Once the device is activated using the right connection parameters, the device is added to the Coiote IoT DM platform. Security modes # Info LwM2M supports three security modes: Pre-Shared Key , Certificate , and NoSec . PSK mode uses a pre-shared key to establish secure communication between the LwM2M Client and Server. Certificate mode uses certificates for authentication and secure communication. NoSec mode provides no security and is intended for testing and development purposes only. Pre-Shared Key (PSK) Authorize your device using a pre-shared key. To use this option, provide the following: Key identity - Define the name that the device will use during the DTLS handshake. The Key identity can be equal to the LwM2M device endpoint name. Key - Provide the shared secret used in the device-server authentication in hex or plain text . Certificate Secure the device-server communication with a certificate: Select Use a previously uploaded certificate if you have already uploaded a certificate to the platform using the DTLS/TLS Certificates panel. Click Upload a new certificate to load your certificate file using the Browse button. Note For more information about connecting devices using a certificate, visit the Certificate mode guide. NoSec Use the device with no security established for the device-server communication. Using this mode is not recommended except for testing purposes. Useful resources # For more information about connecting devices using certificates, see the Certificate mode chapter. For more information about connecting devices using the Bootstrap server, see the Bootstrap server chapter.","title":"Management server (default)"},{"location":"Coiote_IoT_DM/Onboarding/connect/#add-a-device-via-the-management-server","text":"This guide walks you through the process of adding new devices to Coiote IoT DM using the Management server . Info The LwM2M standard defines two methods for device registration: Management server (default) - The LwM2M Client negotiates security credentials directly with the LwM2M server. Bootstrap server (enhanced security) - The Bootstrap server is a dedicated server that acts as an intermediate to securely provision LwM2M Clients with the necessary information to register with a LwM2M server. For more information, visit the Bootstrap guide .","title":"Add a device via the Management Server"},{"location":"Coiote_IoT_DM/Onboarding/connect/#prerequisites","text":"An active Coiote IoT DM user account A LwM2M device Sign up free of charge You can create a free developer account allowing you connect up to 10 devices, to register visit: eu.iot.avsystem.cloud","title":"Prerequisites"},{"location":"Coiote_IoT_DM/Onboarding/connect/#add-a-device-via-the-management-server_1","text":"Log in to Coiote IoT DM and from the left side menu, select Device inventory . In Device inventory click Add device . Note If you're a new user with no added devices, the Add your LwM2M device panel will be displayed upon logging in to the platform. Select the Connect your LwM2M device via the Management server tile. In the Device credentials step: Endpoint name - enter your LwM2M device endpoint name Friendly name (optional) - enter a name that will help you identify your device Choose one of the Security modes : Note For more information about the Security modes, see the Security modes section. Click Add device and Confirm in the confirmation dialog window. Once the device is activated using the right connection parameters, the device is added to the Coiote IoT DM platform.","title":"Add a device via the Management server"},{"location":"Coiote_IoT_DM/Onboarding/connect/#security-modes","text":"Info LwM2M supports three security modes: Pre-Shared Key , Certificate , and NoSec . PSK mode uses a pre-shared key to establish secure communication between the LwM2M Client and Server. Certificate mode uses certificates for authentication and secure communication. NoSec mode provides no security and is intended for testing and development purposes only. Pre-Shared Key (PSK) Authorize your device using a pre-shared key. To use this option, provide the following: Key identity - Define the name that the device will use during the DTLS handshake. The Key identity can be equal to the LwM2M device endpoint name. Key - Provide the shared secret used in the device-server authentication in hex or plain text . Certificate Secure the device-server communication with a certificate: Select Use a previously uploaded certificate if you have already uploaded a certificate to the platform using the DTLS/TLS Certificates panel. Click Upload a new certificate to load your certificate file using the Browse button. Note For more information about connecting devices using a certificate, visit the Certificate mode guide. NoSec Use the device with no security established for the device-server communication. Using this mode is not recommended except for testing purposes.","title":"Security modes"},{"location":"Coiote_IoT_DM/Onboarding/connect/#useful-resources","text":"For more information about connecting devices using certificates, see the Certificate mode chapter. For more information about connecting devices using the Bootstrap server, see the Bootstrap server chapter.","title":"Useful resources"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/","text":"Air quality monitoring using Azure IoT Hub and Power BI # The Coiote IoT DM and Azure IoT Hub integration lets you create custom use cases with data visualization. See the video and have a sneak peek at the possibilities that the Coiote IoT DM - Azure IoT Hub integration offers you. In the tutorial, you will see how to leverage the integration to create an air quality monitoring in just a few steps. The text version of the tutorial, complete with the necessary steps and code snippets, is available below: Prerequisites # An active Azure subscription. An active Coiote IoT DM account. Please refer to Coiote IoT DM home page for details on how to get it. An active Microsoft Power BI account. An OpenWeatherMap account with a free API token. An active and configured Azure CLI - please refer to the Azure CLI installation guide for details. Creating and configuring an Azure IoT hub and storage account # First you need to add a new IoT hub and a storage account in Azure. Here's how to do it: Creating an IoT hub # In your Azure portal home view, go to IoT Hub and select Add . In the Basics tab: select your subscription and resource group, pick your region, provide a name for your IoT hub. In the Management tab: in Pricing and scale tier select, optionally, turn off Defender for IoT . In the Review + create tab, click Create . Creating a storage account # While your new IoT hub is deploying, you can add a new storage account: In the Azure portal, go to Storage accounts and select Add . In the Basics tab: select your subscription and resource group, provide a name for your storage account, pick your location. In the Review + create tab, click Create . Configuring the Azure IoT Hub integration extension # Once the deployments are complete, go to Coiote IoT DM to set up the Azure IoT Hub extension. If you haven't done this yet, please follow the instruction for the Azure IoT Hub integration configuration . Adding and connecting LwM2M air quality meter simulators to Coiote IoT DM and Azure IoT Hub # Go to your Azure IoT Hub and add new devices: Under Device management , select Devices and click + Add Device . Provide the name for your first device: air-quality-meter-example-0 . Click Save . Repeat the procedure for the other 5 devices (increase the number included in the device name). Go to Coiote IoT DM and sync the previously added devices: In Device inventory , select Sync with IoT platform -> Azure IoT Hub . In the pop-up, click Sync devices . Devices should then be visible in Device inventory Go to your command line and register the device simulators: Paste and run the following command to create a container group: az container create -g coiote-dm-experiments --name air-quality-meter-example-0 --image avsystemcom/air-quality-meter-example --environment-variables DEVICEID=air-quality-meter-example-0 SERVER_ADDRESS=eu.iot.avsystem.cloud OPEN_WEATHER_API_TOKEN=exampletoken Note Remember to change the command parameters accordingly so that they are in line with your naming and credentials. once the command is executed, you should see a JSON payload that describes the content of the container instance. Go back to Coiote IoT DM and in Device inventory , check if the devices have registered to the platform and if their data model has been updated. Click the Refresh data icon if needed. Click on a device and in the Device Management Center , select the Actions panel. Select the Refresh data model from device link and confirm by clicking Yes, execute task now . Go to the Objects panel to see if the data model for the device has been updated. You should be able to see objects such as 3 Device (along with the Model number resource which shows the name of the city of the temperature reading), 3303 Temperature , and 3428 Air quality . Bidirectional communication using Device Twin # From Coiote IoT DM to Azure IoT Hub # In your Coiote IoT DM account, go to Device inventory , select a device. In the Device Management Center , go to the Objects panel. In the 1 LwM2M Server object, find the Lifetime resource. Click the pen icon next to it, change the lifetime value and click the Apply link. Go to your Azure IoT hub, select IoT devices , click your device and select the Device Twin panel. Click Refresh and check in the JSON payload if the reported property for the 1/0/1 (Lifetime) resource has changed. From Azure IoT Hub to Coiote IoT DM # Note To read more about how the Device Twins work in the Coiote IoT DM - Azure IoT Hub integration, please refer to the LwM2M Mappings section . In your Azure IoT hub, select IoT devices , click one of your added devices and select the Device Twin panel. To change the Lifetime resource in Coiote IoT DM, you need to modify the relevant Device Twin desired property. under the properties tag in the Device Twin JSON payload, paste the following nested structure: \"reported\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 45 } } } } }, - Click Save and Refresh . The value of the resource should now be changed in the Device Twin reported properties as well as in the Coiote IoT DM Objects panel, in the Lifetime resource of the 1 LwM2M Server object. Passing telemetry to Azure IoT Hub # Setting group value tracking on resources in Coiote IoT DM # In Coiote IoT DM, go to Device inventory and use the search option to display your air quality meter devices. Then, click the Add to group icon. In the pop-up, click Add to new group , provide a name for your group (following the pattern root.iothubexample.airqualitymeter), click Confirm and Yes . Go to the Group management panel, select your group and click Devices to see if all of your devices are added to the group. Go to the Value tracking panel and click Add new . In the pop-up: Add value tracking for the Temperature resource: Provide the resource path: Temperature.1.Sensor Value . In the Notification frequency section, provide the following values: At least once every - set it to 10 seconds. Not more often than once every - set it to 5 seconds. Click Add new . Add value tracking for the Air quality PM10 resource: Provide the resource path: Air quality.1.PM10 . In the Notification frequency section, provide the following values: At least once every - set it to 10 seconds. Not more often than once every - set it to 5 seconds. Click Add new . Add value tracking for the Air quality PM2.5 resource: Provide the resource path: Air quality.1.PM2_5 . In the Notification frequency section, provide the following values: At least once every - set it to 10 seconds. Not more often than once every - set it to 5 seconds. Click Add new . Go back to Device inventory and select a device of your group. In the Dashboard view , you should be able to see the value tracking parameters as in the picture below: Configuring message routing for sending telemetry data in Azure IoT Hub # Go to your Azure IoT hub and add message routing: Under Hub settings , select Message routing and click + Add . Provide a name for your event, for example EventRoute . From the Endpoint drop-down list, select events . In the Routing query , paste the following: IS_DEFINED($body.lwm2m.3303.1.5700.value) OR IS_DEFINED($body.lwm2m.3428.1.1.value) OR IS_DEFINED($body.lwm2m.3428.1.3.value) Click Save . While in the Message routing panel, go to the Enrich messages tab to set up location tracking: For latitude: Name - type lat Value - copy and paste $twin.properties.reported.lwm2m.6.1.0.value Endpoint(s) - select events For longitude: Name - type lon Value - copy and paste $twin.properties.reported.lwm2m.6.1.1.value Endpoint(s) - select events For longitude: Name - type deviceId Value - copy and paste $twin.properties.reported.lwm2m.3.1.1.value Endpoint(s) - select events Use search to go to Stream analytics jobs and create a job for transferring the gathered data to Power BI. Click + Create and provide the following: Resource group - pick your resource group. Name - e.g. avsystem-iot-hub-to-powerbi . Click Review + Create . Once your deployment is complete, click Go to resource . While in your Stream Analytics job panel, add a stream input and output and write a query: Under Job topology , select Inputs . From the + Add stream input drop-down list, select Iot Hub and provide the following: Input alias - e.g. avsystem-iot-hub-input . Consumer group - pick the $Default group. Click Save . Under Job topology , select Outputs . From the + Add drop-down list, select Power BI and click Authorize . Log in to Power BI using your Azure account. In the Power BI right-hand side panel, provide the following: Output alias - e.g. avsystem-iot-hub-output Dataset name - e.g. AVSystemIoTHubDataSet Table name - e.g. Data Click Save . Under Job topology , select Query . Paste the following query into the query input field (remember to adjust your naming inside the query if needed): SELECT CAST(\"lwm2m\".\"3303.\"1\".\"5700\".value as float) as temperature, CAST(\"lwm2m\".\"3428.\"1\".\"1\".value as float) as pm10, CAST(\"lwm2m\".\"3428.\"1\".\"3\".value as float) as pm25, GetMetadataPropertyValue(\"avsystem-iot-hub-input\", '[User].[lat]') as lat, GetMetadataPropertyValue(\"avsystem-iot-hub-input\", '[User].[lon]') as lon, GetMetadataPropertyValue(\"avsystem-iot-hub-input\", '[User].[deviceId]') as deviceId2, EventProcessedUtcTime as processedTimestamp, IoTHub.EnqueuedTime as iotHubTimestamp, IoTHub.ConnectionDeviceId as deviceId INTO \"avsystem-iot-hub-output\" FROM \"avsystem-iot-hub-input\" Click Save query . In your Stream analytics job, go to Overview and click Start and confirm by clicking Start in the Start job window to run the created query. Data visualization using Power BI # Once the query is finished, you can go to Power BI to create a visualization for the data you have gathered. Go to https://powerbi.microsoft.com/ and sign in to your account. Go to My workspace and find your recently created dataset. Click the more options icon and select Create report From the Visualizations menu, select the table icon and drag and drop it to the work space. From the Fields menu, select the deviceId2 , temperature , pm10 and pm25 parameters. In the Values submenu, expand the drop-down list for the temperature , pm10 and pm25 parameters and select Average for each. Create a map with air quality indicators: From the Visualizations menu, click the get more visuals icon and select Get more visuals . Use search to find the Heatmap and click Add . From the Visualizations menu, click the Heatmap icon. Add the relevant parameters to the map data fields: To the Latitude data field, drag and drop the lat parameter from the Fields menu. To the Longitude data field, drag and drop the lon parameter from the Fields menu. To the Value data field, drag and drop the pm10 parameter from the Fields menu. In the Value data field, expand the drop-down list and select Average . To refresh the displayed data, click the Refresh button located in the upper navigation bar.","title":"Air quality monitoring using Azure IoT Hub and Power BI"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#air-quality-monitoring-using-azure-iot-hub-and-power-bi","text":"The Coiote IoT DM and Azure IoT Hub integration lets you create custom use cases with data visualization. See the video and have a sneak peek at the possibilities that the Coiote IoT DM - Azure IoT Hub integration offers you. In the tutorial, you will see how to leverage the integration to create an air quality monitoring in just a few steps. The text version of the tutorial, complete with the necessary steps and code snippets, is available below:","title":"Air quality monitoring using Azure IoT Hub and Power BI"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#prerequisites","text":"An active Azure subscription. An active Coiote IoT DM account. Please refer to Coiote IoT DM home page for details on how to get it. An active Microsoft Power BI account. An OpenWeatherMap account with a free API token. An active and configured Azure CLI - please refer to the Azure CLI installation guide for details.","title":"Prerequisites"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#creating-and-configuring-an-azure-iot-hub-and-storage-account","text":"First you need to add a new IoT hub and a storage account in Azure. Here's how to do it:","title":"Creating and configuring an Azure IoT hub and storage account"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#creating-an-iot-hub","text":"In your Azure portal home view, go to IoT Hub and select Add . In the Basics tab: select your subscription and resource group, pick your region, provide a name for your IoT hub. In the Management tab: in Pricing and scale tier select, optionally, turn off Defender for IoT . In the Review + create tab, click Create .","title":"Creating an IoT hub"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#creating-a-storage-account","text":"While your new IoT hub is deploying, you can add a new storage account: In the Azure portal, go to Storage accounts and select Add . In the Basics tab: select your subscription and resource group, provide a name for your storage account, pick your location. In the Review + create tab, click Create .","title":"Creating a storage account"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#configuring-the-azure-iot-hub-integration-extension","text":"Once the deployments are complete, go to Coiote IoT DM to set up the Azure IoT Hub extension. If you haven't done this yet, please follow the instruction for the Azure IoT Hub integration configuration .","title":"Configuring the Azure IoT Hub integration extension"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#adding-and-connecting-lwm2m-air-quality-meter-simulators-to-coiote-iot-dm-and-azure-iot-hub","text":"Go to your Azure IoT Hub and add new devices: Under Device management , select Devices and click + Add Device . Provide the name for your first device: air-quality-meter-example-0 . Click Save . Repeat the procedure for the other 5 devices (increase the number included in the device name). Go to Coiote IoT DM and sync the previously added devices: In Device inventory , select Sync with IoT platform -> Azure IoT Hub . In the pop-up, click Sync devices . Devices should then be visible in Device inventory Go to your command line and register the device simulators: Paste and run the following command to create a container group: az container create -g coiote-dm-experiments --name air-quality-meter-example-0 --image avsystemcom/air-quality-meter-example --environment-variables DEVICEID=air-quality-meter-example-0 SERVER_ADDRESS=eu.iot.avsystem.cloud OPEN_WEATHER_API_TOKEN=exampletoken Note Remember to change the command parameters accordingly so that they are in line with your naming and credentials. once the command is executed, you should see a JSON payload that describes the content of the container instance. Go back to Coiote IoT DM and in Device inventory , check if the devices have registered to the platform and if their data model has been updated. Click the Refresh data icon if needed. Click on a device and in the Device Management Center , select the Actions panel. Select the Refresh data model from device link and confirm by clicking Yes, execute task now . Go to the Objects panel to see if the data model for the device has been updated. You should be able to see objects such as 3 Device (along with the Model number resource which shows the name of the city of the temperature reading), 3303 Temperature , and 3428 Air quality .","title":"Adding and connecting LwM2M air quality meter simulators to Coiote IoT DM and Azure IoT Hub"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#bidirectional-communication-using-device-twin","text":"","title":"Bidirectional communication using Device Twin"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#from-coiote-iot-dm-to-azure-iot-hub","text":"In your Coiote IoT DM account, go to Device inventory , select a device. In the Device Management Center , go to the Objects panel. In the 1 LwM2M Server object, find the Lifetime resource. Click the pen icon next to it, change the lifetime value and click the Apply link. Go to your Azure IoT hub, select IoT devices , click your device and select the Device Twin panel. Click Refresh and check in the JSON payload if the reported property for the 1/0/1 (Lifetime) resource has changed.","title":"From Coiote IoT DM to Azure IoT Hub"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#from-azure-iot-hub-to-coiote-iot-dm","text":"Note To read more about how the Device Twins work in the Coiote IoT DM - Azure IoT Hub integration, please refer to the LwM2M Mappings section . In your Azure IoT hub, select IoT devices , click one of your added devices and select the Device Twin panel. To change the Lifetime resource in Coiote IoT DM, you need to modify the relevant Device Twin desired property. under the properties tag in the Device Twin JSON payload, paste the following nested structure: \"reported\": { \"lwm2m\": { \"1\": { \"0\": { \"0\": {}, \"1\": { \"value\": 45 } } } } }, - Click Save and Refresh . The value of the resource should now be changed in the Device Twin reported properties as well as in the Coiote IoT DM Objects panel, in the Lifetime resource of the 1 LwM2M Server object.","title":"From Azure IoT Hub to Coiote IoT DM"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#passing-telemetry-to-azure-iot-hub","text":"","title":"Passing telemetry to Azure IoT Hub"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#setting-group-value-tracking-on-resources-in-coiote-iot-dm","text":"In Coiote IoT DM, go to Device inventory and use the search option to display your air quality meter devices. Then, click the Add to group icon. In the pop-up, click Add to new group , provide a name for your group (following the pattern root.iothubexample.airqualitymeter), click Confirm and Yes . Go to the Group management panel, select your group and click Devices to see if all of your devices are added to the group. Go to the Value tracking panel and click Add new . In the pop-up: Add value tracking for the Temperature resource: Provide the resource path: Temperature.1.Sensor Value . In the Notification frequency section, provide the following values: At least once every - set it to 10 seconds. Not more often than once every - set it to 5 seconds. Click Add new . Add value tracking for the Air quality PM10 resource: Provide the resource path: Air quality.1.PM10 . In the Notification frequency section, provide the following values: At least once every - set it to 10 seconds. Not more often than once every - set it to 5 seconds. Click Add new . Add value tracking for the Air quality PM2.5 resource: Provide the resource path: Air quality.1.PM2_5 . In the Notification frequency section, provide the following values: At least once every - set it to 10 seconds. Not more often than once every - set it to 5 seconds. Click Add new . Go back to Device inventory and select a device of your group. In the Dashboard view , you should be able to see the value tracking parameters as in the picture below:","title":"Setting group value tracking on resources in Coiote IoT DM"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#configuring-message-routing-for-sending-telemetry-data-in-azure-iot-hub","text":"Go to your Azure IoT hub and add message routing: Under Hub settings , select Message routing and click + Add . Provide a name for your event, for example EventRoute . From the Endpoint drop-down list, select events . In the Routing query , paste the following: IS_DEFINED($body.lwm2m.3303.1.5700.value) OR IS_DEFINED($body.lwm2m.3428.1.1.value) OR IS_DEFINED($body.lwm2m.3428.1.3.value) Click Save . While in the Message routing panel, go to the Enrich messages tab to set up location tracking: For latitude: Name - type lat Value - copy and paste $twin.properties.reported.lwm2m.6.1.0.value Endpoint(s) - select events For longitude: Name - type lon Value - copy and paste $twin.properties.reported.lwm2m.6.1.1.value Endpoint(s) - select events For longitude: Name - type deviceId Value - copy and paste $twin.properties.reported.lwm2m.3.1.1.value Endpoint(s) - select events Use search to go to Stream analytics jobs and create a job for transferring the gathered data to Power BI. Click + Create and provide the following: Resource group - pick your resource group. Name - e.g. avsystem-iot-hub-to-powerbi . Click Review + Create . Once your deployment is complete, click Go to resource . While in your Stream Analytics job panel, add a stream input and output and write a query: Under Job topology , select Inputs . From the + Add stream input drop-down list, select Iot Hub and provide the following: Input alias - e.g. avsystem-iot-hub-input . Consumer group - pick the $Default group. Click Save . Under Job topology , select Outputs . From the + Add drop-down list, select Power BI and click Authorize . Log in to Power BI using your Azure account. In the Power BI right-hand side panel, provide the following: Output alias - e.g. avsystem-iot-hub-output Dataset name - e.g. AVSystemIoTHubDataSet Table name - e.g. Data Click Save . Under Job topology , select Query . Paste the following query into the query input field (remember to adjust your naming inside the query if needed): SELECT CAST(\"lwm2m\".\"3303.\"1\".\"5700\".value as float) as temperature, CAST(\"lwm2m\".\"3428.\"1\".\"1\".value as float) as pm10, CAST(\"lwm2m\".\"3428.\"1\".\"3\".value as float) as pm25, GetMetadataPropertyValue(\"avsystem-iot-hub-input\", '[User].[lat]') as lat, GetMetadataPropertyValue(\"avsystem-iot-hub-input\", '[User].[lon]') as lon, GetMetadataPropertyValue(\"avsystem-iot-hub-input\", '[User].[deviceId]') as deviceId2, EventProcessedUtcTime as processedTimestamp, IoTHub.EnqueuedTime as iotHubTimestamp, IoTHub.ConnectionDeviceId as deviceId INTO \"avsystem-iot-hub-output\" FROM \"avsystem-iot-hub-input\" Click Save query . In your Stream analytics job, go to Overview and click Start and confirm by clicking Start in the Start job window to run the created query.","title":"Configuring message routing for sending telemetry data in Azure IoT Hub"},{"location":"Demo_Projects/Air_quality_monitoring_tutorial/#data-visualization-using-power-bi","text":"Once the query is finished, you can go to Power BI to create a visualization for the data you have gathered. Go to https://powerbi.microsoft.com/ and sign in to your account. Go to My workspace and find your recently created dataset. Click the more options icon and select Create report From the Visualizations menu, select the table icon and drag and drop it to the work space. From the Fields menu, select the deviceId2 , temperature , pm10 and pm25 parameters. In the Values submenu, expand the drop-down list for the temperature , pm10 and pm25 parameters and select Average for each. Create a map with air quality indicators: From the Visualizations menu, click the get more visuals icon and select Get more visuals . Use search to find the Heatmap and click Add . From the Visualizations menu, click the Heatmap icon. Add the relevant parameters to the map data fields: To the Latitude data field, drag and drop the lat parameter from the Fields menu. To the Longitude data field, drag and drop the lon parameter from the Fields menu. To the Value data field, drag and drop the pm10 parameter from the Fields menu. In the Value data field, expand the drop-down list and select Average . To refresh the displayed data, click the Refresh button located in the upper navigation bar.","title":"Data visualization using Power BI"},{"location":"Demo_Projects/Edge_Impulse_demo/","text":"Motion detection using Edge Impulse and Thingy:91 # Introduction # This example runs a motion detection model using the accelerometer of the Thingy:91 development kit, built with Edge Impulse . It streams the detected motion patterns to a LwM2M server. Detecting the motion patterns: \"idle\" and \"snake\" LwM2M Objects used: Security: /0 Server: /1 Device: /3 Pattern Detector: /33650 (custom object) Prerequisites # Thingy:91 Coiote IoT DM account Installed Zephyr dependencies Serial communication program e.g. minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) Warning This tutorial uses the Arm Embedded Toolchain, which is not compatible with the Apple M1 chipset. Compilation # Clone the Anjay Zephyr repository # Open the command line interface on your machine and clone the Anjay Zephyr repository using Git : git clone https://github.com/AVSystem/Anjay-zephyr-client Set West manifest path to Anjay-zephyr-client/ei_demo , and manifest file to west-nrf.yml and run west update : west config manifest.path Anjay-zephyr-client/ei_demo west config manifest.file west-nrf.yml west update Update the endpoint name and PSK (optional) # Info The default credentials are : Endpoint name: Anjay-zephyr-client PSK (Pre-Shared Key): test The Endpoint Name and PSK can be configured using menuconfig . To open menuconfig , run the following command: west build -b thingy91_nrf9160_ns -p -t menuconfig Open up the folder anjay-zephyr-client ---> Create a new Endpoint Name and PSK Key : After making the changes, press Q to close the config menu and Y to save. Compile the project # Go to the ei_demo directory and compile the project for the Thingy:91: west build -b thingy91_nrf9160_ns Write the firmware to the Thingy:91 # Find the build file in the directory /build/zephyr , named: app_signed.hex . Connect the Thingy:91 to a USB port of your machine. Flash the file using the Programmer application in nRF Cloud for Desktop via MCUboot . Find more information on flashing the Thingy:91 using MCU Boot here . Connect the Thingy:91 to Coiote IoT Device Management platform # To connect to Coiote IoT Device Management platform, please register at eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and select Device Inventory from the left side menu. In Device Inventory , select Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: Add the Endpoint name , the default endpoint name is: Anjay-zephyr-client Key Identity is the same as the endpoint name Add the Key , the default key is: test Click Add device and then Confirm in the confirmation pop-up Add the Pattern Detection Object to Coiote IoT DM # Object ID /33650 refers to the pattern detection model and indicates which pattern has been detected. To add this custom object, go to the device overview page in Coiote IoT DM and click the top-right button: Go to previous version . In the left-side menu, click Objects . Click the button at the top right corner: Add new LwM2M object definition . To add a new object definition, copy-paste the following XML file and click Import . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <LWM2M xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://openmobilealliance.org/tech/profiles/LWM2M.xsd\"> <Object ObjectType=\"MODefinition\"> <Name>Pattern detector</Name> <Description1><![CDATA[This object is used to report the pattern detected by the ML-based classification algorithms and to count the number of times it has been detected.]]></Description1> <ObjectID>33650</ObjectID> <ObjectURN>urn:oma:lwm2m:ext:33650</ObjectURN> <LWM2MVersion>1.0</LWM2MVersion> <ObjectVersion>1.0</ObjectVersion> <MultipleInstances>Multiple</MultipleInstances> <Mandatory>Optional</Mandatory> <Resources> <Item ID=\"2000\"> <Name>Detector State</Name> <Operations>R</Operations> <MultipleInstances>Single</MultipleInstances> <Mandatory>Mandatory</Mandatory> <Type>Boolean</Type> <RangeEnumeration></RangeEnumeration> <Units></Units> <Description><![CDATA[The current state of a detector.]]></Description> </Item> <Item ID=\"2001\"> <Name>Detector Counter</Name> <Operations>R</Operations> <MultipleInstances>Single</MultipleInstances> <Mandatory>Mandatory</Mandatory> <Type>Integer</Type> <RangeEnumeration></RangeEnumeration> <Units></Units> <Description><![CDATA[The cumulative value of patterns detected.]]></Description> </Item><Item ID=\"2002\"> <Name>Pattern Name</Name> <Operations>R</Operations> <MultipleInstances>Single</MultipleInstances> <Mandatory>Mandatory</Mandatory> <Type>String</Type> <RangeEnumeration></RangeEnumeration> <Units></Units> <Description><![CDATA[Name of the pattern being detected.]]></Description> </Item> </Resources> <Description2></Description2> </Object> </LWM2M> After importing the object definition, go back to the New Device Center by clicking the button in the top-right corner: Go to new Device Center . If the import was successful, you will find the object: /33650 Pattern detector under Data model . Pattern detection # The object: /33650 can distinguish three patterns: Idle Circle Snake Each pattern is defined as an Object Instance . The number of times the pattern has been recognized is shown as the Detector Counter . To see the Detector Counter for each pattern, select the corresponding Object Instance by clicking the down-arrow: \u25bc. Now start moving the Thingy:91 around to detect all three patterns. When a new motion pattern is detected, the Detector Counter increases and the LED color on the device will change. Set observations # The LwM2M standard allows you to instruct the device about the minimum and maximum allowed intervals between two updates. The intervals can be set from 1 second to multiple days. To instruct the device, an OBSERVE operation can be sent from the LwM2M Server to the LwM2M Client. For more information, see how to set observations","title":"Motion detection using Edge Impulse and Thingy:91"},{"location":"Demo_Projects/Edge_Impulse_demo/#motion-detection-using-edge-impulse-and-thingy91","text":"","title":"Motion detection using Edge Impulse and Thingy:91"},{"location":"Demo_Projects/Edge_Impulse_demo/#introduction","text":"This example runs a motion detection model using the accelerometer of the Thingy:91 development kit, built with Edge Impulse . It streams the detected motion patterns to a LwM2M server. Detecting the motion patterns: \"idle\" and \"snake\" LwM2M Objects used: Security: /0 Server: /1 Device: /3 Pattern Detector: /33650 (custom object)","title":"Introduction"},{"location":"Demo_Projects/Edge_Impulse_demo/#prerequisites","text":"Thingy:91 Coiote IoT DM account Installed Zephyr dependencies Serial communication program e.g. minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) Warning This tutorial uses the Arm Embedded Toolchain, which is not compatible with the Apple M1 chipset.","title":"Prerequisites"},{"location":"Demo_Projects/Edge_Impulse_demo/#compilation","text":"","title":"Compilation"},{"location":"Demo_Projects/Edge_Impulse_demo/#clone-the-anjay-zephyr-repository","text":"Open the command line interface on your machine and clone the Anjay Zephyr repository using Git : git clone https://github.com/AVSystem/Anjay-zephyr-client Set West manifest path to Anjay-zephyr-client/ei_demo , and manifest file to west-nrf.yml and run west update : west config manifest.path Anjay-zephyr-client/ei_demo west config manifest.file west-nrf.yml west update","title":"Clone the Anjay Zephyr repository"},{"location":"Demo_Projects/Edge_Impulse_demo/#update-the-endpoint-name-and-psk-optional","text":"Info The default credentials are : Endpoint name: Anjay-zephyr-client PSK (Pre-Shared Key): test The Endpoint Name and PSK can be configured using menuconfig . To open menuconfig , run the following command: west build -b thingy91_nrf9160_ns -p -t menuconfig Open up the folder anjay-zephyr-client ---> Create a new Endpoint Name and PSK Key : After making the changes, press Q to close the config menu and Y to save.","title":"Update the endpoint name and PSK (optional)"},{"location":"Demo_Projects/Edge_Impulse_demo/#compile-the-project","text":"Go to the ei_demo directory and compile the project for the Thingy:91: west build -b thingy91_nrf9160_ns","title":"Compile the project"},{"location":"Demo_Projects/Edge_Impulse_demo/#write-the-firmware-to-the-thingy91","text":"Find the build file in the directory /build/zephyr , named: app_signed.hex . Connect the Thingy:91 to a USB port of your machine. Flash the file using the Programmer application in nRF Cloud for Desktop via MCUboot . Find more information on flashing the Thingy:91 using MCU Boot here .","title":"Write the firmware to the Thingy:91"},{"location":"Demo_Projects/Edge_Impulse_demo/#connect-the-thingy91-to-coiote-iot-device-management-platform","text":"To connect to Coiote IoT Device Management platform, please register at eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and select Device Inventory from the left side menu. In Device Inventory , select Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: Add the Endpoint name , the default endpoint name is: Anjay-zephyr-client Key Identity is the same as the endpoint name Add the Key , the default key is: test Click Add device and then Confirm in the confirmation pop-up","title":"Connect the Thingy:91 to Coiote IoT Device Management platform"},{"location":"Demo_Projects/Edge_Impulse_demo/#add-the-pattern-detection-object-to-coiote-iot-dm","text":"Object ID /33650 refers to the pattern detection model and indicates which pattern has been detected. To add this custom object, go to the device overview page in Coiote IoT DM and click the top-right button: Go to previous version . In the left-side menu, click Objects . Click the button at the top right corner: Add new LwM2M object definition . To add a new object definition, copy-paste the following XML file and click Import . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <LWM2M xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://openmobilealliance.org/tech/profiles/LWM2M.xsd\"> <Object ObjectType=\"MODefinition\"> <Name>Pattern detector</Name> <Description1><![CDATA[This object is used to report the pattern detected by the ML-based classification algorithms and to count the number of times it has been detected.]]></Description1> <ObjectID>33650</ObjectID> <ObjectURN>urn:oma:lwm2m:ext:33650</ObjectURN> <LWM2MVersion>1.0</LWM2MVersion> <ObjectVersion>1.0</ObjectVersion> <MultipleInstances>Multiple</MultipleInstances> <Mandatory>Optional</Mandatory> <Resources> <Item ID=\"2000\"> <Name>Detector State</Name> <Operations>R</Operations> <MultipleInstances>Single</MultipleInstances> <Mandatory>Mandatory</Mandatory> <Type>Boolean</Type> <RangeEnumeration></RangeEnumeration> <Units></Units> <Description><![CDATA[The current state of a detector.]]></Description> </Item> <Item ID=\"2001\"> <Name>Detector Counter</Name> <Operations>R</Operations> <MultipleInstances>Single</MultipleInstances> <Mandatory>Mandatory</Mandatory> <Type>Integer</Type> <RangeEnumeration></RangeEnumeration> <Units></Units> <Description><![CDATA[The cumulative value of patterns detected.]]></Description> </Item><Item ID=\"2002\"> <Name>Pattern Name</Name> <Operations>R</Operations> <MultipleInstances>Single</MultipleInstances> <Mandatory>Mandatory</Mandatory> <Type>String</Type> <RangeEnumeration></RangeEnumeration> <Units></Units> <Description><![CDATA[Name of the pattern being detected.]]></Description> </Item> </Resources> <Description2></Description2> </Object> </LWM2M> After importing the object definition, go back to the New Device Center by clicking the button in the top-right corner: Go to new Device Center . If the import was successful, you will find the object: /33650 Pattern detector under Data model .","title":"Add the Pattern Detection Object to Coiote IoT DM"},{"location":"Demo_Projects/Edge_Impulse_demo/#pattern-detection","text":"The object: /33650 can distinguish three patterns: Idle Circle Snake Each pattern is defined as an Object Instance . The number of times the pattern has been recognized is shown as the Detector Counter . To see the Detector Counter for each pattern, select the corresponding Object Instance by clicking the down-arrow: \u25bc. Now start moving the Thingy:91 around to detect all three patterns. When a new motion pattern is detected, the Detector Counter increases and the LED color on the device will change.","title":"Pattern detection"},{"location":"Demo_Projects/Edge_Impulse_demo/#set-observations","text":"The LwM2M standard allows you to instruct the device about the minimum and maximum allowed intervals between two updates. The intervals can be set from 1 second to multiple days. To instruct the device, an OBSERVE operation can be sent from the LwM2M Server to the LwM2M Client. For more information, see how to set observations","title":"Set observations"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/","text":"Implementing LwM2M objects on Raspberry Pi # Introduction # Svetovid is a LwM2M client that gives you tools to implement selected LwM2M objects for RaspberryPi-based IoT devices using Python programming language. Svetovid is based on a state-of-the-art Anjay LwM2M client developed by AVSystem. It features the FSDM (File System Data Model) in which LwM2M objects are mapped to folders that follow a particular schema, and executables behave as expected by the LwM2M client that loads and manages them. This tutorial will show you how to implement a temperature LwM2M object on your device and a push button using Svetovid. This will enable live readings of their resources (temperature, push button state and counter) in Coiote IoT DM. Prerequisites # Raspberry Pi 3 or 4 with a configured operating system and a set-up WiFi connection. A Sense HAT or a GrovePi with a temperature sensor ( DHT11 or similar) and a push button ( Grove-button or similar). A user with access to the Coiote IoT Device Management platform and appropriate permissions. Step 1: Prepare your Sense HAT/GrovePi # Sense HAT # Install the Sense HAT packages: sudo apt-get install sense-hat Check if Sense HAT is working correctly: Create a hello_world.py file: from sense_hat import SenseHat sense = SenseHat() sense.show_message(\"Hello World!\") Run the program: python hello_world.py If a Hello World! message is displayed, you're good to proceed. Note If you're new to Sense HAT, follow the getting started tutorial . GrovePi # To install the GrovePi repository, paste and execute the following commands: mkdir ~/Dexter cd ~/Dexter git clone https://github.com/DexterInd/GrovePi cd ~/Dexter/GrovePi/Script bash ./update_grovepi.sh Check if the GrovePi libraries are working correctly: Connect a LED module to GrovePi port D4. In the terminal, type: cd ~/Dexter/GrovePi/Software/Python && python grove_led_blink.py The LED should start blinking. Step 2: Install Svetovid # To install Svetovid, paste and execute the following commands into your command-line terminal: mkdir ~/AVSystem cd ~/AVSystem git clone https://github.com/AVSystem/Svetovid-raspberry-client.git cd Svetovid-raspberry-client sudo dpkg -i svetovid_20.11-raspberry_armhf.deb sudo dpkg -i svetovid-plugin-fsdm_20.11-raspberry_armhf.deb sudo dpkg -i avsystem_svetovid-20.11-raspberry-Linux-fsdmtool-runtime-python.deb In file /usr/local/share/svetovid/bin/fsdm/lwm2m_object_registry.py , find the https://raw.githubusercontent.com/OpenMobileAlliance/lwm2m-registry/test entry and replace it with https://raw.githubusercontent.com/OpenMobileAlliance/lwm2m-registry/prod . Step 3: Register your device in Coiote IoT DM # Disable the Svetovid service: sudo systemctl disable svetovid.service --now Set the server connection details: in /etc/svetovid/config/security.json : { \"1\": { \"ssid\": \"1\", \"server_uri\": \"coaps://eu.iot.avsystem.cloud:5684\", \"is_bootstrap\": \"0\", \"security_mode\": \"psk\", \"pubkey_or_identity_hex\": \"XXXX\", \"privkey_or_psk_hex\": \"XXXX\", \"server_pubkey_hex\": \"\", \"holdoff_s\": \"0\", \"bs_timeout_s\": \"0\" } } in /etc/svetovid/config/svd.json : { \"device\": { \"endpoint_name\": \"YYYY\", \"udp_listen_port\": 1234 }, \"logging\": { \"default_log_level\": \"trace\", \"log_level\": { \"svd\": \"trace\" } }, \"lwm2m_version_config\": { \"min\": \"1.0\", \"max\": \"1.1\" }, \"in_buffer_size_b\": 1024, \"out_buffer_size_b\": 1024, \"msg_cache_size_b\": 65536 } Note XXXX and YYYY should be replaced by the chosen values of endpoint name, PSK identity and PSK key. Tip XXXX values are in hex. To convert your plain text, use the following: echo -n '<your-text-value>' | xxd -p Restart the Svetovid service: sudo systemctl start svetovid.service --now Step 4: Connecting to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. raspberry_pi_test . In the Security mode section, select the security mode you've choosen in Compile the application step: Note If you choose Pre-Shared Key mode then type: In the Key identity field, the same name as in the Endpoint name field. In the Key field, the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. Analyze the objects exposed by the device. Note Your RaspberryPi-based device will feature a number of default LwM2M objects provided by Svetovid, for instance the Light Control /3311 . Step 5: Implement the LwM2M temperature object /3303 (only for GrovePi) # Disable the Svetovid service: sudo systemctl disable svetovid.service --now Generate a stub object in your dm (data model) Svetovid folder by pasting and executing the following command in the terminal: $ sudo svetovid-fsdmtool generate --object 3303 --output-dir /etc/svetovid/dm --generator python Tip You can analyze the resource implementation in the /etc/svetovid/dm/3303 folder. For more details, see the Svetovid page on GitHub . Modify the python script in the /etc/svetovid/dm/3303/Sensor_Value.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore import grovepi import math # Connect the Grove Temperature & Humidity Sensor Pro to digital port D4 # This example uses the blue colored sensor. # SIG,NC,VCC,GND sensor = 4 # The Sensor goes on digital port 4. # temp_humidity_sensor_type # Grove Base Kit comes with the blue sensor. blue = 0 # The Blue colored sensor. white = 1 # The White colored sensor. class ResourceHandler_3303_5700(ResourceHandler): NAME = \"Sensor Value\" DESCRIPTION = '''\\ Last or Current Measured Value from the Sensor.''' DATATYPE = DataType.FLOAT EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise # TODO: print value to stdout # print(0.0) [temp,humidity] = grovepi.dht(sensor,blue) print(\"%.02f\"%(temp)) if __name__ == '__main__': ResourceHandler_3303_5700().main() Modify the python script in the /etc/svetovid/dm/3303/resources/5700.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore import grovepi import math # Connect the Grove Temperature & Humidity Sensor Pro to digital port D4 # This example uses the blue colored sensor. # SIG,NC,VCC,GND sensor = 4 # The Sensor goes on digital port 4. # temp_humidity_sensor_type # Grove Base Kit comes with the blue sensor. blue = 0 # The Blue colored sensor. white = 1 # The White colored sensor. class ResourceHandler_3303_5700(ResourceHandler): NAME = \"Sensor Value\" DESCRIPTION = '''\\ Last or Current Measured Value from the Sensor.''' DATATYPE = DataType.FLOAT EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise # TODO: print value to stdout # print(0.0) [temp,humidity] = grovepi.dht(sensor,blue) print(\"%.02f\"%(temp)) if __name__ == '__main__': ResourceHandler_3303_5700().main() Plug in the temperature sensor to digital port D4 of the GrovePi. Restart the Svetovid service: sudo systemctl restart svetovid.service --now Refresh device state in Coiote IoT DM and see if the Temperature object /3303 has appeared in the Objects tab and values are reported for the Sensor Value 5700 resource: Step 6: Implement the LwM2M push button based on the Multiple Axis Joystick object /3345 # Now you can implement the Push Button module based on the OMA DM Multiple Axis Joystick object /3345. Type in the terminal: $ sudo svetovid-fsdmtool generate --object 3345 --output-dir /etc/svetovid/dm --generator python Tip You can analyze the resource implementation in the /etc/svetovid/dm/3345 folder. For more details, see the Svetovid page on GitHub . Type in the terminal: cd /etc/svetovid/dm/3345/resources && ./5550 read . You should be able to see a default value reported in the command-line terminal. In home directory, create the file ~/button_object_forwarder.py and paste the following into it: SenseHat from sense_hat import SenseHat from time import sleep from fsdm import KvStore sense = SenseHat() sense.clear() #KvStore(namespace=3345).set('counter', 0) #KvStore(namespace=3345).set('state', False) released_before = False counter = 0 while True: for event in sense.stick.get_events(): if event.action == \"pressed\": if event.direction == \"middle\": sense.show_letter(\"M\") KvStore(namespace=3345).set('state', True) if released_before: counter = counter + 1 KvStore(namespace=3345).set('counter', counter) released_before = False elif event.action == \"released\": if event.direction == \"middle\": sense.show_letter(\"m\") KvStore(namespace=3345).set('state', False) released_before = True else: sense.clear() # Wait and clear the screen sleep(0.5) sense.clear() GrovePi from time import sleep import grovepi from fsdm import KvStore button = 3 KvStore(namespace=3345).set('counter', 0) KvStore(namespace=3345).set('state', False) released_before = False counter = 0 grovepi.pinMode(button, \"INPUT\") while True: try: state = grovepi.digitalRead(button) KvStore(namespace=3345).set('state', True) print(\"State:{}\".format(state)) if state == 1: if released_before: counter = counter + 1 print(\"Counter:{}\".format(counter)) KvStore(namespace=3345).set('counter', counter+1) released_before = False KvStore(namespace=3345).set('state', True) else: released_before = True KvStore(namespace=3345).set('state', False) sleep(.2) except IOError: print(\"Error\") Modify the python script in the /etc/svetovid/dm/3345/Digital_Input_Counter.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5501(ResourceHandler): NAME = \"Digital Input Counter\" DESCRIPTION = '''\\ The cumulative value of active state detected.''' DATATYPE = DataType.INTEGER EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise value = KvStore(namespace=3345).get('counter') if value is None: # The value was not set, so it's not found. # raise CoapError.NOT_FOUND value = 0 print(value) # TODO: print value to stdout # print(0) if __name__ == '__main__': ResourceHandler_3345_5501().main() Modify the python script in the /etc/svetovid/dm/3345/Digital_Input_State.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5500(ResourceHandler): NAME = \"Digital Input State\" DESCRIPTION = '''\\ The current state of a digital input.''' DATATYPE = DataType.BOOLEAN EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise state = KvStore(namespace=3345).get('state') if state is None: # The value was not set, so it's not found. raise CoapError.NOT_FOUND #state = False print(state) # TODO: print value to stdout #print(0) if __name__ == '__main__': ResourceHandler_3345_5500().main() Modify the /etc/svetovid/dm/3345/resources/5500 file: #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5500(ResourceHandler): NAME = \"Digital Input State\" DESCRIPTION = '''\\ The current state of a digital input.''' DATATYPE = DataType.BOOLEAN EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise state = KvStore(namespace=3345).get('state') if state is None: # The value was not set, so it's not found. raise CoapError.NOT_FOUND #state = False print(state) # TODO: print value to stdout #print(0) if __name__ == '__main__': ResourceHandler_3345_5500().main() Modify the /etc/svetovid/dm/3345/resources/5501 file: #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5501(ResourceHandler): NAME = \"Digital Input Counter\" DESCRIPTION = '''\\ The cumulative value of active state detected.''' DATATYPE = DataType.INTEGER EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise value = KvStore(namespace=3345).get('counter') if value is None: # The value was not set, so it's not found. # raise CoapError.NOT_FOUND value = 0 print(value) # TODO: print value to stdout # print(0) if __name__ == '__main__': ResourceHandler_3345_5501().main() Plug in the push button to digital port D3 of the GrovePi/Sense HAT. Restart Svetovid: sudo systemctl restart svetovid.service --now Refresh device state in Coiote IoT DM and see if the Multiple Axis Joystick object /3345 has appeared in the Objects tab and values are reported for the Digital Input State 5500 and Digital Input Counter 5501 resources:","title":"LwM2M on a Raspberry Pi"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#implementing-lwm2m-objects-on-raspberry-pi","text":"","title":"Implementing LwM2M objects on Raspberry Pi"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#introduction","text":"Svetovid is a LwM2M client that gives you tools to implement selected LwM2M objects for RaspberryPi-based IoT devices using Python programming language. Svetovid is based on a state-of-the-art Anjay LwM2M client developed by AVSystem. It features the FSDM (File System Data Model) in which LwM2M objects are mapped to folders that follow a particular schema, and executables behave as expected by the LwM2M client that loads and manages them. This tutorial will show you how to implement a temperature LwM2M object on your device and a push button using Svetovid. This will enable live readings of their resources (temperature, push button state and counter) in Coiote IoT DM.","title":"Introduction"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#prerequisites","text":"Raspberry Pi 3 or 4 with a configured operating system and a set-up WiFi connection. A Sense HAT or a GrovePi with a temperature sensor ( DHT11 or similar) and a push button ( Grove-button or similar). A user with access to the Coiote IoT Device Management platform and appropriate permissions.","title":"Prerequisites"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#step-1-prepare-your-sense-hatgrovepi","text":"","title":"Step 1: Prepare your Sense HAT/GrovePi"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#sense-hat","text":"Install the Sense HAT packages: sudo apt-get install sense-hat Check if Sense HAT is working correctly: Create a hello_world.py file: from sense_hat import SenseHat sense = SenseHat() sense.show_message(\"Hello World!\") Run the program: python hello_world.py If a Hello World! message is displayed, you're good to proceed. Note If you're new to Sense HAT, follow the getting started tutorial .","title":"Sense HAT"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#grovepi","text":"To install the GrovePi repository, paste and execute the following commands: mkdir ~/Dexter cd ~/Dexter git clone https://github.com/DexterInd/GrovePi cd ~/Dexter/GrovePi/Script bash ./update_grovepi.sh Check if the GrovePi libraries are working correctly: Connect a LED module to GrovePi port D4. In the terminal, type: cd ~/Dexter/GrovePi/Software/Python && python grove_led_blink.py The LED should start blinking.","title":"GrovePi"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#step-2-install-svetovid","text":"To install Svetovid, paste and execute the following commands into your command-line terminal: mkdir ~/AVSystem cd ~/AVSystem git clone https://github.com/AVSystem/Svetovid-raspberry-client.git cd Svetovid-raspberry-client sudo dpkg -i svetovid_20.11-raspberry_armhf.deb sudo dpkg -i svetovid-plugin-fsdm_20.11-raspberry_armhf.deb sudo dpkg -i avsystem_svetovid-20.11-raspberry-Linux-fsdmtool-runtime-python.deb In file /usr/local/share/svetovid/bin/fsdm/lwm2m_object_registry.py , find the https://raw.githubusercontent.com/OpenMobileAlliance/lwm2m-registry/test entry and replace it with https://raw.githubusercontent.com/OpenMobileAlliance/lwm2m-registry/prod .","title":"Step 2: Install Svetovid"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#step-3-register-your-device-in-coiote-iot-dm","text":"Disable the Svetovid service: sudo systemctl disable svetovid.service --now Set the server connection details: in /etc/svetovid/config/security.json : { \"1\": { \"ssid\": \"1\", \"server_uri\": \"coaps://eu.iot.avsystem.cloud:5684\", \"is_bootstrap\": \"0\", \"security_mode\": \"psk\", \"pubkey_or_identity_hex\": \"XXXX\", \"privkey_or_psk_hex\": \"XXXX\", \"server_pubkey_hex\": \"\", \"holdoff_s\": \"0\", \"bs_timeout_s\": \"0\" } } in /etc/svetovid/config/svd.json : { \"device\": { \"endpoint_name\": \"YYYY\", \"udp_listen_port\": 1234 }, \"logging\": { \"default_log_level\": \"trace\", \"log_level\": { \"svd\": \"trace\" } }, \"lwm2m_version_config\": { \"min\": \"1.0\", \"max\": \"1.1\" }, \"in_buffer_size_b\": 1024, \"out_buffer_size_b\": 1024, \"msg_cache_size_b\": 65536 } Note XXXX and YYYY should be replaced by the chosen values of endpoint name, PSK identity and PSK key. Tip XXXX values are in hex. To convert your plain text, use the following: echo -n '<your-text-value>' | xxd -p Restart the Svetovid service: sudo systemctl start svetovid.service --now","title":"Step 3: Register your device in Coiote IoT DM"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#step-4-connecting-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. raspberry_pi_test . In the Security mode section, select the security mode you've choosen in Compile the application step: Note If you choose Pre-Shared Key mode then type: In the Key identity field, the same name as in the Endpoint name field. In the Key field, the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. Analyze the objects exposed by the device. Note Your RaspberryPi-based device will feature a number of default LwM2M objects provided by Svetovid, for instance the Light Control /3311 .","title":"Step 4: Connecting to the LwM2M Server"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#step-5-implement-the-lwm2m-temperature-object-3303-only-for-grovepi","text":"Disable the Svetovid service: sudo systemctl disable svetovid.service --now Generate a stub object in your dm (data model) Svetovid folder by pasting and executing the following command in the terminal: $ sudo svetovid-fsdmtool generate --object 3303 --output-dir /etc/svetovid/dm --generator python Tip You can analyze the resource implementation in the /etc/svetovid/dm/3303 folder. For more details, see the Svetovid page on GitHub . Modify the python script in the /etc/svetovid/dm/3303/Sensor_Value.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore import grovepi import math # Connect the Grove Temperature & Humidity Sensor Pro to digital port D4 # This example uses the blue colored sensor. # SIG,NC,VCC,GND sensor = 4 # The Sensor goes on digital port 4. # temp_humidity_sensor_type # Grove Base Kit comes with the blue sensor. blue = 0 # The Blue colored sensor. white = 1 # The White colored sensor. class ResourceHandler_3303_5700(ResourceHandler): NAME = \"Sensor Value\" DESCRIPTION = '''\\ Last or Current Measured Value from the Sensor.''' DATATYPE = DataType.FLOAT EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise # TODO: print value to stdout # print(0.0) [temp,humidity] = grovepi.dht(sensor,blue) print(\"%.02f\"%(temp)) if __name__ == '__main__': ResourceHandler_3303_5700().main() Modify the python script in the /etc/svetovid/dm/3303/resources/5700.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore import grovepi import math # Connect the Grove Temperature & Humidity Sensor Pro to digital port D4 # This example uses the blue colored sensor. # SIG,NC,VCC,GND sensor = 4 # The Sensor goes on digital port 4. # temp_humidity_sensor_type # Grove Base Kit comes with the blue sensor. blue = 0 # The Blue colored sensor. white = 1 # The White colored sensor. class ResourceHandler_3303_5700(ResourceHandler): NAME = \"Sensor Value\" DESCRIPTION = '''\\ Last or Current Measured Value from the Sensor.''' DATATYPE = DataType.FLOAT EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise # TODO: print value to stdout # print(0.0) [temp,humidity] = grovepi.dht(sensor,blue) print(\"%.02f\"%(temp)) if __name__ == '__main__': ResourceHandler_3303_5700().main() Plug in the temperature sensor to digital port D4 of the GrovePi. Restart the Svetovid service: sudo systemctl restart svetovid.service --now Refresh device state in Coiote IoT DM and see if the Temperature object /3303 has appeared in the Objects tab and values are reported for the Sensor Value 5700 resource:","title":"Step 5: Implement the LwM2M temperature object /3303 (only for GrovePi)"},{"location":"Demo_Projects/Implementing_LwM2M_objects_on_RaspberryPi/#step-6-implement-the-lwm2m-push-button-based-on-the-multiple-axis-joystick-object-3345","text":"Now you can implement the Push Button module based on the OMA DM Multiple Axis Joystick object /3345. Type in the terminal: $ sudo svetovid-fsdmtool generate --object 3345 --output-dir /etc/svetovid/dm --generator python Tip You can analyze the resource implementation in the /etc/svetovid/dm/3345 folder. For more details, see the Svetovid page on GitHub . Type in the terminal: cd /etc/svetovid/dm/3345/resources && ./5550 read . You should be able to see a default value reported in the command-line terminal. In home directory, create the file ~/button_object_forwarder.py and paste the following into it: SenseHat from sense_hat import SenseHat from time import sleep from fsdm import KvStore sense = SenseHat() sense.clear() #KvStore(namespace=3345).set('counter', 0) #KvStore(namespace=3345).set('state', False) released_before = False counter = 0 while True: for event in sense.stick.get_events(): if event.action == \"pressed\": if event.direction == \"middle\": sense.show_letter(\"M\") KvStore(namespace=3345).set('state', True) if released_before: counter = counter + 1 KvStore(namespace=3345).set('counter', counter) released_before = False elif event.action == \"released\": if event.direction == \"middle\": sense.show_letter(\"m\") KvStore(namespace=3345).set('state', False) released_before = True else: sense.clear() # Wait and clear the screen sleep(0.5) sense.clear() GrovePi from time import sleep import grovepi from fsdm import KvStore button = 3 KvStore(namespace=3345).set('counter', 0) KvStore(namespace=3345).set('state', False) released_before = False counter = 0 grovepi.pinMode(button, \"INPUT\") while True: try: state = grovepi.digitalRead(button) KvStore(namespace=3345).set('state', True) print(\"State:{}\".format(state)) if state == 1: if released_before: counter = counter + 1 print(\"Counter:{}\".format(counter)) KvStore(namespace=3345).set('counter', counter+1) released_before = False KvStore(namespace=3345).set('state', True) else: released_before = True KvStore(namespace=3345).set('state', False) sleep(.2) except IOError: print(\"Error\") Modify the python script in the /etc/svetovid/dm/3345/Digital_Input_Counter.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5501(ResourceHandler): NAME = \"Digital Input Counter\" DESCRIPTION = '''\\ The cumulative value of active state detected.''' DATATYPE = DataType.INTEGER EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise value = KvStore(namespace=3345).get('counter') if value is None: # The value was not set, so it's not found. # raise CoapError.NOT_FOUND value = 0 print(value) # TODO: print value to stdout # print(0) if __name__ == '__main__': ResourceHandler_3345_5501().main() Modify the python script in the /etc/svetovid/dm/3345/Digital_Input_State.py file. Open the file, replace the contents with the following script and click Save : #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5500(ResourceHandler): NAME = \"Digital Input State\" DESCRIPTION = '''\\ The current state of a digital input.''' DATATYPE = DataType.BOOLEAN EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise state = KvStore(namespace=3345).get('state') if state is None: # The value was not set, so it's not found. raise CoapError.NOT_FOUND #state = False print(state) # TODO: print value to stdout #print(0) if __name__ == '__main__': ResourceHandler_3345_5500().main() Modify the /etc/svetovid/dm/3345/resources/5500 file: #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5500(ResourceHandler): NAME = \"Digital Input State\" DESCRIPTION = '''\\ The current state of a digital input.''' DATATYPE = DataType.BOOLEAN EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise state = KvStore(namespace=3345).get('state') if state is None: # The value was not set, so it's not found. raise CoapError.NOT_FOUND #state = False print(state) # TODO: print value to stdout #print(0) if __name__ == '__main__': ResourceHandler_3345_5500().main() Modify the /etc/svetovid/dm/3345/resources/5501 file: #!/usr/bin/env python # -*- encoding: utf-8 -*- from fsdm import ResourceHandler, CoapError, DataType, KvStore class ResourceHandler_3345_5501(ResourceHandler): NAME = \"Digital Input Counter\" DESCRIPTION = '''\\ The cumulative value of active state detected.''' DATATYPE = DataType.INTEGER EXTERNAL_NOTIFY = False def read(self, instance_id, # int resource_instance_id): # int for multiple resources, None otherwise value = KvStore(namespace=3345).get('counter') if value is None: # The value was not set, so it's not found. # raise CoapError.NOT_FOUND value = 0 print(value) # TODO: print value to stdout # print(0) if __name__ == '__main__': ResourceHandler_3345_5501().main() Plug in the push button to digital port D3 of the GrovePi/Sense HAT. Restart Svetovid: sudo systemctl restart svetovid.service --now Refresh device state in Coiote IoT DM and see if the Multiple Axis Joystick object /3345 has appeared in the Objects tab and values are reported for the Digital Input State 5500 and Digital Input Counter 5501 resources:","title":"Step 6: Implement the LwM2M push button based on the Multiple Axis Joystick object /3345"},{"location":"Demo_Projects/Tracking_tutorial/","text":"Building a tracking application using the Thingy:91, Azure IoT Hub and Power BI # Introduction # Build a tracking application using the Thingy:91 devkit, while leveraging the benefits of the LwM2M protocol and visualizing its data on Microsoft Power BI . Prerequisites # Thingy:91 with SIM with access to LTE-M or NB-IoT networks Coiote IoT DM account (premium) nRF Cloud account nRF Connect for Desktop Microsoft Azure account Microsoft Power BI account Serial communication program e.g. minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) Architecture # This tutorial uses the Thingy:91 prototyping platform in combination with the Coiote IoT Device Management platform to build a cellular-connected tracking application. The integration with nRF Cloud Locator enables cell-based localization and optimizes the usage of the onboard GNSS. The location data, in combination with additional telemetry data is sent to Azure IoT Hub and visualized using Microsoft Power BI . See also a tutorial on how to Connect Coiote IoT DM to Azure IoT Hub and visualize data on Power Bi on our YouTube channel. Part 1 - Connect the Thingy:91 to Coiote IoT DM using the LwM2M Anjay client # Set up the Anjay Zephyr Client # Get Zephyr and Python dependencies # To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project . Select and update OS Install dependencies Get Zephyr and install Python dependencies Install Zephyr SDK Clone the Anjay Zephyr repository # Open the command line interface on your machine and clone the Anjay Zephyr repository using Git : git clone https://github.com/AVSystem/Anjay-zephyr-client Compile the demo project # Connect the Thingy:91 board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , manifest file to west-nrf.yml , and run west update using the following commands: west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update For more information about the west build commands, see the Zephyr Project documentation . Go to the directory Anjay-zephyr-client/demo and configure the client using menuconfig . Menuconfig allows for, among others, enabling the GPS and cell-based location services . To open the configuration menu, run the command: west build -b thingy91_nrf9160ns -p -t menuconfig In the config screen: Open the folder: anjay-zephyr-client ---> Select: Enable manual requests for cell-based location Open the folder: Enable GPS on nRF9160-based devices ---> Select Enable A-GPS using Nordic Location Services over LwM2M After making the configuration changes, close the config menu by pressing Q and save it by pressing Y . Build the project using the updated configuration by running: west build Find the app_signed.hex file under the build/zephyr directory in the project folder. Write the firmware to the Thingy:91 # When using the Thingy:91, use the app_signed.hex file which you can find in the build/zephyr directory. Flash it using Programmer application in nRF Cloud for Desktop via MCUboot . For more information on flashing the Thingy:91 using MCU Boot, see link Powercycle the Thingy:91 to activate the application. Connect the Thingy:91 to Coiote IoT Device Management platform # To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , select Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: Think of a unique Endpoint name . Key Identity is the same as the Endpoint name. Create a Key and store it somewhere to retrieve later when configuring your device. Click the Add device button and click Confirm in the confirmation pop-up. Configure the Client # With the Thingy:91 still connected to a serial port interface, connect to your device using a serial communication program (e.g. Minicom, RealTerm or PuTTY). Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, press Tab . Check your default credentials by following the instructions in the program: anjay config show Update your device credentials by running the following commands: To make any changes to the configuration, stop the client: anjay stop To update the endpoint name , enter the endpoint name you created in Coiote IoT DM: anjay config set endpoint <endpoint name> To update the Pre-Shared Key , enter the key you created in Coiote IoT DM: anjay config set psk <key> Start the client using the new configurations: anjay start Go to the Coiote IoT DM. If your device is connected successfully its status will change to Registered . Part 2 - Enable nRF Cloud integration # Follow the instructions listed here to enable the nRF Location Service integration. If the connection to nRF Cloud Locator was successful, you will see the device location as a widget in the Coiote IoT DM Device Center. Part 3 - Connect Coiote IoT DM to Microsoft Azure # Start by logging into your Azure account. Create a new IoT Hub and a new storage account . Get the IoT Hub connection string and Azure Blob storage string from your Azure account. For information on how to retrieve these details, see Get the IoT hub connection string . In Coiote IoT DM, click Integrations from the left-side menu and select Hyperscaler Integration Center . Go to the Azure IoT Hub section and click Connect . In the dialog window, paste the IoT Hub connection string and Azure Blob storage string into the relevant fields. Create a new LwM2M template # In Coiote IoT DM, go to Integrations , open the tab Templates and create a new template by clicking the green button + Add new . Name your template and click the button + Add missing objects Select all of the following objects: 0 - LwM2M Security 1 - LwM2M Server 3 - Device 4 - Connectivity Monitoring 5 - Firmware Update 6 - Location 3303 - Temperature 3304 - Humidity 3313 - Accelerometer 3315 - Barometer 3347 - Push button 3420 - LED color light 10256 - ECID-Signal Measurement information 50001 - Location Assistance Set the CAPABILITY TYPE to Telemetry for the resources: 3303 - Temperature /5601 - Min Measured Value /5602 - Max Measured Value /5700 - Sensor Value 3304 - Humidity /5601 - Min Measured Value /5602 - Max Measured Value /5700 - Sensor Value 3313 - Accelerometer /5702 - X Value /5703 - Y Value /5704 - Z Value 3315 - Barometer /5601 - Min Measured Value /5602 - Max Measured Value /5700 - Sensor Value 3347 - LED color light /5500 - Digital Input State /5501 - Digital Input Counter Note Although the Location object 6 sends telemetry data, all location resources need to be configured as Property . Connect your device to Azure # In Coiote IoT DM, visit your Device inventory . Find the device you want to connect to Azure, click the three dots icon and select Connect to Azure . If the connection was successful, your device is now added to your Azure IoT Hub . You can find your device under: Device management > Devices . Set group value tracking on resources in Coiote IoT DM # In Coiote IoT DM, go to Device Groups . Open up the folder hyperscalercenter and open the subfolder which contains your device which is connected to Azure. Go to the Value tracking panel and click Add new . In the pop-up: Provide the resource path: Temperature.0.Sensor Value . In the Notification frequency section, provide the following values: At least once every - set it to 1 hour. Not more often than once every - set it to 10 minutes. Click Add new . Go through the same process for the resources: Humidity.0.Sensor Value , Barometer.0.Sensor Value , Location.0.Latitude and Location.0.Longitude . Part 4 - Connect Microsoft Azure to Power BI # Configuring message routing for sending telemetry data in Azure IoT Hub # Set up message routing # Go to your Azure IoT hub and add message routing: In the left-side menu, under Hub settings , select Message routing and click + Add . Provide a name for your event, e.g. EventRoute . From the Endpoint drop-down list, select events . From the Data source drop-down list, select Device Telemetry Messages . In the Routing query , paste the following: IS_DEFINED($body.lwm2m.6.0.0.value) OR IS_DEFINED($body.lwm2m.6.0.1.value) OR IS_DEFINED($body.lwm2m.3303.0.5700.value) OR IS_DEFINED($body.lwm2m.3304.0.5700.value) OR IS_DEFINED($body.lwm2m.3315.0.5700.value) Click Save . While in the Message routing panel, go to the Enrich messages tab to set up location tracking: For latitude: Name - type lat Value - copy and paste $twin.properties.reported.lwm2m.6.0.0.value Endpoint(s) - select events For longitude: Name - type lon Value - copy and paste $twin.properties.reported.lwm2m.6.0.1.value Endpoint(s) - select events Set up a Stream Analytics Job # Use search to go to Stream analytics jobs and create a job for transferring the gathered data to Power BI. Click + Create and provide the following: Resource group - pick your resource group. Instance Name - e.g. lwm2m-to-powerbi . Region - select the region closest to your device\u2019s location Click Review + Create . Once your deployment is complete, click Go to resource . While in your Stream Analytics job panel, add a stream input and output and write a query : Under Job topology , select Inputs . From the + Add stream input drop-down list, select IoT Hub and provide the following: Input alias - e.g. thingy91-input . Consumer group - pick the $Default group. Click Save . Under Job topology , select Outputs . From the + Add drop-down list, select Power BI In the Power BI right-hand side panel, provide the following: Output alias - e.g. thingy91-output Select - Provide Power BI settings manually Group workspace - The ID can be found in the powerBI URL for the workspace. Authentication mode - User token Dataset name - e.g. AVSystemIoTHubDataSet Table name - e.g. Data Click the button Authorize and login to your Power BI account Click Save . Under Job topology , select Query . Paste the following query into the query input field (remember to adjust your naming inside the query if needed): SELECT CAST(\"lwm2m\".\"3303\".\"0\".\"5700\".value as float) as temperature, CAST(\"lwm2m\".\"3304\".\"0\".\"5700\".value as float) as humidity, CAST(\"lwm2m\".\"3315\".\"0\".\"5700\".value as float) as barometer, CAST(\"lwm2m\".\"3313\".\"0\".\"5702\".value as float) as xValue, CAST(\"lwm2m\".\"3313\".\"0\".\"5703\".value as float) as yValue, CAST(\"lwm2m\".\"3313\".\"0\".\"5704\".value as float) as zValue, GetMetadataPropertyValue(\"thingy91-input\", '[User].[lat]') as lat, GetMetadataPropertyValue(\"thingy91-input\", '[User].[lon]') as lon, EventProcessedUtcTime as processedTimestamp, IoTHub.EnqueuedTime as iotHubTimestamp, IoTHub.ConnectionDeviceId as deviceId INTO \"thingy91-output\" FROM \"thingy91-input\" Click Save query . Click Test query to validate if the query works as expected. In your Stream analytics job, go to Overview and click Start . Confirm by clicking Start again in the right-wide window to run the created query. Data visualization using Power BI # Once the query is finished, you can go to Power BI to create a visualization for the data you have gathered. Go to https://powerbi.microsoft.com/ and sign in to your account. Go to the workspace you connected via Stream Analytics Jobs and find your recently created dataset. Click the more options icon and select Create report . Now start building some nice visualizations, such as a map for your location and line charts for your temperature, humidity and barometer values. Eventually, it may look something like this: Info Did you manage to setup the integration and display data in Power BI? Congratulations! If not, don't worry, there are many engineers ready to support you. Join our AVSystem Discord to get in touch with our experts.","title":"Asset Tracking using Thingy:91 and Power BI"},{"location":"Demo_Projects/Tracking_tutorial/#building-a-tracking-application-using-the-thingy91-azure-iot-hub-and-power-bi","text":"","title":"Building a tracking application using the Thingy:91, Azure IoT Hub and Power BI"},{"location":"Demo_Projects/Tracking_tutorial/#introduction","text":"Build a tracking application using the Thingy:91 devkit, while leveraging the benefits of the LwM2M protocol and visualizing its data on Microsoft Power BI .","title":"Introduction"},{"location":"Demo_Projects/Tracking_tutorial/#prerequisites","text":"Thingy:91 with SIM with access to LTE-M or NB-IoT networks Coiote IoT DM account (premium) nRF Cloud account nRF Connect for Desktop Microsoft Azure account Microsoft Power BI account Serial communication program e.g. minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows)","title":"Prerequisites"},{"location":"Demo_Projects/Tracking_tutorial/#architecture","text":"This tutorial uses the Thingy:91 prototyping platform in combination with the Coiote IoT Device Management platform to build a cellular-connected tracking application. The integration with nRF Cloud Locator enables cell-based localization and optimizes the usage of the onboard GNSS. The location data, in combination with additional telemetry data is sent to Azure IoT Hub and visualized using Microsoft Power BI . See also a tutorial on how to Connect Coiote IoT DM to Azure IoT Hub and visualize data on Power Bi on our YouTube channel.","title":"Architecture"},{"location":"Demo_Projects/Tracking_tutorial/#part-1-connect-the-thingy91-to-coiote-iot-dm-using-the-lwm2m-anjay-client","text":"","title":"Part 1 - Connect the Thingy:91 to Coiote IoT DM using the LwM2M Anjay client"},{"location":"Demo_Projects/Tracking_tutorial/#set-up-the-anjay-zephyr-client","text":"","title":"Set up the Anjay Zephyr Client"},{"location":"Demo_Projects/Tracking_tutorial/#get-zephyr-and-python-dependencies","text":"To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project . Select and update OS Install dependencies Get Zephyr and install Python dependencies Install Zephyr SDK","title":"Get Zephyr and Python dependencies"},{"location":"Demo_Projects/Tracking_tutorial/#clone-the-anjay-zephyr-repository","text":"Open the command line interface on your machine and clone the Anjay Zephyr repository using Git : git clone https://github.com/AVSystem/Anjay-zephyr-client","title":"Clone the Anjay Zephyr repository"},{"location":"Demo_Projects/Tracking_tutorial/#compile-the-demo-project","text":"Connect the Thingy:91 board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , manifest file to west-nrf.yml , and run west update using the following commands: west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update For more information about the west build commands, see the Zephyr Project documentation . Go to the directory Anjay-zephyr-client/demo and configure the client using menuconfig . Menuconfig allows for, among others, enabling the GPS and cell-based location services . To open the configuration menu, run the command: west build -b thingy91_nrf9160ns -p -t menuconfig In the config screen: Open the folder: anjay-zephyr-client ---> Select: Enable manual requests for cell-based location Open the folder: Enable GPS on nRF9160-based devices ---> Select Enable A-GPS using Nordic Location Services over LwM2M After making the configuration changes, close the config menu by pressing Q and save it by pressing Y . Build the project using the updated configuration by running: west build Find the app_signed.hex file under the build/zephyr directory in the project folder.","title":"Compile the demo project"},{"location":"Demo_Projects/Tracking_tutorial/#write-the-firmware-to-the-thingy91","text":"When using the Thingy:91, use the app_signed.hex file which you can find in the build/zephyr directory. Flash it using Programmer application in nRF Cloud for Desktop via MCUboot . For more information on flashing the Thingy:91 using MCU Boot, see link Powercycle the Thingy:91 to activate the application.","title":"Write the firmware to the Thingy:91"},{"location":"Demo_Projects/Tracking_tutorial/#connect-the-thingy91-to-coiote-iot-device-management-platform","text":"To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , select Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: Think of a unique Endpoint name . Key Identity is the same as the Endpoint name. Create a Key and store it somewhere to retrieve later when configuring your device. Click the Add device button and click Confirm in the confirmation pop-up.","title":"Connect the Thingy:91 to Coiote IoT Device Management platform"},{"location":"Demo_Projects/Tracking_tutorial/#configure-the-client","text":"With the Thingy:91 still connected to a serial port interface, connect to your device using a serial communication program (e.g. Minicom, RealTerm or PuTTY). Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, press Tab . Check your default credentials by following the instructions in the program: anjay config show Update your device credentials by running the following commands: To make any changes to the configuration, stop the client: anjay stop To update the endpoint name , enter the endpoint name you created in Coiote IoT DM: anjay config set endpoint <endpoint name> To update the Pre-Shared Key , enter the key you created in Coiote IoT DM: anjay config set psk <key> Start the client using the new configurations: anjay start Go to the Coiote IoT DM. If your device is connected successfully its status will change to Registered .","title":"Configure the Client"},{"location":"Demo_Projects/Tracking_tutorial/#part-2-enable-nrf-cloud-integration","text":"Follow the instructions listed here to enable the nRF Location Service integration. If the connection to nRF Cloud Locator was successful, you will see the device location as a widget in the Coiote IoT DM Device Center.","title":"Part 2 - Enable nRF Cloud integration"},{"location":"Demo_Projects/Tracking_tutorial/#part-3-connect-coiote-iot-dm-to-microsoft-azure","text":"Start by logging into your Azure account. Create a new IoT Hub and a new storage account . Get the IoT Hub connection string and Azure Blob storage string from your Azure account. For information on how to retrieve these details, see Get the IoT hub connection string . In Coiote IoT DM, click Integrations from the left-side menu and select Hyperscaler Integration Center . Go to the Azure IoT Hub section and click Connect . In the dialog window, paste the IoT Hub connection string and Azure Blob storage string into the relevant fields.","title":"Part 3 - Connect Coiote IoT DM to Microsoft Azure"},{"location":"Demo_Projects/Tracking_tutorial/#create-a-new-lwm2m-template","text":"In Coiote IoT DM, go to Integrations , open the tab Templates and create a new template by clicking the green button + Add new . Name your template and click the button + Add missing objects Select all of the following objects: 0 - LwM2M Security 1 - LwM2M Server 3 - Device 4 - Connectivity Monitoring 5 - Firmware Update 6 - Location 3303 - Temperature 3304 - Humidity 3313 - Accelerometer 3315 - Barometer 3347 - Push button 3420 - LED color light 10256 - ECID-Signal Measurement information 50001 - Location Assistance Set the CAPABILITY TYPE to Telemetry for the resources: 3303 - Temperature /5601 - Min Measured Value /5602 - Max Measured Value /5700 - Sensor Value 3304 - Humidity /5601 - Min Measured Value /5602 - Max Measured Value /5700 - Sensor Value 3313 - Accelerometer /5702 - X Value /5703 - Y Value /5704 - Z Value 3315 - Barometer /5601 - Min Measured Value /5602 - Max Measured Value /5700 - Sensor Value 3347 - LED color light /5500 - Digital Input State /5501 - Digital Input Counter Note Although the Location object 6 sends telemetry data, all location resources need to be configured as Property .","title":"Create a new LwM2M template"},{"location":"Demo_Projects/Tracking_tutorial/#connect-your-device-to-azure","text":"In Coiote IoT DM, visit your Device inventory . Find the device you want to connect to Azure, click the three dots icon and select Connect to Azure . If the connection was successful, your device is now added to your Azure IoT Hub . You can find your device under: Device management > Devices .","title":"Connect your device to Azure"},{"location":"Demo_Projects/Tracking_tutorial/#set-group-value-tracking-on-resources-in-coiote-iot-dm","text":"In Coiote IoT DM, go to Device Groups . Open up the folder hyperscalercenter and open the subfolder which contains your device which is connected to Azure. Go to the Value tracking panel and click Add new . In the pop-up: Provide the resource path: Temperature.0.Sensor Value . In the Notification frequency section, provide the following values: At least once every - set it to 1 hour. Not more often than once every - set it to 10 minutes. Click Add new . Go through the same process for the resources: Humidity.0.Sensor Value , Barometer.0.Sensor Value , Location.0.Latitude and Location.0.Longitude .","title":"Set group value tracking on resources in Coiote IoT DM"},{"location":"Demo_Projects/Tracking_tutorial/#part-4-connect-microsoft-azure-to-power-bi","text":"","title":"Part 4 - Connect Microsoft Azure to Power BI"},{"location":"Demo_Projects/Tracking_tutorial/#configuring-message-routing-for-sending-telemetry-data-in-azure-iot-hub","text":"","title":"Configuring message routing for sending telemetry data in Azure IoT Hub"},{"location":"Demo_Projects/Tracking_tutorial/#set-up-message-routing","text":"Go to your Azure IoT hub and add message routing: In the left-side menu, under Hub settings , select Message routing and click + Add . Provide a name for your event, e.g. EventRoute . From the Endpoint drop-down list, select events . From the Data source drop-down list, select Device Telemetry Messages . In the Routing query , paste the following: IS_DEFINED($body.lwm2m.6.0.0.value) OR IS_DEFINED($body.lwm2m.6.0.1.value) OR IS_DEFINED($body.lwm2m.3303.0.5700.value) OR IS_DEFINED($body.lwm2m.3304.0.5700.value) OR IS_DEFINED($body.lwm2m.3315.0.5700.value) Click Save . While in the Message routing panel, go to the Enrich messages tab to set up location tracking: For latitude: Name - type lat Value - copy and paste $twin.properties.reported.lwm2m.6.0.0.value Endpoint(s) - select events For longitude: Name - type lon Value - copy and paste $twin.properties.reported.lwm2m.6.0.1.value Endpoint(s) - select events","title":"Set up message routing"},{"location":"Demo_Projects/Tracking_tutorial/#set-up-a-stream-analytics-job","text":"Use search to go to Stream analytics jobs and create a job for transferring the gathered data to Power BI. Click + Create and provide the following: Resource group - pick your resource group. Instance Name - e.g. lwm2m-to-powerbi . Region - select the region closest to your device\u2019s location Click Review + Create . Once your deployment is complete, click Go to resource . While in your Stream Analytics job panel, add a stream input and output and write a query : Under Job topology , select Inputs . From the + Add stream input drop-down list, select IoT Hub and provide the following: Input alias - e.g. thingy91-input . Consumer group - pick the $Default group. Click Save . Under Job topology , select Outputs . From the + Add drop-down list, select Power BI In the Power BI right-hand side panel, provide the following: Output alias - e.g. thingy91-output Select - Provide Power BI settings manually Group workspace - The ID can be found in the powerBI URL for the workspace. Authentication mode - User token Dataset name - e.g. AVSystemIoTHubDataSet Table name - e.g. Data Click the button Authorize and login to your Power BI account Click Save . Under Job topology , select Query . Paste the following query into the query input field (remember to adjust your naming inside the query if needed): SELECT CAST(\"lwm2m\".\"3303\".\"0\".\"5700\".value as float) as temperature, CAST(\"lwm2m\".\"3304\".\"0\".\"5700\".value as float) as humidity, CAST(\"lwm2m\".\"3315\".\"0\".\"5700\".value as float) as barometer, CAST(\"lwm2m\".\"3313\".\"0\".\"5702\".value as float) as xValue, CAST(\"lwm2m\".\"3313\".\"0\".\"5703\".value as float) as yValue, CAST(\"lwm2m\".\"3313\".\"0\".\"5704\".value as float) as zValue, GetMetadataPropertyValue(\"thingy91-input\", '[User].[lat]') as lat, GetMetadataPropertyValue(\"thingy91-input\", '[User].[lon]') as lon, EventProcessedUtcTime as processedTimestamp, IoTHub.EnqueuedTime as iotHubTimestamp, IoTHub.ConnectionDeviceId as deviceId INTO \"thingy91-output\" FROM \"thingy91-input\" Click Save query . Click Test query to validate if the query works as expected. In your Stream analytics job, go to Overview and click Start . Confirm by clicking Start again in the right-wide window to run the created query.","title":"Set up a Stream Analytics Job"},{"location":"Demo_Projects/Tracking_tutorial/#data-visualization-using-power-bi","text":"Once the query is finished, you can go to Power BI to create a visualization for the data you have gathered. Go to https://powerbi.microsoft.com/ and sign in to your account. Go to the workspace you connected via Stream Analytics Jobs and find your recently created dataset. Click the more options icon and select Create report . Now start building some nice visualizations, such as a map for your location and line charts for your temperature, humidity and barometer values. Eventually, it may look something like this: Info Did you manage to setup the integration and display data in Power BI? Congratulations! If not, don't worry, there are many engineers ready to support you. Join our AVSystem Discord to get in touch with our experts.","title":"Data visualization using Power BI"},{"location":"LwM2M_Client/Getting_started/","text":"Getting started # Start developing LwM2M applications on your boards and IoT devices in just a few clicks using our Anjay LwM2M Client. Espressif ESP32 # M5StickC # Start integration M5StickC/BG96 # Start integration ESP32-DevKitC/BG96 # Start integration STMicroelectronics # Build a LwM2M application for your ST board using I-Cube Anjay from scratch by following our I-CUBE-Anjay guide . STM32L496G-DISCO/BG96 # Integrate your P-L496G-CELL02 Discovery kit board along with the default-provided Quectel BG96 modem using our Anjay LwM2M Client based on freeRTOS. Start integration B-L462E-CELL1/TYPE1SC # Integrate your B-L462E-CELL1 Discovery kit board along with the TYPE 1SE module with built-in eSIM (ST4SIM-200M) using our Anjay LwM2M Client based on freeRTOS. Start integration B-L475E-IOT01A # Integrate your B-L475E-IOT01A Discovery kit board using our Anjay LwM2M Client based on Zephyr OS. Start integration B-U585I-IOT02A/BG96 # Integrate your B-U585I-IOT02A/BG96 Discovery kit board using our Anjay LwM2M Client based on Zephyr OS. Start integration Nordic Semiconductor # Thingy:91 # Integrate your Thingy:91 board using our Anjay LwM2M Client based on Zephyr OS. Start integration nRF9160 # Integrate your nRF9160 board using our Anjay LwM2M Client based on Zephyr OS. Start integration","title":"Getting started"},{"location":"LwM2M_Client/Getting_started/#getting-started","text":"Start developing LwM2M applications on your boards and IoT devices in just a few clicks using our Anjay LwM2M Client.","title":"Getting started"},{"location":"LwM2M_Client/Getting_started/#espressif-esp32","text":"","title":"Espressif ESP32"},{"location":"LwM2M_Client/Getting_started/#m5stickc","text":"Start integration","title":"M5StickC"},{"location":"LwM2M_Client/Getting_started/#m5stickcbg96","text":"Start integration","title":"M5StickC/BG96"},{"location":"LwM2M_Client/Getting_started/#esp32-devkitcbg96","text":"Start integration","title":"ESP32-DevKitC/BG96"},{"location":"LwM2M_Client/Getting_started/#stmicroelectronics","text":"Build a LwM2M application for your ST board using I-Cube Anjay from scratch by following our I-CUBE-Anjay guide .","title":"STMicroelectronics"},{"location":"LwM2M_Client/Getting_started/#stm32l496g-discobg96","text":"Integrate your P-L496G-CELL02 Discovery kit board along with the default-provided Quectel BG96 modem using our Anjay LwM2M Client based on freeRTOS. Start integration","title":"STM32L496G-DISCO/BG96"},{"location":"LwM2M_Client/Getting_started/#b-l462e-cell1type1sc","text":"Integrate your B-L462E-CELL1 Discovery kit board along with the TYPE 1SE module with built-in eSIM (ST4SIM-200M) using our Anjay LwM2M Client based on freeRTOS. Start integration","title":"B-L462E-CELL1/TYPE1SC"},{"location":"LwM2M_Client/Getting_started/#b-l475e-iot01a","text":"Integrate your B-L475E-IOT01A Discovery kit board using our Anjay LwM2M Client based on Zephyr OS. Start integration","title":"B-L475E-IOT01A"},{"location":"LwM2M_Client/Getting_started/#b-u585i-iot02abg96","text":"Integrate your B-U585I-IOT02A/BG96 Discovery kit board using our Anjay LwM2M Client based on Zephyr OS. Start integration","title":"B-U585I-IOT02A/BG96"},{"location":"LwM2M_Client/Getting_started/#nordic-semiconductor","text":"","title":"Nordic Semiconductor"},{"location":"LwM2M_Client/Getting_started/#thingy91","text":"Integrate your Thingy:91 board using our Anjay LwM2M Client based on Zephyr OS. Start integration","title":"Thingy:91"},{"location":"LwM2M_Client/Getting_started/#nrf9160","text":"Integrate your nRF9160 board using our Anjay LwM2M Client based on Zephyr OS. Start integration","title":"nRF9160"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/","text":"ESP32-DevKitC with BG96 # Integrate your ESP32-based device with Quectel BG96 module to manage it via Coiote IoT DM. Prerequisites # An ESP32 device. A BG96 module with internet connection (it is strongly recommended to have a BG96 with firmware version BG96MAR03A06M1G). Installed ESP-IDF and dependencies (installation steps 1-4 from ESP32 official documentation ). Supported ESP-IDF version is v4.4. A user with access to the Coiote IoT Device Management platform . Step 1: Prepare project # Create a project directory for the integration. Open a command line interface and run git clone https://github.com/AVSystem/Anjay-esp32-client --recursive . Run . $HOME/esp/esp-idf/export.sh and idf.py set-target esp32 . Open the menuconfig with the idf.py menuconfig command, navigate to Component config -> anjay-esp32-client . In Choose targeted development board , select ESP32-DevKitC and derivatives from the list of supported boards. In Choose an interface , select External BG96 module . In BG96 module configuration , specify the UART port, Tx pin and Rx pin for the BG96 module. Example port and pin numbers are provided in the screenshot below. In Client options , provide device credentials and Server URI: Endpoint name - your device endpoint name Server URI - the address and port of your Coiote IoT DM installation, e.g. coaps://eu.iot.avsystem.cloud:5684 Security mode - the PSK security mode PSK configuration - the PSK identity and PSK key In the Connection configuration , set APN name to internet for the sake of this tutorial. However, APN name depends on your SIM card operator. Press s on the keyboard to Save the configuration. Step 2: Connect BG96 module to a ESP32-DevKitC # Connect the Tx, Rx and GND pins, respectively, to the ESP32-DevKitC pins selected in the previous step. Step 3: Add device to Coiote IoT DM # To connect your ESP32-DevKitC to the Coiote IoT Device Management platform, use your access to a Coiote IoT DM installation, or register at https://eu.iot.avsystem.cloud/ to get access. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID field, type the endpoint name provided in the IDF menuconfig Client options , e.g. ESP32_test . In the Security mode section, select the PSK mode. In the Key identity field, type the identity provided in the IDF menuconfig Client options , e.g. ESP32_test . In the Key field, type the psk key provided in the IDF menuconfig Client options . Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, the server is waiting for the board to connect. You can now start connecting the device. Step 4: Flash ESP32-DevKitC # Open the command line interface, go to your project directory, and run idf.py flash monitor .","title":"ESP32-DevKitC with BG96"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/#esp32-devkitc-with-bg96","text":"Integrate your ESP32-based device with Quectel BG96 module to manage it via Coiote IoT DM.","title":"ESP32-DevKitC with BG96"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/#prerequisites","text":"An ESP32 device. A BG96 module with internet connection (it is strongly recommended to have a BG96 with firmware version BG96MAR03A06M1G). Installed ESP-IDF and dependencies (installation steps 1-4 from ESP32 official documentation ). Supported ESP-IDF version is v4.4. A user with access to the Coiote IoT Device Management platform .","title":"Prerequisites"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/#step-1-prepare-project","text":"Create a project directory for the integration. Open a command line interface and run git clone https://github.com/AVSystem/Anjay-esp32-client --recursive . Run . $HOME/esp/esp-idf/export.sh and idf.py set-target esp32 . Open the menuconfig with the idf.py menuconfig command, navigate to Component config -> anjay-esp32-client . In Choose targeted development board , select ESP32-DevKitC and derivatives from the list of supported boards. In Choose an interface , select External BG96 module . In BG96 module configuration , specify the UART port, Tx pin and Rx pin for the BG96 module. Example port and pin numbers are provided in the screenshot below. In Client options , provide device credentials and Server URI: Endpoint name - your device endpoint name Server URI - the address and port of your Coiote IoT DM installation, e.g. coaps://eu.iot.avsystem.cloud:5684 Security mode - the PSK security mode PSK configuration - the PSK identity and PSK key In the Connection configuration , set APN name to internet for the sake of this tutorial. However, APN name depends on your SIM card operator. Press s on the keyboard to Save the configuration.","title":"Step 1: Prepare project"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/#step-2-connect-bg96-module-to-a-esp32-devkitc","text":"Connect the Tx, Rx and GND pins, respectively, to the ESP32-DevKitC pins selected in the previous step.","title":"Step 2: Connect BG96 module to a ESP32-DevKitC"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/#step-3-add-device-to-coiote-iot-dm","text":"To connect your ESP32-DevKitC to the Coiote IoT Device Management platform, use your access to a Coiote IoT DM installation, or register at https://eu.iot.avsystem.cloud/ to get access. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID field, type the endpoint name provided in the IDF menuconfig Client options , e.g. ESP32_test . In the Security mode section, select the PSK mode. In the Key identity field, type the identity provided in the IDF menuconfig Client options , e.g. ESP32_test . In the Key field, type the psk key provided in the IDF menuconfig Client options . Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, the server is waiting for the board to connect. You can now start connecting the device.","title":"Step 3: Add device to Coiote IoT DM"},{"location":"LwM2M_Client/ESP32/ESP32-DevKitCBG96/#step-4-flash-esp32-devkitc","text":"Open the command line interface, go to your project directory, and run idf.py flash monitor .","title":"Step 4: Flash ESP32-DevKitC"},{"location":"LwM2M_Client/ESP32/M5Stick/","text":"M5StickC # Integrate your ESP32-based device to manage it via Coiote IoT DM. Prerequisites # An M5StickC device. Installed ESP-IDF and dependencies (installation steps 1-4 from ESP32 official documentation ). Supported ESP-IDF version is v4.4. A user with access to the Coiote IoT Device Management platform. Step 1: Download the Anjay ESP32 client files # Create a project directory for the integration. Go to https://github.com/AVSystem/Anjay-esp32-client/releases and download m5stickc-plus.bin and nvs_partition_gen.py to your project directory. Step 2: Configure the client using an NVS partition # Create a nvs_config.csv file and save it in your project directory. In the file, provide your credentials in [wifi_ssid], [wifi_password], [endpoint_name], [identity], [psk], [lwm2m_server_uri] (without the [] brackets). Use the following snippet as a template: key,type,encoding,value config,namespace,, wifi_ssid,data,string,[wifi_ssid] wifi_pswd,data,string,[wifi_password] wifi_inter_en,data,u8,1 endpoint_name,data,string,[endpoint_name] identity,data,string,[identity] psk,data,string,[psk] uri,data,string,[lwm2m_server_uri] writable_wifi,namespace,, wifi_ssid,data,string,[wifi_ssid] wifi_pswd,data,string,[wifi_password] wifi_inter_en,data,u8,0 Note The additional parameters under the writable_wifi namespace are used to provide a secondary Wi-Fi configuration (it is not obligatory). This allows for switching between Wi-Fi configurations while the device is running. Note The nvs_config.csv file can also be downloaded from https://github.com/AVSystem/Anjay-esp32-client/releases Open a command line interface, go to your project directory, and generate the NVS partition: Linux pip3 install future cryptography python3 nvs_partition_gen.py generate nvs_config.csv nvs_config.bin 0x4000 Windows pip3 install future cryptography python nvs_partition_gen.py generate nvs_config.csv nvs_config.bin 0x4000 Step 3: Add device to Coiote IoT DM # To connect your M5StickC to the Coiote IoT Device Management platform, use your access to a Coiote IoT DM installation, or register at https://eu.iot.avsystem.cloud/ to get access. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID field, type the endpoint name provided in the nvs_config.csv , e.g. ESP32_test . In the Security mode section, select the PSK mode. In the Key identity field, type the name provided in the nvs_config.csv , e.g. ESP32_test . In the Key field, type the psk key provided in the nvs_config.csv . Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, the server is waiting for the board to connect. You can now start connecting the device. Step 4: Flash the board and run device # Connect the M5Stick board to a USB port of your machine and open ESP-IDF command line application. Use pre-built binaries to flash the board and provide credentials by flashing the NVS partition binary. Install the esptool.py : pip install esptool Flash the board: Tip Before flashing the device you should erase the flash first to make sure you have correct settings: Linux esptool.py erase_flash Windows esptool erase_flash Linux esptool.py -b 750000 --chip esp32 write_flash 0x0000 m5stickc-plus.bin Windows esptool -b 750000 --chip esp32 write_flash 0x0000 m5stickc-plus.bin Flash the NVS partition binary: Linux esptool.py -b 750000 --chip esp32 write_flash 0x9000 nvs_config.bin Windows esptool -b 750000 --chip esp32 write_flash 0x9000 nvs_config.bin Once executed, the device will be reset and run with the configuration you provided. M5StickC LwM2M objects # After successful connection to Coiote IoT DM, you can explore the available device objects. Target Objects ESP32 common Security (/0) Server (/1) Device (/3) Firmware Update (/5) WLAN connectivity (/12) M5StickC-Plus Push button (/3347) Light control (/3311) Temperature sensor (/3303) Accelerometer (/3313) Gyroscope (/3343) Upgrade device firmware over the air # To perform a FOTA upgrade, you need an established connection between the M5StickC and Coiote IoT DM (see instructions above). Build new firmware version # Open a command line interface and run git clone https://github.com/AVSystem/Anjay-esp32-client . Go to the directory of the cloned repository and run idf.py set-target esp32 . Run git submodule update --recursive --init . Run idf.py menuconfig , navigate to Component config/anjay-esp32-client , and from the supported boards, select M5StickC . Press s and enter to save. Run idf.py build . Once executed, check if the binary file has been built in the following path $PROJECT_DIR/build/anjay-esp32-client/build . Schedule upgrade in Coiote IoT DM # In your Coiote IoT DM account, select your device in Device inventory and click the LwM2M Firmware tab. Click Schedule new firmware upgrade . Click Upload to select the binary file from your local drive, select COAP in the Image delivery protocol , and click Upgrade . Tip The COAPS option is also supported. To use it, you may need to additionally provide the Base URI parameter (depending on your server settings). The FOTA upgrade is now scheduled. Note that it might take a few minutes to complete. Once the upgrade is finished, you can check the new version of the firmware under Current firmware .","title":"M5StickC"},{"location":"LwM2M_Client/ESP32/M5Stick/#m5stickc","text":"Integrate your ESP32-based device to manage it via Coiote IoT DM.","title":"M5StickC"},{"location":"LwM2M_Client/ESP32/M5Stick/#prerequisites","text":"An M5StickC device. Installed ESP-IDF and dependencies (installation steps 1-4 from ESP32 official documentation ). Supported ESP-IDF version is v4.4. A user with access to the Coiote IoT Device Management platform.","title":"Prerequisites"},{"location":"LwM2M_Client/ESP32/M5Stick/#step-1-download-the-anjay-esp32-client-files","text":"Create a project directory for the integration. Go to https://github.com/AVSystem/Anjay-esp32-client/releases and download m5stickc-plus.bin and nvs_partition_gen.py to your project directory.","title":"Step 1: Download the Anjay ESP32 client files"},{"location":"LwM2M_Client/ESP32/M5Stick/#step-2-configure-the-client-using-an-nvs-partition","text":"Create a nvs_config.csv file and save it in your project directory. In the file, provide your credentials in [wifi_ssid], [wifi_password], [endpoint_name], [identity], [psk], [lwm2m_server_uri] (without the [] brackets). Use the following snippet as a template: key,type,encoding,value config,namespace,, wifi_ssid,data,string,[wifi_ssid] wifi_pswd,data,string,[wifi_password] wifi_inter_en,data,u8,1 endpoint_name,data,string,[endpoint_name] identity,data,string,[identity] psk,data,string,[psk] uri,data,string,[lwm2m_server_uri] writable_wifi,namespace,, wifi_ssid,data,string,[wifi_ssid] wifi_pswd,data,string,[wifi_password] wifi_inter_en,data,u8,0 Note The additional parameters under the writable_wifi namespace are used to provide a secondary Wi-Fi configuration (it is not obligatory). This allows for switching between Wi-Fi configurations while the device is running. Note The nvs_config.csv file can also be downloaded from https://github.com/AVSystem/Anjay-esp32-client/releases Open a command line interface, go to your project directory, and generate the NVS partition: Linux pip3 install future cryptography python3 nvs_partition_gen.py generate nvs_config.csv nvs_config.bin 0x4000 Windows pip3 install future cryptography python nvs_partition_gen.py generate nvs_config.csv nvs_config.bin 0x4000","title":"Step 2: Configure the client using an NVS partition"},{"location":"LwM2M_Client/ESP32/M5Stick/#step-3-add-device-to-coiote-iot-dm","text":"To connect your M5StickC to the Coiote IoT Device Management platform, use your access to a Coiote IoT DM installation, or register at https://eu.iot.avsystem.cloud/ to get access. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID field, type the endpoint name provided in the nvs_config.csv , e.g. ESP32_test . In the Security mode section, select the PSK mode. In the Key identity field, type the name provided in the nvs_config.csv , e.g. ESP32_test . In the Key field, type the psk key provided in the nvs_config.csv . Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, the server is waiting for the board to connect. You can now start connecting the device.","title":"Step 3: Add device to Coiote IoT DM"},{"location":"LwM2M_Client/ESP32/M5Stick/#step-4-flash-the-board-and-run-device","text":"Connect the M5Stick board to a USB port of your machine and open ESP-IDF command line application. Use pre-built binaries to flash the board and provide credentials by flashing the NVS partition binary. Install the esptool.py : pip install esptool Flash the board: Tip Before flashing the device you should erase the flash first to make sure you have correct settings: Linux esptool.py erase_flash Windows esptool erase_flash Linux esptool.py -b 750000 --chip esp32 write_flash 0x0000 m5stickc-plus.bin Windows esptool -b 750000 --chip esp32 write_flash 0x0000 m5stickc-plus.bin Flash the NVS partition binary: Linux esptool.py -b 750000 --chip esp32 write_flash 0x9000 nvs_config.bin Windows esptool -b 750000 --chip esp32 write_flash 0x9000 nvs_config.bin Once executed, the device will be reset and run with the configuration you provided.","title":"Step 4: Flash the board and run device"},{"location":"LwM2M_Client/ESP32/M5Stick/#m5stickc-lwm2m-objects","text":"After successful connection to Coiote IoT DM, you can explore the available device objects. Target Objects ESP32 common Security (/0) Server (/1) Device (/3) Firmware Update (/5) WLAN connectivity (/12) M5StickC-Plus Push button (/3347) Light control (/3311) Temperature sensor (/3303) Accelerometer (/3313) Gyroscope (/3343)","title":"M5StickC LwM2M objects"},{"location":"LwM2M_Client/ESP32/M5Stick/#upgrade-device-firmware-over-the-air","text":"To perform a FOTA upgrade, you need an established connection between the M5StickC and Coiote IoT DM (see instructions above).","title":"Upgrade device firmware over the air"},{"location":"LwM2M_Client/ESP32/M5Stick/#build-new-firmware-version","text":"Open a command line interface and run git clone https://github.com/AVSystem/Anjay-esp32-client . Go to the directory of the cloned repository and run idf.py set-target esp32 . Run git submodule update --recursive --init . Run idf.py menuconfig , navigate to Component config/anjay-esp32-client , and from the supported boards, select M5StickC . Press s and enter to save. Run idf.py build . Once executed, check if the binary file has been built in the following path $PROJECT_DIR/build/anjay-esp32-client/build .","title":"Build new firmware version"},{"location":"LwM2M_Client/ESP32/M5Stick/#schedule-upgrade-in-coiote-iot-dm","text":"In your Coiote IoT DM account, select your device in Device inventory and click the LwM2M Firmware tab. Click Schedule new firmware upgrade . Click Upload to select the binary file from your local drive, select COAP in the Image delivery protocol , and click Upgrade . Tip The COAPS option is also supported. To use it, you may need to additionally provide the Base URI parameter (depending on your server settings). The FOTA upgrade is now scheduled. Note that it might take a few minutes to complete. Once the upgrade is finished, you can check the new version of the firmware under Current firmware .","title":"Schedule upgrade in Coiote IoT DM"},{"location":"LwM2M_Client/ESP32/M5StickBG96/","text":"M5StickC with BG96 # Integrate your ESP32-based device with Quectel BG96 module to manage it via Coiote IoT DM. Prerequisites # An M5StickC device. A BG96 module with internet connection (it is strongly recommended to have a BG96 with firmware version BG96MAR03A06M1G). Installed ESP-IDF and dependencies (installation steps 1-4 from ESP32 official documentation ). Supported ESP-IDF version is v4.4. A user with access to the Coiote IoT Device Management platform . Step 1: Prepare project # Create a project directory for the integration. Open a command line interface and run git clone https://github.com/AVSystem/Anjay-esp32-client --recursive . Run . $HOME/esp/esp-idf/export.sh and idf.py set-target esp32 . Open the menuconfig with the idf.py menuconfig command, navigate to Component config -> anjay-esp32-client . In Choose targeted development board , select M5StickC from the list of supported boards. In Choose an interface , select External BG96 module . In BG96 module configuration , specify the UART port, Tx pin and Rx pin for the BG96 module. Example port and pin numbers are provided in the screenshot below. In Client options , provide device credentials and Server URI: Endpoint name - your device endpoint name Server URI - the address and port of your Coiote IoT DM installation, e.g. coaps://eu.iot.avsystem.cloud:5684 Security mode - the PSK security mode PSK configuration - the PSK identity and PSK key In the Connection configuration , set APN name to internet for the sake of this tutorial. However, APN name depends on your SIM card operator. Press s on the keyboard to Save the configuration. Step 2: Connect BG96 module to a M5StickC # Connect the Tx, Rx and GND pins, respectively, to the M5StickC pins selected in the previous step on the basis of the following example connection: M5Stick GND > BG96 6 GND M5Stick G26 > BG96 10 UART Rx M5Stick G0 > BG96 8 UART Tx Step 3: Add device to Coiote IoT DM # To connect your M5StickC to the Coiote IoT Device Management platform, use your access to a Coiote IoT DM installation, or register at https://eu.iot.avsystem.cloud/ to get access. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID field, type the endpoint name provided in the IDF menuconfig Client options , e.g. ESP32BG96 . In the Security mode section, select the PSK mode. In the Key identity field, type the identity provided in the IDF menuconfig Client options , e.g. ESP32BG96 . In the Key field, type the psk key provided in the IDF menuconfig Client options . Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, the server is waiting for the board to connect. You can now start connecting the device. Step 4: Flash M5StickC # Connect the M5Stick board to a USB port of your machine. Open the command line interface, go to your project directory, and run idf.py -b 750000 flash monitor .","title":"M5StickC with BG96"},{"location":"LwM2M_Client/ESP32/M5StickBG96/#m5stickc-with-bg96","text":"Integrate your ESP32-based device with Quectel BG96 module to manage it via Coiote IoT DM.","title":"M5StickC with BG96"},{"location":"LwM2M_Client/ESP32/M5StickBG96/#prerequisites","text":"An M5StickC device. A BG96 module with internet connection (it is strongly recommended to have a BG96 with firmware version BG96MAR03A06M1G). Installed ESP-IDF and dependencies (installation steps 1-4 from ESP32 official documentation ). Supported ESP-IDF version is v4.4. A user with access to the Coiote IoT Device Management platform .","title":"Prerequisites"},{"location":"LwM2M_Client/ESP32/M5StickBG96/#step-1-prepare-project","text":"Create a project directory for the integration. Open a command line interface and run git clone https://github.com/AVSystem/Anjay-esp32-client --recursive . Run . $HOME/esp/esp-idf/export.sh and idf.py set-target esp32 . Open the menuconfig with the idf.py menuconfig command, navigate to Component config -> anjay-esp32-client . In Choose targeted development board , select M5StickC from the list of supported boards. In Choose an interface , select External BG96 module . In BG96 module configuration , specify the UART port, Tx pin and Rx pin for the BG96 module. Example port and pin numbers are provided in the screenshot below. In Client options , provide device credentials and Server URI: Endpoint name - your device endpoint name Server URI - the address and port of your Coiote IoT DM installation, e.g. coaps://eu.iot.avsystem.cloud:5684 Security mode - the PSK security mode PSK configuration - the PSK identity and PSK key In the Connection configuration , set APN name to internet for the sake of this tutorial. However, APN name depends on your SIM card operator. Press s on the keyboard to Save the configuration.","title":"Step 1: Prepare project"},{"location":"LwM2M_Client/ESP32/M5StickBG96/#step-2-connect-bg96-module-to-a-m5stickc","text":"Connect the Tx, Rx and GND pins, respectively, to the M5StickC pins selected in the previous step on the basis of the following example connection: M5Stick GND > BG96 6 GND M5Stick G26 > BG96 10 UART Rx M5Stick G0 > BG96 8 UART Tx","title":"Step 2: Connect BG96 module to a M5StickC"},{"location":"LwM2M_Client/ESP32/M5StickBG96/#step-3-add-device-to-coiote-iot-dm","text":"To connect your M5StickC to the Coiote IoT Device Management platform, use your access to a Coiote IoT DM installation, or register at https://eu.iot.avsystem.cloud/ to get access. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID field, type the endpoint name provided in the IDF menuconfig Client options , e.g. ESP32BG96 . In the Security mode section, select the PSK mode. In the Key identity field, type the identity provided in the IDF menuconfig Client options , e.g. ESP32BG96 . In the Key field, type the psk key provided in the IDF menuconfig Client options . Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, the server is waiting for the board to connect. You can now start connecting the device.","title":"Step 3: Add device to Coiote IoT DM"},{"location":"LwM2M_Client/ESP32/M5StickBG96/#step-4-flash-m5stickc","text":"Connect the M5Stick board to a USB port of your machine. Open the command line interface, go to your project directory, and run idf.py -b 750000 flash monitor .","title":"Step 4: Flash M5StickC"},{"location":"LwM2M_Client/Nordic/Device_Provisioning/","text":"Automated Provisioning for Nordic boards # Introduction # With Factory provisioning for Nordic IoT devices, you can load on-device communication credentials and any cloud-related configuration at the factory level to automate secure device onboarding to Coiote IoT DM cloud. Here\u2019s a tutorial to get you started with device provisioning using a dedicated script to be found in the Anjay Zephyr Client repository . Prerequisites # A Nordic board connected to your computer. Installed Go Programming language . Installed mcumgr command line tool . Zephyr development environment set up. An active Coiote IoT DM cloud account. If you're using Windows: possibility to run Linux scripts/tools either via WSL, Cygwin or other. Important Please verify if the directory to which you installed Go is in your PATH variable. If it's missing please add it. Provision the device using PSK # This section shows how to provision your device using a pre-shared key (PSK). Prepare configuration: Before running the script some configuration should be set. Example configuration can be found in Anjay-zephyr-client/tools/provisioning-tool/configs directory. Edit endpoint_cfg contains LwM2M objects setting that will be uploaded to the device. Set RID.Security.PKOrIdentity and RID.Security.SecretKey . Make sure that RID.Security.Mode is set to 0 . Edit lwm2m_server.json modify domain entry to reflect your domain in Coiote IoT DM server. This file is needed if you wish the script to automatically add the new device to Coiote IoT DM. Get the Coiote IoT DM Access Token The provisioning script can register your device to Coiote IoT DM automatically. You might use this option for the sake of this tutorial, but this is an optional step. Note If you wish to skip device registration to Coiote IoT DM, then call ptool.py without -t and -S options. First an access token needs to be generated. Create get_token.sh file: #!/bin/bash SERVER=\"https://eu.iot.avsystem.cloud\" echo \"Enter your login credentials for $SERVER\" read -p \"Login: \" USER read -p \"Password: \" -s PASS curl -X POST \\ -H \"Content-Type:application/x-www-form-urlencoded\" \\ --data-urlencode \"grant_type=password\" \\ --data-urlencode \"username=$USER\" \\ --data-urlencode \"password=$PASS\" \\ \"$SERVER/api/auth/oauth_password\" If you're using Linux, run chmod u+x get_token.sh to give execute rights. Under Windows you can use the GUI to allow execution of this file. Run ./get_token.sh . The script will ask you for your login and password for eu.iot.avsystem.cloud, please provide them. If a JSON structure containing \"access_token\" appears, you're ready to proceed. Copy your token. Important The token received is valid only for a short period of time. For more informaton how to aquire the access token see REST API authentication . Run provisioning tool Important After creating the correct configuration for provisioning make sure that west configuration is correct and the manifest.path is set to an absolute path. Run: cd Anjay-zephyr-client/demo ./../tools/provisioning-tool/ptool.py -b nrf9160dk_nrf9160_ns -s <SERIAL> \\ -c ../tools/provisioning-tool/configs/endpoint_cfg -t <TOKEN> \\ -S ../tools/provisioning-tool/configs/lwm2m_server.json \\ Important <SERIAL> should be the USB serial number of the connected board. You can check the serial number of your board by running: nrfjprog -i . The <TOKEN> should be the token acquired in previous step. Note To see all of the options available in the script run ./ptool.py -h . If everything went well then your device should be visible in Coiote IoT DM. Provisioning the device using certificates # Now we will show how to provision the device using certificates. This method is very similar to the provisioning the device with PSK and will require just a few additional steps. Note You may need to remove the device from Coiote IoT DM if you finished the steps in previous section and the device is already registered. Coiote IoT DM will not allow registration of the device with the same name. Prepare configuration Like in the PSK example we will modify the configuration found in Anjay-zephyr-client/tools/provisioning-tool/configs directory. Note In this step we will use endpoint_cfg_cert configuration file instead of endpoint_cfg . You may verify that the RID.Security.Mode is set to 2 in this configuration. Edit lwm2m_server.json modify domain entry to reflect your domain in Coiote IoT DM server. Edit cert_info.json . This file contains information for generating a self signed certificate. This configuration is needed only if user don't want to provide certificates generated ealier. Get the certificate for eu.iot.avsystem.cloud . Run: openssl s_client -showcerts eu.iot.avsystem.cloud:5684 > /tmp/server.pem to download server certificate and then openssl x509 -outform der -in /tmp/server.pem -out /tmp/server.der to convert it to DER format. Note The above two commands assumes you use a Linux OS and writes the certificate in the /tmp directory. If using Windows modify the commands by changing \"/tmp\" with some other valid directory. Getting Coiote IoT DM Access Token Repeat this step from previous section to acquire a new token. Run provisioning tool Similar to the example with PSK run: cd Anjay-zephyr-client/demo ./../tools/provisioning-tool/ptool.py -b nrf9160dk_nrf9160_ns -s <SERIAL> \\ -c ../tools/provisioning-tool/configs/endpoint_cfg_cert -t <TOKEN> \\ -S ../tools/provisioning-tool/configs/lwm2m_server.json \\ -C ../tools/provisioning-tool/configs/cert_info.json -p /tmp/server.der Note If you prefer using your own certificates then letting the script create a self signed cert then you can use option -k for providing endpoint private key -r to provide endpoint public cert. Also please remove option -C while running ptool.py . Important Parameters -p , -k and -r should use absoute paths. Important By default the script generates certificates for the device using P-384 elliptic curve. Connecting device to Coiote IoT DM The certificates for the device need to be uploaded by hand. To do this fallow those steps: Log in Coiote IoT DM On the left side choose Administration -> DTLS/TLS certificates Click Add File , in a popup window enter a name and upload the public certificate. The self signed certificate generated by the script should be in Anjay-zephyr-client/demo/cert directory. If everyting went well you should see your new certificate and the device should be ready to connect to Coiote IoT DM.","title":"Automated Provisioning for Nordic boards"},{"location":"LwM2M_Client/Nordic/Device_Provisioning/#automated-provisioning-for-nordic-boards","text":"","title":"Automated Provisioning for Nordic boards"},{"location":"LwM2M_Client/Nordic/Device_Provisioning/#introduction","text":"With Factory provisioning for Nordic IoT devices, you can load on-device communication credentials and any cloud-related configuration at the factory level to automate secure device onboarding to Coiote IoT DM cloud. Here\u2019s a tutorial to get you started with device provisioning using a dedicated script to be found in the Anjay Zephyr Client repository .","title":"Introduction"},{"location":"LwM2M_Client/Nordic/Device_Provisioning/#prerequisites","text":"A Nordic board connected to your computer. Installed Go Programming language . Installed mcumgr command line tool . Zephyr development environment set up. An active Coiote IoT DM cloud account. If you're using Windows: possibility to run Linux scripts/tools either via WSL, Cygwin or other. Important Please verify if the directory to which you installed Go is in your PATH variable. If it's missing please add it.","title":"Prerequisites"},{"location":"LwM2M_Client/Nordic/Device_Provisioning/#provision-the-device-using-psk","text":"This section shows how to provision your device using a pre-shared key (PSK). Prepare configuration: Before running the script some configuration should be set. Example configuration can be found in Anjay-zephyr-client/tools/provisioning-tool/configs directory. Edit endpoint_cfg contains LwM2M objects setting that will be uploaded to the device. Set RID.Security.PKOrIdentity and RID.Security.SecretKey . Make sure that RID.Security.Mode is set to 0 . Edit lwm2m_server.json modify domain entry to reflect your domain in Coiote IoT DM server. This file is needed if you wish the script to automatically add the new device to Coiote IoT DM. Get the Coiote IoT DM Access Token The provisioning script can register your device to Coiote IoT DM automatically. You might use this option for the sake of this tutorial, but this is an optional step. Note If you wish to skip device registration to Coiote IoT DM, then call ptool.py without -t and -S options. First an access token needs to be generated. Create get_token.sh file: #!/bin/bash SERVER=\"https://eu.iot.avsystem.cloud\" echo \"Enter your login credentials for $SERVER\" read -p \"Login: \" USER read -p \"Password: \" -s PASS curl -X POST \\ -H \"Content-Type:application/x-www-form-urlencoded\" \\ --data-urlencode \"grant_type=password\" \\ --data-urlencode \"username=$USER\" \\ --data-urlencode \"password=$PASS\" \\ \"$SERVER/api/auth/oauth_password\" If you're using Linux, run chmod u+x get_token.sh to give execute rights. Under Windows you can use the GUI to allow execution of this file. Run ./get_token.sh . The script will ask you for your login and password for eu.iot.avsystem.cloud, please provide them. If a JSON structure containing \"access_token\" appears, you're ready to proceed. Copy your token. Important The token received is valid only for a short period of time. For more informaton how to aquire the access token see REST API authentication . Run provisioning tool Important After creating the correct configuration for provisioning make sure that west configuration is correct and the manifest.path is set to an absolute path. Run: cd Anjay-zephyr-client/demo ./../tools/provisioning-tool/ptool.py -b nrf9160dk_nrf9160_ns -s <SERIAL> \\ -c ../tools/provisioning-tool/configs/endpoint_cfg -t <TOKEN> \\ -S ../tools/provisioning-tool/configs/lwm2m_server.json \\ Important <SERIAL> should be the USB serial number of the connected board. You can check the serial number of your board by running: nrfjprog -i . The <TOKEN> should be the token acquired in previous step. Note To see all of the options available in the script run ./ptool.py -h . If everything went well then your device should be visible in Coiote IoT DM.","title":"Provision the device using PSK"},{"location":"LwM2M_Client/Nordic/Device_Provisioning/#provisioning-the-device-using-certificates","text":"Now we will show how to provision the device using certificates. This method is very similar to the provisioning the device with PSK and will require just a few additional steps. Note You may need to remove the device from Coiote IoT DM if you finished the steps in previous section and the device is already registered. Coiote IoT DM will not allow registration of the device with the same name. Prepare configuration Like in the PSK example we will modify the configuration found in Anjay-zephyr-client/tools/provisioning-tool/configs directory. Note In this step we will use endpoint_cfg_cert configuration file instead of endpoint_cfg . You may verify that the RID.Security.Mode is set to 2 in this configuration. Edit lwm2m_server.json modify domain entry to reflect your domain in Coiote IoT DM server. Edit cert_info.json . This file contains information for generating a self signed certificate. This configuration is needed only if user don't want to provide certificates generated ealier. Get the certificate for eu.iot.avsystem.cloud . Run: openssl s_client -showcerts eu.iot.avsystem.cloud:5684 > /tmp/server.pem to download server certificate and then openssl x509 -outform der -in /tmp/server.pem -out /tmp/server.der to convert it to DER format. Note The above two commands assumes you use a Linux OS and writes the certificate in the /tmp directory. If using Windows modify the commands by changing \"/tmp\" with some other valid directory. Getting Coiote IoT DM Access Token Repeat this step from previous section to acquire a new token. Run provisioning tool Similar to the example with PSK run: cd Anjay-zephyr-client/demo ./../tools/provisioning-tool/ptool.py -b nrf9160dk_nrf9160_ns -s <SERIAL> \\ -c ../tools/provisioning-tool/configs/endpoint_cfg_cert -t <TOKEN> \\ -S ../tools/provisioning-tool/configs/lwm2m_server.json \\ -C ../tools/provisioning-tool/configs/cert_info.json -p /tmp/server.der Note If you prefer using your own certificates then letting the script create a self signed cert then you can use option -k for providing endpoint private key -r to provide endpoint public cert. Also please remove option -C while running ptool.py . Important Parameters -p , -k and -r should use absoute paths. Important By default the script generates certificates for the device using P-384 elliptic curve. Connecting device to Coiote IoT DM The certificates for the device need to be uploaded by hand. To do this fallow those steps: Log in Coiote IoT DM On the left side choose Administration -> DTLS/TLS certificates Click Add File , in a popup window enter a name and upload the public certificate. The self signed certificate generated by the script should be in Anjay-zephyr-client/demo/cert directory. If everyting went well you should see your new certificate and the device should be ready to connect to Coiote IoT DM.","title":"Provisioning the device using certificates"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/","text":"Runtime Certificate and Private Key Configuration # Introduction # Anjay library supports secure connection between device and server. Encryption can be achieved with the use of Pre-Shared Key as it was described in nRF9160 and Thingy:91 pages or with certificate-based cryptography. In Certificate Mode an asymmetrical algorithm is used to authenticate the connection endpoints and initialize payload encryption. Appropriate certificates need to be generated for both the LwM2M Client and the LwM2M Server. Public certificates of both parties are mutually available, and each party also has access to its corresponding private key. You can read more about secure communication on Anjay's documentation page. Prerequisites # The nRF9160 DK board with a USB cable. Cloned Anjay-zephyr-client repository Note Go through the README's Getting Started part. Installed OpenSSL Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Note The runtime certificate and private key configuration do not work with other boards. Build and flash the device # Connect the nRF9160 DK board to a USB port of your machine. Enter the command line interface on your machine and change the directory to the one where you set up the Zephyr project (usually, it's ~/zephyrproject ). Go to your local Anjay-zephyr-client/demo directory Set manifest file to west-nrf.yml , and do west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Build a project with a runtime certificate and private key. This feature works with nRF9160 DK starting from revision v0.14.0. For this board use configuration that utilizes an external flash chip and software-based cryptography: west build -b nrf9160dk_nrf9160_ns@0.14.0 -p -- -DCONF_FILE=prj_extflash.conf -DOVERLAY_CONFIG=\"overlay_nrf_mbedtls.conf\" Flash the board with west flash command. Generate certificate # The certificate and private key based on the SECP256R1 curve can be provided through the shell interface in .pem format. To generate To generate a self-signed certificate and key pair open a terminal in the Anjay-zephyr-client/demo directory and use the following commands. openssl ecparam -name secp256r1 -out ecparam.der openssl req -new -x509 -nodes -newkey ec:ecparam.der -keyout demo-cert.key -out cert.pem -days 3650 openssl ec -in demo-cert.key -outform pem -out key.pem Important To use the certificate and private key with Coiote IoT DM you must specify a common name that is the same as the client endpoint name. You will see two files cert.pem and key.pem created in the Anjay-zephyr-client/demo directory. Configure the Client # Provide the generated certificate and private key through the shell in the serial communication program. Note Before setting configurations in Anjay you need to stop running Anjay by anjay stop command. Run these commands and paste the content of the files generated in the previous step. anjay config set public_cert anjay config set private_key Save changes, start Anjay using anjay start command and go to the next step to add a device to Coiote IoT DM. Add device to Coiote IoT DM # Upon logging in to Coiote IoT DM for the first time, you will see the Add your LwM2M device panel. Note If you had previously added a device, in Device inventory , click the Add device button. Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name enter your LwM2M device endpoint name, e.g. anjay-zephyr-demo . In the Security mode section, select Certificate mode. Click Upload a new certificate and Browse . In the pop-up, go to the directory where your certificate has been generated, select the cert.pem file and click Open . Click Add device . Note The Endpoint name which you enter to the Coiote IoT DM should be the same as it is in the Client configuration. Click Next , Go to Summary to skip the third step, and Finish to see your Device Center.","title":"Runtime Certificate and Private Key Configuration"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#runtime-certificate-and-private-key-configuration","text":"","title":"Runtime Certificate and Private Key Configuration"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#introduction","text":"Anjay library supports secure connection between device and server. Encryption can be achieved with the use of Pre-Shared Key as it was described in nRF9160 and Thingy:91 pages or with certificate-based cryptography. In Certificate Mode an asymmetrical algorithm is used to authenticate the connection endpoints and initialize payload encryption. Appropriate certificates need to be generated for both the LwM2M Client and the LwM2M Server. Public certificates of both parties are mutually available, and each party also has access to its corresponding private key. You can read more about secure communication on Anjay's documentation page.","title":"Introduction"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#prerequisites","text":"The nRF9160 DK board with a USB cable. Cloned Anjay-zephyr-client repository Note Go through the README's Getting Started part. Installed OpenSSL Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Note The runtime certificate and private key configuration do not work with other boards.","title":"Prerequisites"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#build-and-flash-the-device","text":"Connect the nRF9160 DK board to a USB port of your machine. Enter the command line interface on your machine and change the directory to the one where you set up the Zephyr project (usually, it's ~/zephyrproject ). Go to your local Anjay-zephyr-client/demo directory Set manifest file to west-nrf.yml , and do west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Build a project with a runtime certificate and private key. This feature works with nRF9160 DK starting from revision v0.14.0. For this board use configuration that utilizes an external flash chip and software-based cryptography: west build -b nrf9160dk_nrf9160_ns@0.14.0 -p -- -DCONF_FILE=prj_extflash.conf -DOVERLAY_CONFIG=\"overlay_nrf_mbedtls.conf\" Flash the board with west flash command.","title":"Build and flash the device"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#generate-certificate","text":"The certificate and private key based on the SECP256R1 curve can be provided through the shell interface in .pem format. To generate To generate a self-signed certificate and key pair open a terminal in the Anjay-zephyr-client/demo directory and use the following commands. openssl ecparam -name secp256r1 -out ecparam.der openssl req -new -x509 -nodes -newkey ec:ecparam.der -keyout demo-cert.key -out cert.pem -days 3650 openssl ec -in demo-cert.key -outform pem -out key.pem Important To use the certificate and private key with Coiote IoT DM you must specify a common name that is the same as the client endpoint name. You will see two files cert.pem and key.pem created in the Anjay-zephyr-client/demo directory.","title":"Generate certificate"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#configure-the-client","text":"Provide the generated certificate and private key through the shell in the serial communication program. Note Before setting configurations in Anjay you need to stop running Anjay by anjay stop command. Run these commands and paste the content of the files generated in the previous step. anjay config set public_cert anjay config set private_key Save changes, start Anjay using anjay start command and go to the next step to add a device to Coiote IoT DM.","title":"Configure the Client"},{"location":"LwM2M_Client/Nordic/Runtime_certificate/#add-device-to-coiote-iot-dm","text":"Upon logging in to Coiote IoT DM for the first time, you will see the Add your LwM2M device panel. Note If you had previously added a device, in Device inventory , click the Add device button. Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name enter your LwM2M device endpoint name, e.g. anjay-zephyr-demo . In the Security mode section, select Certificate mode. Click Upload a new certificate and Browse . In the pop-up, go to the directory where your certificate has been generated, select the cert.pem file and click Open . Click Add device . Note The Endpoint name which you enter to the Coiote IoT DM should be the same as it is in the Client configuration. Click Next , Go to Summary to skip the third step, and Finish to see your Device Center.","title":"Add device to Coiote IoT DM"},{"location":"LwM2M_Client/Nordic/Thingy91/","text":"Thingy:91 # Integrate your Nordic Thingy:91 board with Coiote IoT DM using the Anjay LwM2M client . Prerequisites # The Thingy:91 board with a USB cable and SIM card. Installed minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) or other serial communication program. A user with access to the Coiote IoT Device Management platform. Prepare binaries # Use an already built binary # To get the latest binary file and flash the board: Go to Anjay-zephyr-client . Download the demo_thingy91_app_signed.hex file. Jump to the flashing part of the tutorial. Start development using samples # Note If you've gone through the Use an already built binary step, you can jump to Connecting to the LwM2M Server . Part 1: Get Zephyr and Python dependencies # To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project . Select and Update OS Install dependencies Get Zephyr and install Python dependencies Install Zephyr SDK Part 2: Clone the Anjay Zephyr repository # Open the command line interface on your machine, then paste and run the following command: git clone https://github.com/AVSystem/Anjay-zephyr-client Part 3: Compile the demo project # Connect the Thingy:91 board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , manifest file to west-nrf.yml , and run west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Go to the directory Anjay-zephyr-client/demo . Compile the project for Thingy:91 using the command: west build -b thingy91_nrf9160ns Note [Optional] Configuration of the Anjay client can be done using menuconfig . This allows you, among others, to enable the GPS and cell-based location services . To open the configuration menu, run the command: west build -b thingy91_nrf9160ns -p -t menuconfig A config screen will open: After making the configuration changes, close the config menu by pressing Q and save it by pressing the key Y . To build the project using the new configuration, run: west build Find the app_signed.hex file under the build/zephyr directory in the project folder. Flash the binaries # To program the board, go through the process of flashing Thingy:91 . Use the nRF Connect Programmer with the downloaded .hex file and follow the program the nRF9160 SiP application section. After successful flashing, reboot the board and go to the next step. Connect to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name field, enter your board endpoint name e.g. test_device (remember to set the same name in the next section ). In the Security mode section, select the Pre-Shared Key mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type a shared secret used for the device-server authentication. Note This is your password which you create yourself, you will need it in the next steps. Click the Add device button and Confirm in the confirmation pop-up. While in the Connect your device step, follow the next section to run the client and connect it to the server. Configure the Client # With the board still connected to a serial port interface, open a serial communication program. Use the anjay command to list possible options: Tip To show available subcommands, use the Tab key. Check your default credentials by following the instructions in the program: anjay config show Update your device credentials: To make any changes to the configuration, stop the client: anjay stop To update the endpoint name run the command: anjay config set endpoint <endpoint name> To update the Pre-Shared Key , run the command anjay config set psk <key> Start the client using the new configurations: anjay start Go to the Coiote IoT DM to check if your device is connected. Note When Anjay has no connection with the server or network for a long time, warning at_monitor: No heap space for incoming notification: <notification> may appear. It does not affect the operation of the application and will no longer appear after reconnection. Next Steps # After configuring the Anjay Client, you can use the nRF Cloud Location Service to enable cell-based location services, or assisted GPS. Learn how to do it here. Note Thingy:91 uses the same radio for GPS and LTE connectivity. GPS signal is caught between LTE transmissions and in case GPS \"cold\" fix acquisition takes too much time, Anjay turns off LTE transmissions for the time of fix acquisition. It can be seen by the following warning: gps_nrf: GPS was interrupted multiple times by the LTE modem when producing a fix . Anjay is notified by it, enters offline mode and reconnects when the first fix is acquired and LTE is enabled back.","title":"Thingy:91"},{"location":"LwM2M_Client/Nordic/Thingy91/#thingy91","text":"Integrate your Nordic Thingy:91 board with Coiote IoT DM using the Anjay LwM2M client .","title":"Thingy:91"},{"location":"LwM2M_Client/Nordic/Thingy91/#prerequisites","text":"The Thingy:91 board with a USB cable and SIM card. Installed minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) or other serial communication program. A user with access to the Coiote IoT Device Management platform.","title":"Prerequisites"},{"location":"LwM2M_Client/Nordic/Thingy91/#prepare-binaries","text":"","title":"Prepare binaries"},{"location":"LwM2M_Client/Nordic/Thingy91/#use-an-already-built-binary","text":"To get the latest binary file and flash the board: Go to Anjay-zephyr-client . Download the demo_thingy91_app_signed.hex file. Jump to the flashing part of the tutorial.","title":"Use an already built binary"},{"location":"LwM2M_Client/Nordic/Thingy91/#start-development-using-samples","text":"Note If you've gone through the Use an already built binary step, you can jump to Connecting to the LwM2M Server .","title":"Start development using samples"},{"location":"LwM2M_Client/Nordic/Thingy91/#part-1-get-zephyr-and-python-dependencies","text":"To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project . Select and Update OS Install dependencies Get Zephyr and install Python dependencies Install Zephyr SDK","title":"Part 1: Get Zephyr and Python dependencies"},{"location":"LwM2M_Client/Nordic/Thingy91/#part-2-clone-the-anjay-zephyr-repository","text":"Open the command line interface on your machine, then paste and run the following command: git clone https://github.com/AVSystem/Anjay-zephyr-client","title":"Part 2: Clone the Anjay Zephyr repository"},{"location":"LwM2M_Client/Nordic/Thingy91/#part-3-compile-the-demo-project","text":"Connect the Thingy:91 board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , manifest file to west-nrf.yml , and run west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Go to the directory Anjay-zephyr-client/demo . Compile the project for Thingy:91 using the command: west build -b thingy91_nrf9160ns Note [Optional] Configuration of the Anjay client can be done using menuconfig . This allows you, among others, to enable the GPS and cell-based location services . To open the configuration menu, run the command: west build -b thingy91_nrf9160ns -p -t menuconfig A config screen will open: After making the configuration changes, close the config menu by pressing Q and save it by pressing the key Y . To build the project using the new configuration, run: west build Find the app_signed.hex file under the build/zephyr directory in the project folder.","title":"Part 3: Compile the demo project"},{"location":"LwM2M_Client/Nordic/Thingy91/#flash-the-binaries","text":"To program the board, go through the process of flashing Thingy:91 . Use the nRF Connect Programmer with the downloaded .hex file and follow the program the nRF9160 SiP application section. After successful flashing, reboot the board and go to the next step.","title":"Flash the binaries"},{"location":"LwM2M_Client/Nordic/Thingy91/#connect-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name field, enter your board endpoint name e.g. test_device (remember to set the same name in the next section ). In the Security mode section, select the Pre-Shared Key mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type a shared secret used for the device-server authentication. Note This is your password which you create yourself, you will need it in the next steps. Click the Add device button and Confirm in the confirmation pop-up. While in the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connect to the LwM2M Server"},{"location":"LwM2M_Client/Nordic/Thingy91/#configure-the-client","text":"With the board still connected to a serial port interface, open a serial communication program. Use the anjay command to list possible options: Tip To show available subcommands, use the Tab key. Check your default credentials by following the instructions in the program: anjay config show Update your device credentials: To make any changes to the configuration, stop the client: anjay stop To update the endpoint name run the command: anjay config set endpoint <endpoint name> To update the Pre-Shared Key , run the command anjay config set psk <key> Start the client using the new configurations: anjay start Go to the Coiote IoT DM to check if your device is connected. Note When Anjay has no connection with the server or network for a long time, warning at_monitor: No heap space for incoming notification: <notification> may appear. It does not affect the operation of the application and will no longer appear after reconnection.","title":"Configure the Client"},{"location":"LwM2M_Client/Nordic/Thingy91/#next-steps","text":"After configuring the Anjay Client, you can use the nRF Cloud Location Service to enable cell-based location services, or assisted GPS. Learn how to do it here. Note Thingy:91 uses the same radio for GPS and LTE connectivity. GPS signal is caught between LTE transmissions and in case GPS \"cold\" fix acquisition takes too much time, Anjay turns off LTE transmissions for the time of fix acquisition. It can be seen by the following warning: gps_nrf: GPS was interrupted multiple times by the LTE modem when producing a fix . Anjay is notified by it, enters offline mode and reconnects when the first fix is acquired and LTE is enabled back.","title":"Next Steps"},{"location":"LwM2M_Client/Nordic/nRF9160/","text":"nRF9160 # Integrate your Nordic nRF9160 board. Prerequisites # The nRF9160 board with a USB cable. Installed minicom (for Linux) or RealTerm or PuTTy (for Windows) or other serial communication program. Installed nrfjprog from Nordic Semiconductor page A user with access to the Coiote IoT Device Management platform. Prepare binaries # Use an already built binary # To get the latest binary file and flash the board: Go to Anjay-zephyr-client . Download the demo_nrf9160dk_merged.hex file. To program the board, go through the whole process of flashing nRF described here . Use the nRF Connect Programmer with the downloaded .hex file and execute steps from the Updating the application firmware section. Reset the board and go to the Connecting to the LwM2M Server . Start development using samples # Note This step is optional. If you've gone through the Use an already built binary step, you can jump to Connecting to the LwM2M Server . Part 1: Getting Zephyr and Python dependencies # To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project (from the set up the OS to installing the Zephyr SDK). Part 2: Cloning the Anjay zephyr repository # Enter the command line interface on your machine and change the directory to the one where you set up the Zephyr project (usually, it's ~/zephyrproject ), then paste and run the following command: git clone https://github.com/AVSystem/Anjay-zephyr-client Part 3: Compiling the example # Connect the nRF9160 board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , manifest file to west-nrf.yml , and do west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Compile the project for nRF9160 : cd Anjay-zephyr-client/demo west build -b nrf9160dk_nrf9160ns Find the merged.hex file under the build/zephyr directory in the project folder. Use the nRF Connect Programmer to flash the created .hex file onto the board. For more information, follow the updating the application firmware documentation. Connecting to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server. Configuring the Client # With the board still connected to a serial port interface, open a serial communication program. Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, use the Tab key. Check your default credentials by following the instructions in the program: Note If your default credentials are different from device credentials provided in Coiote IoT DM, change them using the anjay config set <possible_option> <value> command. Use the anjay start command to run the Client. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Note When Anjay has no connection with the server or network for a long time, warning at_monitor: No heap space for incoming notification: <notification> may appear. It does not affect the operation of the application and will no longer appear after reconnection. Note nRF9160 uses the same radio for GPS and LTE connectivity. GPS signal is caught between LTE transmissions and in case GPS \"cold\" fix acquisition takes too much time, Anjay turns off LTE transmissions for the time of fix acquisition. It can be seen by the following warning: gps_nrf: GPS was interrupted multiple times by the LTE modem when producing a fix . Anjay is notified by it, enters offline mode and reconnects when the first fix is acquired and LTE is enabled back.","title":"nRF9160"},{"location":"LwM2M_Client/Nordic/nRF9160/#nrf9160","text":"Integrate your Nordic nRF9160 board.","title":"nRF9160"},{"location":"LwM2M_Client/Nordic/nRF9160/#prerequisites","text":"The nRF9160 board with a USB cable. Installed minicom (for Linux) or RealTerm or PuTTy (for Windows) or other serial communication program. Installed nrfjprog from Nordic Semiconductor page A user with access to the Coiote IoT Device Management platform.","title":"Prerequisites"},{"location":"LwM2M_Client/Nordic/nRF9160/#prepare-binaries","text":"","title":"Prepare binaries"},{"location":"LwM2M_Client/Nordic/nRF9160/#use-an-already-built-binary","text":"To get the latest binary file and flash the board: Go to Anjay-zephyr-client . Download the demo_nrf9160dk_merged.hex file. To program the board, go through the whole process of flashing nRF described here . Use the nRF Connect Programmer with the downloaded .hex file and execute steps from the Updating the application firmware section. Reset the board and go to the Connecting to the LwM2M Server .","title":"Use an already built binary"},{"location":"LwM2M_Client/Nordic/nRF9160/#start-development-using-samples","text":"Note This step is optional. If you've gone through the Use an already built binary step, you can jump to Connecting to the LwM2M Server .","title":"Start development using samples"},{"location":"LwM2M_Client/Nordic/nRF9160/#part-1-getting-zephyr-and-python-dependencies","text":"To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project (from the set up the OS to installing the Zephyr SDK).","title":"Part 1: Getting Zephyr and Python dependencies"},{"location":"LwM2M_Client/Nordic/nRF9160/#part-2-cloning-the-anjay-zephyr-repository","text":"Enter the command line interface on your machine and change the directory to the one where you set up the Zephyr project (usually, it's ~/zephyrproject ), then paste and run the following command: git clone https://github.com/AVSystem/Anjay-zephyr-client","title":"Part 2: Cloning the Anjay zephyr repository"},{"location":"LwM2M_Client/Nordic/nRF9160/#part-3-compiling-the-example","text":"Connect the nRF9160 board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , manifest file to west-nrf.yml , and do west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Compile the project for nRF9160 : cd Anjay-zephyr-client/demo west build -b nrf9160dk_nrf9160ns Find the merged.hex file under the build/zephyr directory in the project folder. Use the nRF Connect Programmer to flash the created .hex file onto the board. For more information, follow the updating the application firmware documentation.","title":"Part 3: Compiling the example"},{"location":"LwM2M_Client/Nordic/nRF9160/#connecting-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connecting to the LwM2M Server"},{"location":"LwM2M_Client/Nordic/nRF9160/#configuring-the-client","text":"With the board still connected to a serial port interface, open a serial communication program. Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, use the Tab key. Check your default credentials by following the instructions in the program: Note If your default credentials are different from device credentials provided in Coiote IoT DM, change them using the anjay config set <possible_option> <value> command. Use the anjay start command to run the Client. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Note When Anjay has no connection with the server or network for a long time, warning at_monitor: No heap space for incoming notification: <notification> may appear. It does not affect the operation of the application and will no longer appear after reconnection. Note nRF9160 uses the same radio for GPS and LTE connectivity. GPS signal is caught between LTE transmissions and in case GPS \"cold\" fix acquisition takes too much time, Anjay turns off LTE transmissions for the time of fix acquisition. It can be seen by the following warning: gps_nrf: GPS was interrupted multiple times by the LTE modem when producing a fix . Anjay is notified by it, enters offline mode and reconnects when the first fix is acquired and LTE is enabled back.","title":"Configuring the Client"},{"location":"LwM2M_Client/OpenThread/Adding_device/","text":"Adding nRF board to OpenThread # Integrate your Nordic nRF52840-DK board to an active OpenThread Border Router. Prerequisites # An active OpenThread Border Router . The nRF52840-DK board with a USB cable. Installed minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) or other serial communication program. Installed nrfjprog from Nordic Semiconductor page A user with access to the Coiote IoT Device Management platform platform and appropriate permissions. Connecting to the OpenThread # Note Check your active Border Router IP address on which your Border Router works (e.g. 192.168.10.3 ) and save it - use your address instead of <OTBR_IP_address> in the next steps. Connecting to the WebUI # You should be in the same network as your OpenThread Border Router. To configure the Border Router open any web browser and connect to the WebUI by typing <OTBR_IP_address>:80 . When you are connected you should see the OpenThread main page: Creating an OpenThread network # On the left side, select the Form option, and a new page will be displayed for the network creation. After providing required credentials, click the FORM button and a message should pop up to let you know about the operation's success. On the left-side menu, click Topology to see the role of Border Router. Commissioning process # To start the commissioning process click Commission on the left-side menu and write down Joiner PSKd password . Important The PSKd needs following: length: 6-32 characters, encoding: base32-thread (0-9, A-Y excluding I, O, Q, and Z for readability). Remember the Joiner PSKd password , you will use it in the next step to configure your device. For more information check here . Click START COMMISSION button, and a message should pop up to inform you about the operation's success. Device configuration # Get Zephyr, SDK and other dependencies, as described in Zephyr's Getting Started Guide (first 4 steps). After navigating to Zephyr workspace ( ~/zephyrproject is default after following Getting Started Guide), clone Anjay Zephyr client repository. git clone https://github.com/AVSystem/Anjay-zephyr-client Connect the nRF52840 board to the USB port of your machine. Because NCS uses a west-nrf.yml file, it is necessary to change our Zephyr workspace, it is handled by using a different manifest file. Set West manifest path to Anjay-zephyr-client/demo , and manifest file to west-nrf.yml and do west update . west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Go to Anjay-zephyr-client/demo/boards directory and find the nrf52840dk_nrf52840.conf file. In this file, you will need to change the joiner PSKd password (the CONFIG_OPENTHREAD_JOINER_PSKD option): # OpenThread CONFIG_OPENTHREAD_JOINER=y CONFIG_OPENTHREAD_JOINER_AUTOSTART=y CONFIG_OPENTHREAD_MANUAL_START=y CONFIG_OPENTHREAD_SLAAC=y CONFIG_OPENTHREAD_JOINER_PSKD=\"00000000001\" CONFIG_OPENTHREAD_FTD=y Note The last config option in the nrf52840dk_nrf52840.conf file ( CONFIG_OPENTHREAD_FTD ) tells about a Full Thread Device (FTD) which always has its radio on and maintains IPv6 address mappings. This option can be changed to CONFIG_OPENTHREAD_MTD , a Minimal Thread Device (MTD) that forwards all messages to its Parent. Now in Anjay-zephyr-client/demo directory you can compile the project. west build -b nrf52840dk_nrf52840 After successful build you can flash the target. west flash Connecting to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server. Configuring the Client # With the board still connected to a serial port interface, open a serial communication program. Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, use the Tab key. Use the anjay stop command to stop LwM2M Client and change credentials. Check your default credentials by following the instructions in the program: Note If your default credentials are different from device credentials provided in Coiote IoT DM, change them using the anjay config set <possible_option> <value> command. Use the anjay start command to run the Client. In logs, you can find information about status of the device. There will be information about success or failure in joining the connection and the current role of your device in the OpenThread network. Go to OpenThread main web page, on the left-side menu click Topology to see connected device. Note The node should join the OTBR Thread network automatically. Within two minutes its state should change to router . Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Note When Anjay has no connection with the server or network for a long time, warning at_monitor: No heap space for incoming notification: <notification> may appear. It does not affect the operation of the application and will no longer appear after reconnection.","title":"Adding nRF board to OpenThread"},{"location":"LwM2M_Client/OpenThread/Adding_device/#adding-nrf-board-to-openthread","text":"Integrate your Nordic nRF52840-DK board to an active OpenThread Border Router.","title":"Adding nRF board to OpenThread"},{"location":"LwM2M_Client/OpenThread/Adding_device/#prerequisites","text":"An active OpenThread Border Router . The nRF52840-DK board with a USB cable. Installed minicom or RealTerm (for Linux or Mac) or PuTTy (for Windows) or other serial communication program. Installed nrfjprog from Nordic Semiconductor page A user with access to the Coiote IoT Device Management platform platform and appropriate permissions.","title":"Prerequisites"},{"location":"LwM2M_Client/OpenThread/Adding_device/#connecting-to-the-openthread","text":"Note Check your active Border Router IP address on which your Border Router works (e.g. 192.168.10.3 ) and save it - use your address instead of <OTBR_IP_address> in the next steps.","title":"Connecting to the OpenThread"},{"location":"LwM2M_Client/OpenThread/Adding_device/#connecting-to-the-webui","text":"You should be in the same network as your OpenThread Border Router. To configure the Border Router open any web browser and connect to the WebUI by typing <OTBR_IP_address>:80 . When you are connected you should see the OpenThread main page:","title":"Connecting to the WebUI"},{"location":"LwM2M_Client/OpenThread/Adding_device/#creating-an-openthread-network","text":"On the left side, select the Form option, and a new page will be displayed for the network creation. After providing required credentials, click the FORM button and a message should pop up to let you know about the operation's success. On the left-side menu, click Topology to see the role of Border Router.","title":"Creating an OpenThread network"},{"location":"LwM2M_Client/OpenThread/Adding_device/#commissioning-process","text":"To start the commissioning process click Commission on the left-side menu and write down Joiner PSKd password . Important The PSKd needs following: length: 6-32 characters, encoding: base32-thread (0-9, A-Y excluding I, O, Q, and Z for readability). Remember the Joiner PSKd password , you will use it in the next step to configure your device. For more information check here . Click START COMMISSION button, and a message should pop up to inform you about the operation's success.","title":"Commissioning process"},{"location":"LwM2M_Client/OpenThread/Adding_device/#device-configuration","text":"Get Zephyr, SDK and other dependencies, as described in Zephyr's Getting Started Guide (first 4 steps). After navigating to Zephyr workspace ( ~/zephyrproject is default after following Getting Started Guide), clone Anjay Zephyr client repository. git clone https://github.com/AVSystem/Anjay-zephyr-client Connect the nRF52840 board to the USB port of your machine. Because NCS uses a west-nrf.yml file, it is necessary to change our Zephyr workspace, it is handled by using a different manifest file. Set West manifest path to Anjay-zephyr-client/demo , and manifest file to west-nrf.yml and do west update . west config manifest.path Anjay-zephyr-client/demo west config manifest.file west-nrf.yml west update Go to Anjay-zephyr-client/demo/boards directory and find the nrf52840dk_nrf52840.conf file. In this file, you will need to change the joiner PSKd password (the CONFIG_OPENTHREAD_JOINER_PSKD option): # OpenThread CONFIG_OPENTHREAD_JOINER=y CONFIG_OPENTHREAD_JOINER_AUTOSTART=y CONFIG_OPENTHREAD_MANUAL_START=y CONFIG_OPENTHREAD_SLAAC=y CONFIG_OPENTHREAD_JOINER_PSKD=\"00000000001\" CONFIG_OPENTHREAD_FTD=y Note The last config option in the nrf52840dk_nrf52840.conf file ( CONFIG_OPENTHREAD_FTD ) tells about a Full Thread Device (FTD) which always has its radio on and maintains IPv6 address mappings. This option can be changed to CONFIG_OPENTHREAD_MTD , a Minimal Thread Device (MTD) that forwards all messages to its Parent. Now in Anjay-zephyr-client/demo directory you can compile the project. west build -b nrf52840dk_nrf52840 After successful build you can flash the target. west flash","title":"Device configuration"},{"location":"LwM2M_Client/OpenThread/Adding_device/#connecting-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connecting to the LwM2M Server"},{"location":"LwM2M_Client/OpenThread/Adding_device/#configuring-the-client","text":"With the board still connected to a serial port interface, open a serial communication program. Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, use the Tab key. Use the anjay stop command to stop LwM2M Client and change credentials. Check your default credentials by following the instructions in the program: Note If your default credentials are different from device credentials provided in Coiote IoT DM, change them using the anjay config set <possible_option> <value> command. Use the anjay start command to run the Client. In logs, you can find information about status of the device. There will be information about success or failure in joining the connection and the current role of your device in the OpenThread network. Go to OpenThread main web page, on the left-side menu click Topology to see connected device. Note The node should join the OTBR Thread network automatically. Within two minutes its state should change to router . Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Note When Anjay has no connection with the server or network for a long time, warning at_monitor: No heap space for incoming notification: <notification> may appear. It does not affect the operation of the application and will no longer appear after reconnection.","title":"Configuring the Client"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/","text":"Raspberry Pi Pico W # Integrate your Raspberry Pi Pico W board. Prerequisites # A Raspberry Pi Pico W board with a USB cable. A user with access to the Coiote IoT Device Management platform and appropriate permissions. Prepare binaries # Step 1: Create a workspace # Create a project directory for the integration. Clone the Raspberry Pi Pico SDK and the FreeRTOS kernel into a base directory, parallel to the Anjay-pico-client Github repository: git clone -b 1.4.0 https://github.com/raspberrypi/pico-sdk.git cd pico-sdk/ && git submodule update --init && cd .. git clone -b V10.5.0 https://github.com/FreeRTOS/FreeRTOS-Kernel.git git clone https://github.com/AVSystem/Anjay-pico-client.git Install the required libraries: sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib Note If you're using Windows , follow the Installing the ARM Toolchain for Windows instruction on how to install these libraries. If you're using MacOS , run the following command: brew install armmbed/formulae/arm-none-eabi-gcc Compile the application # Go to the Anjay-pico-client repository and update submodules: cd Anjay-pico-client git submodule update --init --recursive mkdir build && cd build Build the project with <ssid> and <pass> replaced with your WIFI name and password respectively. LwM2M Client Endpoint Name is also configured by <endpoint_name> parameter. If you want to use the Pre-Shared Key option, you need to provide <identity> and <psk> : Pre-Shared Key cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. NoSec cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" .. Run the following command to generate the directories named after the examples that contain files with .uf2 and .hex extensions: make -j Note If you're using Windows, add -G \"MinGW Makefiles\" at the end of the cmake command. It will help generate the proper files. Flash the board using bootloader # To program using the bootloader, press and hold the BOOTSEL button while connecting Raspberry Pi Pico W through a USB cable - it should be recognized as a Mass Storage device. Copy the .uf2 file to the open Mass Storage device folder. Depending on the application you want to program, copy the .uf2 file from available directories, e.g. mandatory_objects . Once the Pico has been programmed, disconnect the board and connect it again to make it execute the code. Connecting to the LwM2M Server # To connect to a Coiote IoT Device Management platform, register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the security mode you've choosen in Compile the application step: Note If you choose the Pre-Shared Key security mode: In the Key identity field, provide the same name as in the Endpoint name field. In the Key field, provide the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. Click Next , then Go to Summary , then Finish . You will see your Device Center view:","title":"Raspberry Pi Pico W"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#raspberry-pi-pico-w","text":"Integrate your Raspberry Pi Pico W board.","title":"Raspberry Pi Pico W"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable. A user with access to the Coiote IoT Device Management platform and appropriate permissions.","title":"Prerequisites"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#prepare-binaries","text":"","title":"Prepare binaries"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#step-1-create-a-workspace","text":"Create a project directory for the integration. Clone the Raspberry Pi Pico SDK and the FreeRTOS kernel into a base directory, parallel to the Anjay-pico-client Github repository: git clone -b 1.4.0 https://github.com/raspberrypi/pico-sdk.git cd pico-sdk/ && git submodule update --init && cd .. git clone -b V10.5.0 https://github.com/FreeRTOS/FreeRTOS-Kernel.git git clone https://github.com/AVSystem/Anjay-pico-client.git Install the required libraries: sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib Note If you're using Windows , follow the Installing the ARM Toolchain for Windows instruction on how to install these libraries. If you're using MacOS , run the following command: brew install armmbed/formulae/arm-none-eabi-gcc","title":"Step 1: Create a workspace"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#compile-the-application","text":"Go to the Anjay-pico-client repository and update submodules: cd Anjay-pico-client git submodule update --init --recursive mkdir build && cd build Build the project with <ssid> and <pass> replaced with your WIFI name and password respectively. LwM2M Client Endpoint Name is also configured by <endpoint_name> parameter. If you want to use the Pre-Shared Key option, you need to provide <identity> and <psk> : Pre-Shared Key cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. NoSec cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" .. Run the following command to generate the directories named after the examples that contain files with .uf2 and .hex extensions: make -j Note If you're using Windows, add -G \"MinGW Makefiles\" at the end of the cmake command. It will help generate the proper files.","title":"Compile the application"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#flash-the-board-using-bootloader","text":"To program using the bootloader, press and hold the BOOTSEL button while connecting Raspberry Pi Pico W through a USB cable - it should be recognized as a Mass Storage device. Copy the .uf2 file to the open Mass Storage device folder. Depending on the application you want to program, copy the .uf2 file from available directories, e.g. mandatory_objects . Once the Pico has been programmed, disconnect the board and connect it again to make it execute the code.","title":"Flash the board using bootloader"},{"location":"LwM2M_Client/RaspberryPi/RaspberryPi-Pico-W/#connecting-to-the-lwm2m-server","text":"To connect to a Coiote IoT Device Management platform, register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the security mode you've choosen in Compile the application step: Note If you choose the Pre-Shared Key security mode: In the Key identity field, provide the same name as in the Endpoint name field. In the Key field, provide the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. Click Next , then Go to Summary , then Finish . You will see your Device Center view:","title":"Connecting to the LwM2M Server"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/","text":"B-L462E-CELL1/TYPE1SC # Integrate your B-L462E-CELL1 Discovery kit board along with the TYPE 1SE module with built-in eSIM (ST4SIM-200M). Prerequisites # The B-L462E-CELL1/TYPE1SC board with a Micro-USB cable. Installed STM32CubeIDE . The serial communication program, such as minicom (for Linux) or RealTerm or PuTTY (for Windows) installed. A user with access to the Coiote IoT Device Management platform. Prepare Anjay client application # Use an already built binary # To get the latest binary file and flash it to the board: Go to Anjay-freertos-client . Download the Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L462RE external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished. Start development using samples # Note This step is optional. If you've gone through the Use an already built binary step, you can go to Connect to the LwM2M Server right away. Clone the Anjay freeRTOS client repository # Enter the command line interface on your machine and run the following command: git clone --recursive https://github.com/AVSystem/Anjay-freertos-client Build binary and flash the board # Connect the B-L462E-CELL1/TYPE1SC board to a USB port of your machine. Go to the STM32CubeIDE. Import the project cloned in the previous step to your workspace: From the navigation bar, select File and click Import . From the General list, select Existing Projects into Workspace and click Next . In Select root directory , indicate the catalog containing the cloned Anjay freeRTOS client repository. In the Projects field, select Anjay-freertos-client-B-L462E-CELL1-TYPE1SC and click Finish . In the Project Explorer, navigate to the Anjay-freertos-client-B-L462E-CELL1-TYPE1SC project: Choose \"Debug\" configuration and build the project by right-clicking on the project name and selecting Build Project . The build should take less than one minute to complete. After the build is finished, right-click on the project name, select Run As and click the 1 STM32 Cortex-M C/C++ Application option. In the Lauch Configuration Selection , choose the Anjay-freertos-client-B-L462E-CELL1-TYPE1SC option and click OK . After the build and run are complete, the board is flashed with compiled binary. Connect to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server. Configure the Client # With the board still connected to a serial port interface, open your serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key and in the configuration menu, change the default credentials to your data by following the instructions presented in the program and save it. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use built-in eSIM card Truphone then change APN to iot.truphone.com . Note If you use external SIM card you have to check APN used by SIM card's provider. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Tip LwM2M Server URI, endpoint name and other information can be found in the Configuration tab. Anjay-freertos-client with FOTA (Firmware update Over the Air) # Anjay application can be built in basic version (without FOTA) as described in the Build binary and flash the board section. In order to use FOTA, a few additional steps need to be done, e.g. Secure Boot and Secure Firmware Update compilation. The X-CUBE-SBSFU Secure Boot and Secure Firmware Update solution allows the update of the STM32 microcontroller built-in program with new firmware versions, adding new features and correcting issues. The update process is performed in a secure way to prevent unauthorized updates and access to confidential on-device data such as code and firmware encryption key. The Secure Boot (Root of Trust services) is immutable code, always executed after a system reset, that checks STM32 static protections, activates STM32 runtime protections and then verifies the authenticity and integrity of user application code before every execution in order to ensure that invalid or malicious code won't be run. Additional prerequisites # STM32CubeProgrammer installed. Support for shell scripts execution (on Windows for example Git or Cygwin can be used). Python with the following modules: pycryptodomex , ecdsa , numpy , pyelftools . Import B-L462E-CELL1_2_Images_SBSFU and B-L462E-CELL1_2_Images_SECoreBin projects from previously cloned repository to workspace. Prepare binary with SBSFU # Important You need to follow a strict compilation order presented below. Compile SECoreBin application This step is needed to create the Secure Engine core binary including all the trusted code and keys mapped inside the protected environment. The binary is linked with the SBSFU code in step 2. Compile SBSFU application This step compiles the SBSFU source code implementing the state machine and configuring the protections. In addition, it links the code with the SECore binary generated at step 1 in order to generate a single SBSFU binary including the SE trusted code. Compile UserApp application (set Build configuration to Release ) It generates: The user application binary file that is uploaded to the device using the Secure Firmware Update process ( Projects/B-L462E-CELL1/UserApp/Binary/Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.sfb ). A binary file concatenating the SBSFU binary, the user application binary in clear format, and the corresponding FW header ( Projects/B-L462E-CELL1/UserApp/Binary/SBSFU_Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.bin ). Tip You can set a custom firmware version in the Application/Inc/default_config.h file (using FIRMWARE_VERSION define). It will be useful when performing FOTA to distinguish the firmware images from each other. Flash the board with SBSFU binary # Use STM32CubeProgrammer application with SBSFU_Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.bin file to program the board (it is advisable to perform Full chip erase first). You can open serial port to change default credentials in order to connect to Coiote IoT DM. After that, you can use Coiote IoT DM to perform firmware update with Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.sfb file. Perform firmware update # In order to perform firmware update: Build the application and flash the board with FIRMWARE_UPDATE define set to the proper version (see Prepare binary with SBSFU step), e.g. #define FIRMWARE_VERSION \"v1.0\" Make changes to the code (optionally), set FIRMWARE_UPDATE define to a different version, e.g. #define FIRMWARE_VERSION \"v2.0\" and build the application with a new firmware. Upload the generated firmware file ( Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.sfb ) to Coiote IoT DM (go to Device management and select Firmware update ) and click Upgrade . After the FOTA finishes, the device will reboot and the following log should appear: Firmware updated from version 'v1.0' to 'v2.0' where v1.0 and v2.0 will be set to firmware versions you set earlier.","title":"B-L462E-CELL1/TYPE1SC"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#b-l462e-cell1type1sc","text":"Integrate your B-L462E-CELL1 Discovery kit board along with the TYPE 1SE module with built-in eSIM (ST4SIM-200M).","title":"B-L462E-CELL1/TYPE1SC"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#prerequisites","text":"The B-L462E-CELL1/TYPE1SC board with a Micro-USB cable. Installed STM32CubeIDE . The serial communication program, such as minicom (for Linux) or RealTerm or PuTTY (for Windows) installed. A user with access to the Coiote IoT Device Management platform.","title":"Prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#prepare-anjay-client-application","text":"","title":"Prepare Anjay client application"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#use-an-already-built-binary","text":"To get the latest binary file and flash it to the board: Go to Anjay-freertos-client . Download the Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L462RE external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished.","title":"Use an already built binary"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#start-development-using-samples","text":"Note This step is optional. If you've gone through the Use an already built binary step, you can go to Connect to the LwM2M Server right away.","title":"Start development using samples"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#clone-the-anjay-freertos-client-repository","text":"Enter the command line interface on your machine and run the following command: git clone --recursive https://github.com/AVSystem/Anjay-freertos-client","title":"Clone the Anjay freeRTOS client repository"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#build-binary-and-flash-the-board","text":"Connect the B-L462E-CELL1/TYPE1SC board to a USB port of your machine. Go to the STM32CubeIDE. Import the project cloned in the previous step to your workspace: From the navigation bar, select File and click Import . From the General list, select Existing Projects into Workspace and click Next . In Select root directory , indicate the catalog containing the cloned Anjay freeRTOS client repository. In the Projects field, select Anjay-freertos-client-B-L462E-CELL1-TYPE1SC and click Finish . In the Project Explorer, navigate to the Anjay-freertos-client-B-L462E-CELL1-TYPE1SC project: Choose \"Debug\" configuration and build the project by right-clicking on the project name and selecting Build Project . The build should take less than one minute to complete. After the build is finished, right-click on the project name, select Run As and click the 1 STM32 Cortex-M C/C++ Application option. In the Lauch Configuration Selection , choose the Anjay-freertos-client-B-L462E-CELL1-TYPE1SC option and click OK . After the build and run are complete, the board is flashed with compiled binary.","title":"Build binary and flash the board"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#connect-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connect to the LwM2M Server"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#configure-the-client","text":"With the board still connected to a serial port interface, open your serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key and in the configuration menu, change the default credentials to your data by following the instructions presented in the program and save it. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use built-in eSIM card Truphone then change APN to iot.truphone.com . Note If you use external SIM card you have to check APN used by SIM card's provider. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Tip LwM2M Server URI, endpoint name and other information can be found in the Configuration tab.","title":"Configure the Client"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#anjay-freertos-client-with-fota-firmware-update-over-the-air","text":"Anjay application can be built in basic version (without FOTA) as described in the Build binary and flash the board section. In order to use FOTA, a few additional steps need to be done, e.g. Secure Boot and Secure Firmware Update compilation. The X-CUBE-SBSFU Secure Boot and Secure Firmware Update solution allows the update of the STM32 microcontroller built-in program with new firmware versions, adding new features and correcting issues. The update process is performed in a secure way to prevent unauthorized updates and access to confidential on-device data such as code and firmware encryption key. The Secure Boot (Root of Trust services) is immutable code, always executed after a system reset, that checks STM32 static protections, activates STM32 runtime protections and then verifies the authenticity and integrity of user application code before every execution in order to ensure that invalid or malicious code won't be run.","title":"Anjay-freertos-client with FOTA (Firmware update Over the Air)"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#additional-prerequisites","text":"STM32CubeProgrammer installed. Support for shell scripts execution (on Windows for example Git or Cygwin can be used). Python with the following modules: pycryptodomex , ecdsa , numpy , pyelftools . Import B-L462E-CELL1_2_Images_SBSFU and B-L462E-CELL1_2_Images_SECoreBin projects from previously cloned repository to workspace.","title":"Additional prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#prepare-binary-with-sbsfu","text":"Important You need to follow a strict compilation order presented below. Compile SECoreBin application This step is needed to create the Secure Engine core binary including all the trusted code and keys mapped inside the protected environment. The binary is linked with the SBSFU code in step 2. Compile SBSFU application This step compiles the SBSFU source code implementing the state machine and configuring the protections. In addition, it links the code with the SECore binary generated at step 1 in order to generate a single SBSFU binary including the SE trusted code. Compile UserApp application (set Build configuration to Release ) It generates: The user application binary file that is uploaded to the device using the Secure Firmware Update process ( Projects/B-L462E-CELL1/UserApp/Binary/Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.sfb ). A binary file concatenating the SBSFU binary, the user application binary in clear format, and the corresponding FW header ( Projects/B-L462E-CELL1/UserApp/Binary/SBSFU_Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.bin ). Tip You can set a custom firmware version in the Application/Inc/default_config.h file (using FIRMWARE_VERSION define). It will be useful when performing FOTA to distinguish the firmware images from each other.","title":"Prepare binary with SBSFU"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#flash-the-board-with-sbsfu-binary","text":"Use STM32CubeProgrammer application with SBSFU_Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.bin file to program the board (it is advisable to perform Full chip erase first). You can open serial port to change default credentials in order to connect to Coiote IoT DM. After that, you can use Coiote IoT DM to perform firmware update with Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.sfb file.","title":"Flash the board with SBSFU binary"},{"location":"LwM2M_Client/STMicroelectronics/B-L462E-CELL1-TYPE1SC/#perform-firmware-update","text":"In order to perform firmware update: Build the application and flash the board with FIRMWARE_UPDATE define set to the proper version (see Prepare binary with SBSFU step), e.g. #define FIRMWARE_VERSION \"v1.0\" Make changes to the code (optionally), set FIRMWARE_UPDATE define to a different version, e.g. #define FIRMWARE_VERSION \"v2.0\" and build the application with a new firmware. Upload the generated firmware file ( Anjay-freertos-client-B-L462E-CELL1-TYPE1SC.sfb ) to Coiote IoT DM (go to Device management and select Firmware update ) and click Upgrade . After the FOTA finishes, the device will reboot and the following log should appear: Firmware updated from version 'v1.0' to 'v2.0' where v1.0 and v2.0 will be set to firmware versions you set earlier.","title":"Perform firmware update"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/","text":"B-L475E-IOT01A # Integrate your B-L475E-IOT01A Discovery kit board. Prerequisites # The B-L475E-IOT01A board with a USB cable. Installed minicom (for Linux) or RealTerm or PuTTy (for Windows) or other serial communication program. Installed ST-Link or OpenOCD debugger. A user with access to the Coiote IoT Device Management platform and appropriate permissions. Prepare Anjay client application # Use an already built binary # To get the latest binary file and flash it to the board: Go to Anjay-zephyr-client . Download the demo_B-L475E-IOT01A1_merged.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L4IOT external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished. Start development using samples # Note This step is optional. If you've gone through the Use an already built binary step, you can jump to Connect to the LwM2M Server . Part 1: Get Zephyr and Python dependencies # To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project . Part 2: Clone the Anjay zephyr repository # Enter the command line interface on your machine, then paste and run the following command: git clone https://github.com/AVSystem/Anjay-zephyr-client Part 3: Build binary and flash the board # Connect the B-L475E-IOT01A board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , and manifest file to west.yml and do west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west.yml west update Compile the project for B-L475E-IOT01A using west build -b disco_l475_iot1 in the demo directory. Flash the board using west flash . Connect to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server. Configure the Client # With the board still connected to a serial port interface, open your serial communication program. Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, use the Tab key. Check your default credentials by following the instructions in the program: Note If your default credentials are different from device credentials provided in Coiote IoT DM, change them using the anjay config set <possible_option> <value> command. Use the anjay start command to run the Client. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Tip LwM2M Server URI, endpoint name and other information can be found in the Configuration tab.","title":"B-L475E-IOT01A"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#b-l475e-iot01a","text":"Integrate your B-L475E-IOT01A Discovery kit board.","title":"B-L475E-IOT01A"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#prerequisites","text":"The B-L475E-IOT01A board with a USB cable. Installed minicom (for Linux) or RealTerm or PuTTy (for Windows) or other serial communication program. Installed ST-Link or OpenOCD debugger. A user with access to the Coiote IoT Device Management platform and appropriate permissions.","title":"Prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#prepare-anjay-client-application","text":"","title":"Prepare Anjay client application"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#use-an-already-built-binary","text":"To get the latest binary file and flash it to the board: Go to Anjay-zephyr-client . Download the demo_B-L475E-IOT01A1_merged.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L4IOT external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished.","title":"Use an already built binary"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#start-development-using-samples","text":"Note This step is optional. If you've gone through the Use an already built binary step, you can jump to Connect to the LwM2M Server .","title":"Start development using samples"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#part-1-get-zephyr-and-python-dependencies","text":"To get the Zephyr SDK and dependencies follow the first 4 steps of the instruction provided by the Zephyr Project .","title":"Part 1: Get Zephyr and Python dependencies"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#part-2-clone-the-anjay-zephyr-repository","text":"Enter the command line interface on your machine, then paste and run the following command: git clone https://github.com/AVSystem/Anjay-zephyr-client","title":"Part 2: Clone the Anjay zephyr repository"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#part-3-build-binary-and-flash-the-board","text":"Connect the B-L475E-IOT01A board to a USB port of your machine. Set West manifest path to Anjay-zephyr-client/demo , and manifest file to west.yml and do west update : west config manifest.path Anjay-zephyr-client/demo west config manifest.file west.yml west update Compile the project for B-L475E-IOT01A using west build -b disco_l475_iot1 in the demo directory. Flash the board using west flash .","title":"Part 3: Build binary and flash the board"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#connect-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connect to the LwM2M Server"},{"location":"LwM2M_Client/STMicroelectronics/B-L475E-IOT01A/#configure-the-client","text":"With the board still connected to a serial port interface, open your serial communication program. Use the anjay command to list possible options: uart:~$ anjay anjay - Anjay commands Subcommands: start :Save config and start Anjay stop :Stop Anjay config :Configure Anjay params Tip To show available subcommands, use the Tab key. Check your default credentials by following the instructions in the program: Note If your default credentials are different from device credentials provided in Coiote IoT DM, change them using the anjay config set <possible_option> <value> command. Use the anjay start command to run the Client. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Tip LwM2M Server URI, endpoint name and other information can be found in the Configuration tab.","title":"Configure the Client"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/","text":"B-U585I-IOT02A/BG96 # Integrate your B-U585I-IOT02A Discovery kit board along with the default-provided Quectel BG96 modem. Prerequisites # The STM32U585I-IOT02A/BG96 board with a Micro-USB cable. The serial communication program, such as minicom (for Linux) or RealTerm or PuTTY (for Windows) installed. A user with access to the Coiote IoT Device Management platform. Optional: installed STM32CubeIDE . Prepare Anjay client application # Use an already built binary # To get the latest binary file and flash it to the board: Go to Anjay-freertos-client . Download the Anjay-freertos-client-B-U585I-IOT02A-BG96.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_U585AI external device. You will see a blinking diode on your board. The diode stops blinking as soon as the flashing is finished. Start development using samples # Note This step is optional. If you've gone through the Use an already built binary step, you can jump to Connecting to the LwM2M Server . Clone the Anjay freeRTOS client repository # Enter the command line interface on your machine and run the following command: git clone --recursive https://github.com/AVSystem/Anjay-freertos-client Build binary and flash the board # Connect the STM32U585I-IOT02A board to a USB port of your machine. Go to the STM32CubeIDE . Import the project cloned in the previous step to your workspace: From the navigation bar, select File and click Import . From the General list, select Existing Projects into Workspace and click Next . In Select root directory , indicate the catalog containing the cloned Anjay freeRTOS client repository. In the Projects field, select Anjay-freertos-client-B-U585I-IOT02A-BG96 and click Finish . In the Project Explorer, navigate to the Anjay-freertos-client-B-U585I-IOT02A-BG96 project: Choose \"Debug\" configuration and build the project by right-clicking on the project name and selecting Build Project . The build should take less than one minute to complete. After the build is finished, right-click on the project name, select Run As and click the 1 STM32 Cortex-M C/C++ Application option. In the Launch Configuration Selection , choose the Anjay-freertos-client-B-U585I-IOT02A-BG96 option and click OK . After the build and run are complete, the board is flashed with compiled binary. Connect to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register here . Note If you use BG96-based configuration, you must upgrade the firmware of the modem to at least the BG96MAR02A08M1G revision. Older versions may cause unexpected loss of connection. To upgrade this firmware please download the folowing .zip files: - Pack_BG96MAR02A08M1G_01.012.01.012 , - Quectel_LTE_Windows_USB_Driver_V2.0 , - QFlash_V4.10 . In Pack_BG96MAR02A08M1G_01.012.01.012 you will find step-by-step instruction. Step 2 and step 4 in this instruction doesn't work. For that reason you will need to download Quectel_LTE_Windows_USB_Driver_V2.0 file, as a required file for step 2, and QFlash_V4.10 file, as a required file for step 4. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server. Configure the Client # With the board still connected to a serial port interface, open your serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key, and in the configuration menu, change the default credentials to your data by following the instructions presented in the program, then save it. Tip LwM2M Server URI, endpoint name and other information you can be found in the configuration tab. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use a built-in Truphone eSIM card, change the APN to iot.truphone.com . Note If you use an external SIM card, you need to verify the APN used by your SIM card provider. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view:","title":"B-U585I-IOT02A/BG96"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#b-u585i-iot02abg96","text":"Integrate your B-U585I-IOT02A Discovery kit board along with the default-provided Quectel BG96 modem.","title":"B-U585I-IOT02A/BG96"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#prerequisites","text":"The STM32U585I-IOT02A/BG96 board with a Micro-USB cable. The serial communication program, such as minicom (for Linux) or RealTerm or PuTTY (for Windows) installed. A user with access to the Coiote IoT Device Management platform. Optional: installed STM32CubeIDE .","title":"Prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#prepare-anjay-client-application","text":"","title":"Prepare Anjay client application"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#use-an-already-built-binary","text":"To get the latest binary file and flash it to the board: Go to Anjay-freertos-client . Download the Anjay-freertos-client-B-U585I-IOT02A-BG96.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_U585AI external device. You will see a blinking diode on your board. The diode stops blinking as soon as the flashing is finished.","title":"Use an already built binary"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#start-development-using-samples","text":"Note This step is optional. If you've gone through the Use an already built binary step, you can jump to Connecting to the LwM2M Server .","title":"Start development using samples"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#clone-the-anjay-freertos-client-repository","text":"Enter the command line interface on your machine and run the following command: git clone --recursive https://github.com/AVSystem/Anjay-freertos-client","title":"Clone the Anjay freeRTOS client repository"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#build-binary-and-flash-the-board","text":"Connect the STM32U585I-IOT02A board to a USB port of your machine. Go to the STM32CubeIDE . Import the project cloned in the previous step to your workspace: From the navigation bar, select File and click Import . From the General list, select Existing Projects into Workspace and click Next . In Select root directory , indicate the catalog containing the cloned Anjay freeRTOS client repository. In the Projects field, select Anjay-freertos-client-B-U585I-IOT02A-BG96 and click Finish . In the Project Explorer, navigate to the Anjay-freertos-client-B-U585I-IOT02A-BG96 project: Choose \"Debug\" configuration and build the project by right-clicking on the project name and selecting Build Project . The build should take less than one minute to complete. After the build is finished, right-click on the project name, select Run As and click the 1 STM32 Cortex-M C/C++ Application option. In the Launch Configuration Selection , choose the Anjay-freertos-client-B-U585I-IOT02A-BG96 option and click OK . After the build and run are complete, the board is flashed with compiled binary.","title":"Build binary and flash the board"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#connect-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register here . Note If you use BG96-based configuration, you must upgrade the firmware of the modem to at least the BG96MAR02A08M1G revision. Older versions may cause unexpected loss of connection. To upgrade this firmware please download the folowing .zip files: - Pack_BG96MAR02A08M1G_01.012.01.012 , - Quectel_LTE_Windows_USB_Driver_V2.0 , - QFlash_V4.10 . In Pack_BG96MAR02A08M1G_01.012.01.012 you will find step-by-step instruction. Step 2 and step 4 in this instruction doesn't work. For that reason you will need to download Quectel_LTE_Windows_USB_Driver_V2.0 file, as a required file for step 2, and QFlash_V4.10 file, as a required file for step 4. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connect to the LwM2M Server"},{"location":"LwM2M_Client/STMicroelectronics/B-U585I-IOT02A-BG96/#configure-the-client","text":"With the board still connected to a serial port interface, open your serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key, and in the configuration menu, change the default credentials to your data by following the instructions presented in the program, then save it. Tip LwM2M Server URI, endpoint name and other information you can be found in the configuration tab. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use a built-in Truphone eSIM card, change the APN to iot.truphone.com . Note If you use an external SIM card, you need to verify the APN used by your SIM card provider. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view:","title":"Configure the Client"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/","text":"Runtime Certificate and Private Key Configuration # Introduction # Anjay library supports secure connection between device and server. Encryption can be achieved with the use of Pre-Shared Key as it was described in STM32L496G-DISCO/BG96 , B-L462E-CELL1/TYPE1SC , B-L475E-IOT01A , and B-U585I-IOT02A/BG96 pages or with certificate-based cryptography. In Certificate Mode an asymmetrical algorithm is used to authenticate the connection endpoints and initialize payload encryption. Appropriate certificates need to be generated for both the LwM2M Client and the LwM2M Server. Public certificates of both parties are mutually available, and each party also has access to its corresponding private key. You can read more about secure communication on Anjay's documentation page. Prerequisites # The STM32L496G-DISCO/BG96 board with a USB cable. Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. Installed OpenSSL An active Coiote IoT DM user account. Note In this tutorial we will use the STM32L496G-DISCO/BG96 board as an example. Flash the device # To get the latest binary file and flash the board: Connect the STM32L496G-DISCO/BG96 board to a USB port of your machine. Go to Anjay-freertos-client . Download the Anjay-freertos-client-STM32L496G-BG96.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L496ZG external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished. Generate certificate # The certificate and private key based on the SECP256R1 curve can be provided through the shell interface in PEM format. To generate a self-signed certificate and key pair open a terminal and use the following commands. openssl ecparam -name secp256r1 -out ecparam.der openssl req -new -x509 -nodes -newkey ec:ecparam.der -keyout demo-cert.key -out cert.pem -days 3650 openssl ec -in demo-cert.key -outform pem -out key.pem Important To use the certificate and private key configuration with Coiote IoT DM you must specify a common name that is the same as the client endpoint name. You will see two files cert.pem and key.pem created in the directory. Configure the Client # With the board still connected to a serial port interface, open a serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key and in the configuration menu, change the default credentials to your data by following the instructions presented below: Set 4. Security (none/psk/cert) to cert . Set 5. Endpoint name to your board endpoint name, e.g. anjay-demo . Set 6. Public cert or PSK identity and paste your generated certificate from cert.pem file. Set 7. Private cert or PSK and paste your generated certificate private key from key.pem file. Set 8. APN , 9. APN username , and 10. APN password to compatibile with your SIM card. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use built-in Truphone SIM card then change APN to iot.truphone.com . Note If you use external SIM card you have to check APN used by SIM card's provider. Save changes by clicking 1. Save & Exit , and go to the next step to add a device to Coiote IoT DM. Add device to Coiote IoT DM # Upon logging in to Coiote IoT DM for the first time, you will see the Add your LwM2M device panel. Note If you had previously added a device, in Device inventory , click the Add device button. Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name enter your LwM2M device endpoint name, e.g. anjay-demo . Note The Endpoint name should be the same as it is in the Client configuration. In the Security mode section, select Certificate mode. Click Upload a new certificate and Browse . In the pop-up, go to the directory where your certificate has been generated, select the cert.pem file and click Open . Click Add device . Click Next , Go to Summary to skip the third step, and Finish to see your Device Center.","title":"Runtime Certificate and Private Key Configuration"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#runtime-certificate-and-private-key-configuration","text":"","title":"Runtime Certificate and Private Key Configuration"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#introduction","text":"Anjay library supports secure connection between device and server. Encryption can be achieved with the use of Pre-Shared Key as it was described in STM32L496G-DISCO/BG96 , B-L462E-CELL1/TYPE1SC , B-L475E-IOT01A , and B-U585I-IOT02A/BG96 pages or with certificate-based cryptography. In Certificate Mode an asymmetrical algorithm is used to authenticate the connection endpoints and initialize payload encryption. Appropriate certificates need to be generated for both the LwM2M Client and the LwM2M Server. Public certificates of both parties are mutually available, and each party also has access to its corresponding private key. You can read more about secure communication on Anjay's documentation page.","title":"Introduction"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#prerequisites","text":"The STM32L496G-DISCO/BG96 board with a USB cable. Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. Installed OpenSSL An active Coiote IoT DM user account. Note In this tutorial we will use the STM32L496G-DISCO/BG96 board as an example.","title":"Prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#flash-the-device","text":"To get the latest binary file and flash the board: Connect the STM32L496G-DISCO/BG96 board to a USB port of your machine. Go to Anjay-freertos-client . Download the Anjay-freertos-client-STM32L496G-BG96.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L496ZG external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished.","title":"Flash the device"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#generate-certificate","text":"The certificate and private key based on the SECP256R1 curve can be provided through the shell interface in PEM format. To generate a self-signed certificate and key pair open a terminal and use the following commands. openssl ecparam -name secp256r1 -out ecparam.der openssl req -new -x509 -nodes -newkey ec:ecparam.der -keyout demo-cert.key -out cert.pem -days 3650 openssl ec -in demo-cert.key -outform pem -out key.pem Important To use the certificate and private key configuration with Coiote IoT DM you must specify a common name that is the same as the client endpoint name. You will see two files cert.pem and key.pem created in the directory.","title":"Generate certificate"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#configure-the-client","text":"With the board still connected to a serial port interface, open a serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key and in the configuration menu, change the default credentials to your data by following the instructions presented below: Set 4. Security (none/psk/cert) to cert . Set 5. Endpoint name to your board endpoint name, e.g. anjay-demo . Set 6. Public cert or PSK identity and paste your generated certificate from cert.pem file. Set 7. Private cert or PSK and paste your generated certificate private key from key.pem file. Set 8. APN , 9. APN username , and 10. APN password to compatibile with your SIM card. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use built-in Truphone SIM card then change APN to iot.truphone.com . Note If you use external SIM card you have to check APN used by SIM card's provider. Save changes by clicking 1. Save & Exit , and go to the next step to add a device to Coiote IoT DM.","title":"Configure the Client"},{"location":"LwM2M_Client/STMicroelectronics/Runtime_certificate/#add-device-to-coiote-iot-dm","text":"Upon logging in to Coiote IoT DM for the first time, you will see the Add your LwM2M device panel. Note If you had previously added a device, in Device inventory , click the Add device button. Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Endpoint name enter your LwM2M device endpoint name, e.g. anjay-demo . Note The Endpoint name should be the same as it is in the Client configuration. In the Security mode section, select Certificate mode. Click Upload a new certificate and Browse . In the pop-up, go to the directory where your certificate has been generated, select the cert.pem file and click Open . Click Add device . Click Next , Go to Summary to skip the third step, and Finish to see your Device Center.","title":"Add device to Coiote IoT DM"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/","text":"STM32L496G-DISCO/BG96 # Integrate your P-L496G-CELL02 Discovery kit board along with the default-provided Quectel BG96 modem. Prerequisites # The STM32L496G-DISCO/BG96 board with a Micro-USB cable. Installed STM32CubeIDE . The serial communication program, such as minicom (for Linux) or RealTerm or PuTTY (for Windows) installed. A user with access to the Coiote IoT Device Management platform. Prepare Anjay client application # Use an already built binary # To get the latest binary file and flash it to the board: Go to Anjay-freertos-client . Download the Anjay-freertos-client-STM32L496G-BG96.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L496ZG external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished. Start development using samples # Note This step is optional. If you've gone through the Use an already built binary step, you can go to Connect to the LwM2M Server right away. Clone the Anjay freeRTOS client repository # Enter the command line interface on your machine and run the following command: git clone --recursive https://github.com/AVSystem/Anjay-freertos-client Build binary and flash the board # Connect the STM32L496G-DISCO board to a USB port of your machine. Go to the STM32CubeIDE. Import the project cloned in the previous step to your workspace: From the navigation bar, select File and click Import . From the General list, select Existing Projects into Workspace and click Next . In Select root directory , indicate the catalog containing the cloned Anjay freeRTOS client repository. In the Projects field, select Anjay-freertos-client-STM32L496G-BG96 and click Finish . In the Project Explorer, navigate to the Anjay-freertos-client-STM32L496G-BG96 project: Choose \"Debug\" configuration and build the project by right-clicking on the project name and selecting Build Project . The build should take less than one minute to complete. After the build is finished, right-click on the project name, select Run As and click the 1 STM32 Cortex-M C/C++ Application option. In the Lauch Configuration Selection , choose the Anjay-freertos-client-STM32L496G-BG96 option and click OK . After the build and run are complete, the board is flashed with compiled binary. Connect to the LwM2M Server # To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . Note If you use the BG96-based configuration, you need to upgrade the modem firmware to at least the BG96MAR02A08M1G revision. Older versions may cause unexpected loss of connection. To upgrade the firmware, download the following .zip files: - Pack_BG96MAR02A08M1G_01.012.01.012 , - Quectel_LTE_Windows_USB_Driver_V2.0 , - QFlash_V4.10 . Then, follow a step-by-step instruction in Pack_BG96MAR02A08M1G_01.012.01.012 . Mind that links from steps 2 and 4 of this instruction don't work correctly. For this reason you will need to use the downloaded Quectel_LTE_Windows_USB_Driver_V2.0 file for step 2 and QFlash_V4.10 file for step 4. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server. Configure the Client # With the board still connected to a serial port interface, open your serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key and in the configuration menu, change the default credentials to your data by following the instructions presented in the program and save it. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use a built-in Truphone eSIM card, change the APN to iot.truphone.com . Note If you use external SIM card you have to check APN used by SIM card's provider. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Tip LwM2M Server URI, endpoint name and other information can be found in the Configuration tab. Anjay-freertos-client with FOTA (Firmware update Over the Air) # Anjay application can be built in basic version (without FOTA) as described in the Build binary and flash the board section. In order to use FOTA, a few additional steps need to be done, e.g. Secure Boot and Secure Firmware Update compilation. The X-CUBE-SBSFU Secure Boot and Secure Firmware Update solution allows the update of the STM32 microcontroller built-in program with new firmware versions, adding new features and correcting issues. The update process is performed in a secure way to prevent unauthorized updates and access to confidential on-device data such as code and firmware encryption key. The Secure Boot (Root of Trust services) is immutable code, always executed after a system reset, that checks STM32 static protections, activates STM32 runtime protections and then verifies the authenticity and integrity of user application code before every execution in order to ensure that invalid or malicious code won't be run. Additional prerequisites # STM32CubeProgrammer installed. Support for shell scripts execution (on Windows for example Git or Cygwin can be used). Python with the following modules: pycryptodomex , ecdsa , numpy , pyelftools . Import STM32L496G-Discovery_2_Images_SBSFU and STM32L496G-Discovery_2_Images_SECoreBin projects from previously cloned repository to workspace. Prepare binary with SBSFU # Important You need to follow a strict compilation order presented below. Compile SECoreBin application This step is needed to create the Secure Engine core binary including all the trusted code and keys mapped inside the protected environment. The binary is linked with the SBSFU code in step 2. Compile SBSFU application This step compiles the SBSFU source code implementing the state machine and configuring the protections. In addition, it links the code with the SECore binary generated at step 1 in order to generate a single SBSFU binary including the SE trusted code. Compile UserApp application (set Build configuration to Release ) It generates: The user application binary file that is uploaded to the device using the Secure Firmware Update process ( Projects/STM32L496G-DISCO/UserApp/Binary/Anjay-freertos-client-STM32L496G-BG96.sfb ). A binary file concatenating the SBSFU binary, the user application binary in clear format, and the corresponding FW header ( Projects/STM32L496G-DISCO/UserApp/Binary/SBSFU_Anjay-freertos-client-STM32L496G-BG96.bin ). Tip You can set a custom firmware version in the Application/Inc/default_config.h file (using FIRMWARE_VERSION define). It will be useful when performing FOTA to distinguish the firmware images from each other. Flash the board with SBSFU binary # Use STM32CubeProgrammer application with SBSFU_Anjay-freertos-client-STM32L496G-BG96.bin file to program the board (it is advisable to perform Full chip erase first). You can open serial port to change default credentials in order to connect to Coiote IoT DM. After that, you can use Coiote IoT DM to perform firmware update with Anjay-freertos-client-STM32L496G-BG96.sfb file. Important Disable Secure Protection When flashed board with Secure Boot you will need to switch off secure protection to be able to flash the board again. To deactivate secure application please run STM32_Programmer_CLI (Program provided with STM32CubeProgrammer) tool with specific options: ./< path_to_STM32_Programmer_CLI > -c port=SWD mode=UR -ob RDP=0xBB -ob RDP=0xAA WRP1A_STRT=0xFF WRP1A_END=0x0 -ob displ Perform firmware update # In order to perform firmware update: Build the application and flash the board with FIRMWARE_UPDATE define set to the proper version (see Prepare binary with SBSFU step), e.g. #define FIRMWARE_VERSION \"v1.0\" Make changes to the code (optionally), set FIRMWARE_UPDATE define to a different version, e.g. #define FIRMWARE_VERSION \"v2.0\" and build the application with a new firmware. Upload the generated firmware file ( Anjay-freertos-client-STM32L496G-BG96.sfb ) to Coiote IoT DM (go to Device management and select Firmware update ) and click Upgrade . After the FOTA finishes, the device will reboot and the following log should appear: Firmware updated from version 'v1.0' to 'v2.0' where v1.0 and v2.0 will be set to firmware versions you set earlier.","title":"STM32L496G-DISCO/BG96"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#stm32l496g-discobg96","text":"Integrate your P-L496G-CELL02 Discovery kit board along with the default-provided Quectel BG96 modem.","title":"STM32L496G-DISCO/BG96"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#prerequisites","text":"The STM32L496G-DISCO/BG96 board with a Micro-USB cable. Installed STM32CubeIDE . The serial communication program, such as minicom (for Linux) or RealTerm or PuTTY (for Windows) installed. A user with access to the Coiote IoT Device Management platform.","title":"Prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#prepare-anjay-client-application","text":"","title":"Prepare Anjay client application"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#use-an-already-built-binary","text":"To get the latest binary file and flash it to the board: Go to Anjay-freertos-client . Download the Anjay-freertos-client-STM32L496G-BG96.bin file. To flash the board, open your File manager and drag the downloaded .bin file to your DIS_L496ZG external device. You will see a blinking diode on your board. The diode will stop blinking as soon as the flashing is finished.","title":"Use an already built binary"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#start-development-using-samples","text":"Note This step is optional. If you've gone through the Use an already built binary step, you can go to Connect to the LwM2M Server right away.","title":"Start development using samples"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#clone-the-anjay-freertos-client-repository","text":"Enter the command line interface on your machine and run the following command: git clone --recursive https://github.com/AVSystem/Anjay-freertos-client","title":"Clone the Anjay freeRTOS client repository"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#build-binary-and-flash-the-board","text":"Connect the STM32L496G-DISCO board to a USB port of your machine. Go to the STM32CubeIDE. Import the project cloned in the previous step to your workspace: From the navigation bar, select File and click Import . From the General list, select Existing Projects into Workspace and click Next . In Select root directory , indicate the catalog containing the cloned Anjay freeRTOS client repository. In the Projects field, select Anjay-freertos-client-STM32L496G-BG96 and click Finish . In the Project Explorer, navigate to the Anjay-freertos-client-STM32L496G-BG96 project: Choose \"Debug\" configuration and build the project by right-clicking on the project name and selecting Build Project . The build should take less than one minute to complete. After the build is finished, right-click on the project name, select Run As and click the 1 STM32 Cortex-M C/C++ Application option. In the Lauch Configuration Selection , choose the Anjay-freertos-client-STM32L496G-BG96 option and click OK . After the build and run are complete, the board is flashed with compiled binary.","title":"Build binary and flash the board"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#connect-to-the-lwm2m-server","text":"To connect to Coiote IoT Device Management platform, please register at https://eu.iot.avsystem.cloud . Note If you use the BG96-based configuration, you need to upgrade the modem firmware to at least the BG96MAR02A08M1G revision. Older versions may cause unexpected loss of connection. To upgrade the firmware, download the following .zip files: - Pack_BG96MAR02A08M1G_01.012.01.012 , - Quectel_LTE_Windows_USB_Driver_V2.0 , - QFlash_V4.10 . Then, follow a step-by-step instruction in Pack_BG96MAR02A08M1G_01.012.01.012 . Mind that links from steps 2 and 4 of this instruction don't work correctly. For this reason you will need to use the downloaded Quectel_LTE_Windows_USB_Driver_V2.0 file for step 2 and QFlash_V4.10 file for step 4. To connect the board: Log in to Coiote IoT DM and from the left side menu, select Device Inventory . In Device Inventory , click Add device . Select the Connect your LwM2M device directly via the Management server tile. In the Device credentials step: In the Device ID enter your board endpoint name, e.g. test_device . In the Security mode section, select the PSK (Pre-Shared Key) mode: In the Key identity field, type the same name as in the Endpoint name field. In the Key field, type the shared secret used in the device-server authentication. Click the Add device button and Confirm in the confirmation pop-up. In the Connect your device step, follow the next section to run the client and connect it to the server.","title":"Connect to the LwM2M Server"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#configure-the-client","text":"With the board still connected to a serial port interface, open your serial communication program. Press the reset button located on the board. This should trigger the following prompt: Press any key in 3 seconds to enter config menu... Press any key and in the configuration menu, change the default credentials to your data by following the instructions presented in the program and save it. Important APN (Access Point Name) is the name of a gateway between a GSM, GPRS, 3G and 4G mobile network and another computer network. If you use a built-in Truphone eSIM card, change the APN to iot.truphone.com . Note If you use external SIM card you have to check APN used by SIM card's provider. Go to Coiote IoT DM to check if your device is connected. Click Next , then Go to Summary , then Finish . You will see your Device Center view: Tip LwM2M Server URI, endpoint name and other information can be found in the Configuration tab.","title":"Configure the Client"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#anjay-freertos-client-with-fota-firmware-update-over-the-air","text":"Anjay application can be built in basic version (without FOTA) as described in the Build binary and flash the board section. In order to use FOTA, a few additional steps need to be done, e.g. Secure Boot and Secure Firmware Update compilation. The X-CUBE-SBSFU Secure Boot and Secure Firmware Update solution allows the update of the STM32 microcontroller built-in program with new firmware versions, adding new features and correcting issues. The update process is performed in a secure way to prevent unauthorized updates and access to confidential on-device data such as code and firmware encryption key. The Secure Boot (Root of Trust services) is immutable code, always executed after a system reset, that checks STM32 static protections, activates STM32 runtime protections and then verifies the authenticity and integrity of user application code before every execution in order to ensure that invalid or malicious code won't be run.","title":"Anjay-freertos-client with FOTA (Firmware update Over the Air)"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#additional-prerequisites","text":"STM32CubeProgrammer installed. Support for shell scripts execution (on Windows for example Git or Cygwin can be used). Python with the following modules: pycryptodomex , ecdsa , numpy , pyelftools . Import STM32L496G-Discovery_2_Images_SBSFU and STM32L496G-Discovery_2_Images_SECoreBin projects from previously cloned repository to workspace.","title":"Additional prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#prepare-binary-with-sbsfu","text":"Important You need to follow a strict compilation order presented below. Compile SECoreBin application This step is needed to create the Secure Engine core binary including all the trusted code and keys mapped inside the protected environment. The binary is linked with the SBSFU code in step 2. Compile SBSFU application This step compiles the SBSFU source code implementing the state machine and configuring the protections. In addition, it links the code with the SECore binary generated at step 1 in order to generate a single SBSFU binary including the SE trusted code. Compile UserApp application (set Build configuration to Release ) It generates: The user application binary file that is uploaded to the device using the Secure Firmware Update process ( Projects/STM32L496G-DISCO/UserApp/Binary/Anjay-freertos-client-STM32L496G-BG96.sfb ). A binary file concatenating the SBSFU binary, the user application binary in clear format, and the corresponding FW header ( Projects/STM32L496G-DISCO/UserApp/Binary/SBSFU_Anjay-freertos-client-STM32L496G-BG96.bin ). Tip You can set a custom firmware version in the Application/Inc/default_config.h file (using FIRMWARE_VERSION define). It will be useful when performing FOTA to distinguish the firmware images from each other.","title":"Prepare binary with SBSFU"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#flash-the-board-with-sbsfu-binary","text":"Use STM32CubeProgrammer application with SBSFU_Anjay-freertos-client-STM32L496G-BG96.bin file to program the board (it is advisable to perform Full chip erase first). You can open serial port to change default credentials in order to connect to Coiote IoT DM. After that, you can use Coiote IoT DM to perform firmware update with Anjay-freertos-client-STM32L496G-BG96.sfb file. Important Disable Secure Protection When flashed board with Secure Boot you will need to switch off secure protection to be able to flash the board again. To deactivate secure application please run STM32_Programmer_CLI (Program provided with STM32CubeProgrammer) tool with specific options: ./< path_to_STM32_Programmer_CLI > -c port=SWD mode=UR -ob RDP=0xBB -ob RDP=0xAA WRP1A_STRT=0xFF WRP1A_END=0x0 -ob displ","title":"Flash the board with SBSFU binary"},{"location":"LwM2M_Client/STMicroelectronics/STM32L496G-DISCOBG96/#perform-firmware-update","text":"In order to perform firmware update: Build the application and flash the board with FIRMWARE_UPDATE define set to the proper version (see Prepare binary with SBSFU step), e.g. #define FIRMWARE_VERSION \"v1.0\" Make changes to the code (optionally), set FIRMWARE_UPDATE define to a different version, e.g. #define FIRMWARE_VERSION \"v2.0\" and build the application with a new firmware. Upload the generated firmware file ( Anjay-freertos-client-STM32L496G-BG96.sfb ) to Coiote IoT DM (go to Device management and select Firmware update ) and click Upgrade . After the FOTA finishes, the device will reboot and the following log should appear: Firmware updated from version 'v1.0' to 'v2.0' where v1.0 and v2.0 will be set to firmware versions you set earlier.","title":"Perform firmware update"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/","text":"Building LwM2M applications for STM boards with I-CUBE-Anjay # Start prototyping custom LwM2M applications on your STMicroelectronics board with I-CUBE-Anjay using STM32CubeMX. Prerequisites # An STM board with a USB cable. Installed STM32CubeMX . Downloaded Anjay I-CUBE pack file . Step 1: Installing the Anjay I-CUBE software pack # Open STM32CUBEMX and in the New project section, select ACCESS TO BOARD SELECTOR . From the list of STM boards, select your board, click Start project and click No in the Initialize all peripherals with their default mode pop-up that appears. In the Pinout & Configuration tab, click Software Packs and select Manage Software Packs . Click From local and select your Anjay I-Cube pack from your local disk. After reading the license agreement, check the license agreement checkbox and click Finish . The pack will be installed in a few seconds. Back in the Pinout & Configuration tab, click Software Packs and select Select Components . From the list of packs, click AVSystem.I-CUBE-Anjay to expand a list of bundles and components. Configure options according to the specific instruction for your board in the Specific CubeMX settings . Step 2: Configuring the Anjay I-CUBE application # Before you generate code for your application, you need to configure it as per the specific requirements for your board: Back in the Pinout & Configuration tab, expand the Software Packs tab that has appeared in the side menu and click AVSystem.I-CUBE-Anjay.x.xx.x : In the Mode window that appears, check all the boxes next to the LwM2M Stack, Device LwM2M Client example, Board Support LwM2M, Board Support X STMOD PLUS MODEMS, Cellular Middleware STM32 Cellular options. In the Configuration window: Go to the Parameter Settings tab and configure your Anjay Library. For a detailed description of all Anjay library configuration options, see here . Go to the Client Settings tab and configure your LwM2M Client parameters like Endpoint name, PSK, PSK identity, server URI and others. In the Pinout & Configuration tab: Expand the Connectivity , Middleware , Security and System Core tabs: Configure options according to the specific instruction for your board in the Specific CubeMX settings . Step 3: Generating application code # Back in your project overview, select the Project Manager tab: In the Project tab: In the Project Name field, provide a name for your project. From the Toolchain/IDE expandable list, select STM32CubeIDE . In linker settings adjust Minimum Heap Size to 0x5000 and Minimum Stack Size to 0xC00. In the Code Generator tab: Check the Generate peripheral initialization as a pair of '.c/.h' files per peripheral . Click GENERATE CODE and confirm by clicking Yes in the pop-up. After the project is generated, you can use it further in the CubeIDE to develop, flash and debug your application. Specific CubeMX settings # B-L462E-CELL1 # Start from board selector with B-L462E-CELL1 board, do not initialize all peripherals with their default mode. Through Select Components menu choose desired components from the pack, in this example select: LwM2M Stack Anjay LwIP mbedtls Device Application - FullExample Board Support LwM2M LwM2M Objects: B-L462E-CELL1 B-L462E-CELL1 BSP Board Support X_STMOD_PLUS_MODEMS - TYPE1SC STM32_Cellular Core Platform config: B-L462E-CELL1 Apply the following settings: Connectivity tab: I2C1 - Enable I2C1 USART1 - Enable Asynchronous, enable global interrupts USART2 - Enable Asynchronous, enable global interrupts USART3 - Enable Asynchronous, enable global interrupts Middleware tab: FreeRTOS Interface - CMSIS_V1 TOTAL_HEAP_SIZE - 32768 Bytes USE_COUNTING_SEMAPHORES - Enabled Project Manager: Code Generator - Enable Generate peripheral initialization as a pair of '.c/.h' files per peripheral. Software Packs: I-CUBE-Anjay - select all enabled components and modify Client Settings with connection parameters. Parameter settings can be modified to alter Anjay LwM2M Library configuration. Generate the project and open it in STM32CubeIDE . Right click on the project Build Configurations -> Set Active -> Release . Select generated project and modify Properties -> C/C++ Build -> Settings -> MCU Settings Change Runtime library to Standard C . Flash the project using Run As -> STM32 Cortex-M C/C++ Application . P-L496G-CELL02 # Start from board selector with STM32L496G-DISCO board, do not initialize all peripherals with their default mode. Through Select Components menu choose desired components from the pack, in this example select: LwM2M Stack Anjay LwIP mbedtls Device Application - FullExample Board Support LwM2M LwM2M Objects: P-L496G-CELL02 P-L496G-CELL02 BSP Board Support X_STMOD_PLUS_MODEMS - BG96 or MONARCH (depending on your setup) STM32_Cellular Core Platform config: P-L496G-CELL02 Apply the following settings: Connectivity tab: I2C1 - Enable I2C USART1 - Enable Asynchronous, enable global interrupts USART2 - Enable Asynchronous, enable global interrupts Security tab: RNG - Enable Middleware tab: FreeRTOS Interface - CMSIS_V1 TOTAL_HEAP_SIZE - 32768 Bytes USE_COUNTING_SEMAPHORES - Enabled USE_TIMERS - Enabled vTaskDelayUntil - Enabled uxTaskGetStackHighWaterMark - Enabled System Core SYS Timebase Source - TIM1 Project Manager: Code Generator - Enable Generate peripheral initialization as a pair of '.c/.h' files per peripheral. Software Packs: I-CUBE-Anjay - select all enabled components and modify Client Settings with connection parameters. Parameter settings can be modified to alter Anjay LwM2M Library configuration. Generate the project and open it in STM32CubeIDE . Select generated project and modify Properties -> C/C++ Build -> Settings -> MCU Settings Change Runtime library to Standard C . Flash the project using Run As -> STM32 Cortex-M C/C++ Application . Compiler-dependent options # When generating code, CubeMX might warn you that USE_NEWLIB_REENTRANT option must be set. However, not all the IDEs have newlib in their toolchain libraries and checking this option can make your project uncompilable. For IAR and Keil simply press Yes to skip it. Depending on the Compiler Toolchain, redirecting standard output into the console via UART and serial port might require additional options in IDE and compiler-specific code. Solutions can be found below as well as in the Pack's demonstration projects. IAR Embedded Workbench # IAR Embedded Workbench for ARM version 9.20.2 or higher is required to compile the project. To compile client application example, navigate to Project -> Options ... -> C/C++ Compiler -> C dialect and set Allow VLA . To allow and handle serial output with application flashed on board and not attached to IAR, Semihosting has to be disabled. Navigate to Project -> Options ... -> General Options -> Library low-level interface implementation and set it to None . In main.c add the following lines of code: #include \"plf_hw_config.h\" #include <stdio.h> #include \"trace_interface.h\" #include <LowLevelIOInterface.h> // ... int iar_fputc(int ch); #define PUTCHAR_PROTOTYPE int iar_fputc(int ch) // ... size_t __write(int file, unsigned char const *ptr, size_t len) { size_t idx; unsigned char const *pdata = ptr; for (idx = 0; idx < len; idx++) { iar_fputc((int)*pdata); pdata++; } return len; } PUTCHAR_PROTOTYPE { /* Place your implementation of putchar here */ /* e.g. write a character to the USART3 and Loop until the end of transmission */ HAL_UART_Transmit(&TRACE_INTERFACE_UART_HANDLE, (uint8_t *)&ch, 1, 0xFFFF); return ch; } Keil uVision # The newest Keil MDK distribution no longer contains Arm Compiler 5, which is a target compiler when generating a project with STM32CubeMX. You have to either install Keil MDK version older than 5.37 or install the missing compiler manually - more information here . Keil's errno defines conflict with LwIP's errno and it must be resolved by adding LwIP's include folder to the list of the system includes. To do so, navigate to Project -> Options for Target (...) -> C/C++ -> Misc Controls and add a following command control option (ensure proper path; incorrect path will not generate an error): -J ../Middlewares/Third_Party/AVSystem_LwM2M_Stack/LwIP/src/include/compat/stdc -J \"$J\" To ensure proper handling of serial output with application flashed on board and not attached to uVision, navigate to Project -> Manage -> Run-Time Environment... -> Compiler -> I/O , select checkboxes and choose User variant for STRERR , STDIN and STDOUT . In main.c add the following lines of code: #include \"plf_hw_config.h\" #include <stdio.h> // ... #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f) // ... PUTCHAR_PROTOTYPE { /* Place your implementation of putchar here */ /* e.g. write a character to the USART3 and Loop until the end of transmission */ HAL_UART_Transmit(&TRACE_INTERFACE_UART_HANDLE, (uint8_t *)&ch, 1, 0xFFFF); return ch; }","title":"Building LwM2M applications for STM boards with I-CUBE-Anjay"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#building-lwm2m-applications-for-stm-boards-with-i-cube-anjay","text":"Start prototyping custom LwM2M applications on your STMicroelectronics board with I-CUBE-Anjay using STM32CubeMX.","title":"Building LwM2M applications for STM boards with I-CUBE-Anjay"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#prerequisites","text":"An STM board with a USB cable. Installed STM32CubeMX . Downloaded Anjay I-CUBE pack file .","title":"Prerequisites"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#step-1-installing-the-anjay-i-cube-software-pack","text":"Open STM32CUBEMX and in the New project section, select ACCESS TO BOARD SELECTOR . From the list of STM boards, select your board, click Start project and click No in the Initialize all peripherals with their default mode pop-up that appears. In the Pinout & Configuration tab, click Software Packs and select Manage Software Packs . Click From local and select your Anjay I-Cube pack from your local disk. After reading the license agreement, check the license agreement checkbox and click Finish . The pack will be installed in a few seconds. Back in the Pinout & Configuration tab, click Software Packs and select Select Components . From the list of packs, click AVSystem.I-CUBE-Anjay to expand a list of bundles and components. Configure options according to the specific instruction for your board in the Specific CubeMX settings .","title":"Step 1: Installing the Anjay I-CUBE software pack"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#step-2-configuring-the-anjay-i-cube-application","text":"Before you generate code for your application, you need to configure it as per the specific requirements for your board: Back in the Pinout & Configuration tab, expand the Software Packs tab that has appeared in the side menu and click AVSystem.I-CUBE-Anjay.x.xx.x : In the Mode window that appears, check all the boxes next to the LwM2M Stack, Device LwM2M Client example, Board Support LwM2M, Board Support X STMOD PLUS MODEMS, Cellular Middleware STM32 Cellular options. In the Configuration window: Go to the Parameter Settings tab and configure your Anjay Library. For a detailed description of all Anjay library configuration options, see here . Go to the Client Settings tab and configure your LwM2M Client parameters like Endpoint name, PSK, PSK identity, server URI and others. In the Pinout & Configuration tab: Expand the Connectivity , Middleware , Security and System Core tabs: Configure options according to the specific instruction for your board in the Specific CubeMX settings .","title":"Step 2: Configuring the Anjay I-CUBE application"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#step-3-generating-application-code","text":"Back in your project overview, select the Project Manager tab: In the Project tab: In the Project Name field, provide a name for your project. From the Toolchain/IDE expandable list, select STM32CubeIDE . In linker settings adjust Minimum Heap Size to 0x5000 and Minimum Stack Size to 0xC00. In the Code Generator tab: Check the Generate peripheral initialization as a pair of '.c/.h' files per peripheral . Click GENERATE CODE and confirm by clicking Yes in the pop-up. After the project is generated, you can use it further in the CubeIDE to develop, flash and debug your application.","title":"Step 3: Generating application code"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#specific-cubemx-settings","text":"","title":"Specific CubeMX settings"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#b-l462e-cell1","text":"Start from board selector with B-L462E-CELL1 board, do not initialize all peripherals with their default mode. Through Select Components menu choose desired components from the pack, in this example select: LwM2M Stack Anjay LwIP mbedtls Device Application - FullExample Board Support LwM2M LwM2M Objects: B-L462E-CELL1 B-L462E-CELL1 BSP Board Support X_STMOD_PLUS_MODEMS - TYPE1SC STM32_Cellular Core Platform config: B-L462E-CELL1 Apply the following settings: Connectivity tab: I2C1 - Enable I2C1 USART1 - Enable Asynchronous, enable global interrupts USART2 - Enable Asynchronous, enable global interrupts USART3 - Enable Asynchronous, enable global interrupts Middleware tab: FreeRTOS Interface - CMSIS_V1 TOTAL_HEAP_SIZE - 32768 Bytes USE_COUNTING_SEMAPHORES - Enabled Project Manager: Code Generator - Enable Generate peripheral initialization as a pair of '.c/.h' files per peripheral. Software Packs: I-CUBE-Anjay - select all enabled components and modify Client Settings with connection parameters. Parameter settings can be modified to alter Anjay LwM2M Library configuration. Generate the project and open it in STM32CubeIDE . Right click on the project Build Configurations -> Set Active -> Release . Select generated project and modify Properties -> C/C++ Build -> Settings -> MCU Settings Change Runtime library to Standard C . Flash the project using Run As -> STM32 Cortex-M C/C++ Application .","title":"B-L462E-CELL1"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#p-l496g-cell02","text":"Start from board selector with STM32L496G-DISCO board, do not initialize all peripherals with their default mode. Through Select Components menu choose desired components from the pack, in this example select: LwM2M Stack Anjay LwIP mbedtls Device Application - FullExample Board Support LwM2M LwM2M Objects: P-L496G-CELL02 P-L496G-CELL02 BSP Board Support X_STMOD_PLUS_MODEMS - BG96 or MONARCH (depending on your setup) STM32_Cellular Core Platform config: P-L496G-CELL02 Apply the following settings: Connectivity tab: I2C1 - Enable I2C USART1 - Enable Asynchronous, enable global interrupts USART2 - Enable Asynchronous, enable global interrupts Security tab: RNG - Enable Middleware tab: FreeRTOS Interface - CMSIS_V1 TOTAL_HEAP_SIZE - 32768 Bytes USE_COUNTING_SEMAPHORES - Enabled USE_TIMERS - Enabled vTaskDelayUntil - Enabled uxTaskGetStackHighWaterMark - Enabled System Core SYS Timebase Source - TIM1 Project Manager: Code Generator - Enable Generate peripheral initialization as a pair of '.c/.h' files per peripheral. Software Packs: I-CUBE-Anjay - select all enabled components and modify Client Settings with connection parameters. Parameter settings can be modified to alter Anjay LwM2M Library configuration. Generate the project and open it in STM32CubeIDE . Select generated project and modify Properties -> C/C++ Build -> Settings -> MCU Settings Change Runtime library to Standard C . Flash the project using Run As -> STM32 Cortex-M C/C++ Application .","title":"P-L496G-CELL02"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#compiler-dependent-options","text":"When generating code, CubeMX might warn you that USE_NEWLIB_REENTRANT option must be set. However, not all the IDEs have newlib in their toolchain libraries and checking this option can make your project uncompilable. For IAR and Keil simply press Yes to skip it. Depending on the Compiler Toolchain, redirecting standard output into the console via UART and serial port might require additional options in IDE and compiler-specific code. Solutions can be found below as well as in the Pack's demonstration projects.","title":"Compiler-dependent options"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#iar-embedded-workbench","text":"IAR Embedded Workbench for ARM version 9.20.2 or higher is required to compile the project. To compile client application example, navigate to Project -> Options ... -> C/C++ Compiler -> C dialect and set Allow VLA . To allow and handle serial output with application flashed on board and not attached to IAR, Semihosting has to be disabled. Navigate to Project -> Options ... -> General Options -> Library low-level interface implementation and set it to None . In main.c add the following lines of code: #include \"plf_hw_config.h\" #include <stdio.h> #include \"trace_interface.h\" #include <LowLevelIOInterface.h> // ... int iar_fputc(int ch); #define PUTCHAR_PROTOTYPE int iar_fputc(int ch) // ... size_t __write(int file, unsigned char const *ptr, size_t len) { size_t idx; unsigned char const *pdata = ptr; for (idx = 0; idx < len; idx++) { iar_fputc((int)*pdata); pdata++; } return len; } PUTCHAR_PROTOTYPE { /* Place your implementation of putchar here */ /* e.g. write a character to the USART3 and Loop until the end of transmission */ HAL_UART_Transmit(&TRACE_INTERFACE_UART_HANDLE, (uint8_t *)&ch, 1, 0xFFFF); return ch; }","title":"IAR Embedded Workbench"},{"location":"LwM2M_Client/STMicroelectronics/Building_LwM2M_applications/Building_LwM2M_applications_with_I-CUBE-Anjay/#keil-uvision","text":"The newest Keil MDK distribution no longer contains Arm Compiler 5, which is a target compiler when generating a project with STM32CubeMX. You have to either install Keil MDK version older than 5.37 or install the missing compiler manually - more information here . Keil's errno defines conflict with LwIP's errno and it must be resolved by adding LwIP's include folder to the list of the system includes. To do so, navigate to Project -> Options for Target (...) -> C/C++ -> Misc Controls and add a following command control option (ensure proper path; incorrect path will not generate an error): -J ../Middlewares/Third_Party/AVSystem_LwM2M_Stack/LwIP/src/include/compat/stdc -J \"$J\" To ensure proper handling of serial output with application flashed on board and not attached to uVision, navigate to Project -> Manage -> Run-Time Environment... -> Compiler -> I/O , select checkboxes and choose User variant for STRERR , STDIN and STDOUT . In main.c add the following lines of code: #include \"plf_hw_config.h\" #include <stdio.h> // ... #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f) // ... PUTCHAR_PROTOTYPE { /* Place your implementation of putchar here */ /* e.g. write a character to the USART3 and Loop until the end of transmission */ HAL_UART_Transmit(&TRACE_INTERFACE_UART_HANDLE, (uint8_t *)&ch, 1, 0xFFFF); return ch; }","title":"Keil uVision"},{"location":"Release_Notes/v2021.22.1/","text":"v2021.22.1 # Previous version: v2021.19.0 Features # New Device inventory view # The new Device inventory is now the default for viewing devices in the Coiote IoT DM platform. It has an improved design as well as faster and more stable performance. The new Device inventory is available directly from the left navigation bar. If you need to access the old Device inventory view, go to Administration -> Device inventory . Enhancements # EST DER format support # We switched from the PEM to the DER content format of enrolling and re-enrolling requests sent to the EST server. Thanks to this change more EST Server implementations will be supported and compliance with RFC7030 is enhanced. Bug fixes # Larger limits for HTTP request headers # Thanks to a new configuration for Jetty, you can now access REST API and Coiote IoT DM GUI even with large HTTP request headers. Security # Updated Grafana version to fix the CVE-2021-43798 vulnerability. Our security scan confirmed that Coiote IoT DM isn\u2019t affected by the Apache Log4j vulnerability.","title":"v2021.22.1"},{"location":"Release_Notes/v2021.22.1/#v2021221","text":"Previous version: v2021.19.0","title":"v2021.22.1"},{"location":"Release_Notes/v2021.22.1/#features","text":"","title":"Features"},{"location":"Release_Notes/v2021.22.1/#new-device-inventory-view","text":"The new Device inventory is now the default for viewing devices in the Coiote IoT DM platform. It has an improved design as well as faster and more stable performance. The new Device inventory is available directly from the left navigation bar. If you need to access the old Device inventory view, go to Administration -> Device inventory .","title":"New Device inventory view"},{"location":"Release_Notes/v2021.22.1/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2021.22.1/#est-der-format-support","text":"We switched from the PEM to the DER content format of enrolling and re-enrolling requests sent to the EST server. Thanks to this change more EST Server implementations will be supported and compliance with RFC7030 is enhanced.","title":"EST DER format support"},{"location":"Release_Notes/v2021.22.1/#bug-fixes","text":"","title":"Bug fixes"},{"location":"Release_Notes/v2021.22.1/#larger-limits-for-http-request-headers","text":"Thanks to a new configuration for Jetty, you can now access REST API and Coiote IoT DM GUI even with large HTTP request headers.","title":"Larger limits for HTTP request headers"},{"location":"Release_Notes/v2021.22.1/#security","text":"Updated Grafana version to fix the CVE-2021-43798 vulnerability. Our security scan confirmed that Coiote IoT DM isn\u2019t affected by the Apache Log4j vulnerability.","title":"Security"},{"location":"Release_Notes/v2021.23.0/","text":"v2021.23.0 # Previous version: v2021.22.1 Enhancements # Record headers in Kafka messages # You can now add record headers to the kafkaPublish tag when configuring an XML task. It means that the components responsible for the Kafka event processing (e.g., routing) no longer need to read each binary message. Instead, these components read only the record headers and therefore work faster. Support for additional non-standard device type # We continue to improve compatibility with devices that have incomplete or faulty support of the standard LwM2M protocol. To make such a device ready to work with Coiote IoT DM, you can now turn on and configure a non-standard logic in the Device dialects section. New error pages # The 400, 404, and 5XX error pages now have a cleaner and more user-friendly look. Bug fixes # Uninterrupted access to GUI # Fixed a bug where the GUI of Coiote IoT DM would crash after 30 minutes of inactivity on some installations. Thanks to the new configuration, the GUI now works smoothly even after hours of inactivity. JDK downgrade # To improve the speed performance of Coiote IoT DM, we\u2019ve downgraded the JDK version from 17 to 11. No action is required for the virtual machine deployments because the JRE is included in the docker image.","title":"v2021.23.0"},{"location":"Release_Notes/v2021.23.0/#v2021230","text":"Previous version: v2021.22.1","title":"v2021.23.0"},{"location":"Release_Notes/v2021.23.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2021.23.0/#record-headers-in-kafka-messages","text":"You can now add record headers to the kafkaPublish tag when configuring an XML task. It means that the components responsible for the Kafka event processing (e.g., routing) no longer need to read each binary message. Instead, these components read only the record headers and therefore work faster.","title":"Record headers in Kafka messages"},{"location":"Release_Notes/v2021.23.0/#support-for-additional-non-standard-device-type","text":"We continue to improve compatibility with devices that have incomplete or faulty support of the standard LwM2M protocol. To make such a device ready to work with Coiote IoT DM, you can now turn on and configure a non-standard logic in the Device dialects section.","title":"Support for additional non-standard device type"},{"location":"Release_Notes/v2021.23.0/#new-error-pages","text":"The 400, 404, and 5XX error pages now have a cleaner and more user-friendly look.","title":"New error pages"},{"location":"Release_Notes/v2021.23.0/#bug-fixes","text":"","title":"Bug fixes"},{"location":"Release_Notes/v2021.23.0/#uninterrupted-access-to-gui","text":"Fixed a bug where the GUI of Coiote IoT DM would crash after 30 minutes of inactivity on some installations. Thanks to the new configuration, the GUI now works smoothly even after hours of inactivity.","title":"Uninterrupted access to GUI"},{"location":"Release_Notes/v2021.23.0/#jdk-downgrade","text":"To improve the speed performance of Coiote IoT DM, we\u2019ve downgraded the JDK version from 17 to 11. No action is required for the virtual machine deployments because the JRE is included in the docker image.","title":"JDK downgrade"},{"location":"Release_Notes/v2021.24.5/","text":"v2021.24.5 # Previous version: v2021.23.0 Features # Read Model Factory on EU Cloud installation # The data for the Dashboard and Device Inventory views is now provided by the Read Model Factory module deployed as a separate application to optimize resource consumption and data processing. What changes in the application: Both the Dashboard and Device Inventory views now display bootstrap and management device entities in a single line, with links to the Device Management Center for each device entity. In the Dashboard view, you can now search for alerts by device data - lifecycle status, domain, group, manufacturer, model name, firmware version. Bypassing light sessions by HealthChecker # We have added a possibility to create a list of device IDs in cdm.conf that will have normal sessions even when the light session threshold is reached. Enhancements # Whitelabelling and custom URLs in Identity and Access Management # When logging to Coiote IoT DM (cloud installations) using a custom tenant hostname, the user can now be redirected to a login page under the same custom tenant hostname. The change applies to the Coiote IoT DM login page , User Management view and the change password view.","title":"v2021.24.5"},{"location":"Release_Notes/v2021.24.5/#v2021245","text":"Previous version: v2021.23.0","title":"v2021.24.5"},{"location":"Release_Notes/v2021.24.5/#features","text":"","title":"Features"},{"location":"Release_Notes/v2021.24.5/#read-model-factory-on-eu-cloud-installation","text":"The data for the Dashboard and Device Inventory views is now provided by the Read Model Factory module deployed as a separate application to optimize resource consumption and data processing. What changes in the application: Both the Dashboard and Device Inventory views now display bootstrap and management device entities in a single line, with links to the Device Management Center for each device entity. In the Dashboard view, you can now search for alerts by device data - lifecycle status, domain, group, manufacturer, model name, firmware version.","title":"Read Model Factory on EU Cloud installation"},{"location":"Release_Notes/v2021.24.5/#bypassing-light-sessions-by-healthchecker","text":"We have added a possibility to create a list of device IDs in cdm.conf that will have normal sessions even when the light session threshold is reached.","title":"Bypassing light sessions by HealthChecker"},{"location":"Release_Notes/v2021.24.5/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2021.24.5/#whitelabelling-and-custom-urls-in-identity-and-access-management","text":"When logging to Coiote IoT DM (cloud installations) using a custom tenant hostname, the user can now be redirected to a login page under the same custom tenant hostname. The change applies to the Coiote IoT DM login page , User Management view and the change password view.","title":"Whitelabelling and custom URLs in Identity and Access Management"},{"location":"Release_Notes/v2022.13.5/","text":"v2022.13.5 # Previous version: v2022.12.4 Features # New Device Center # We have introduced the new Device Center for effective management of single devices. Designed to enable IoT developers build LwM2M applications quickly and intuitively, it features the following actionable views: Summary sidebar Use device actions (reboot, data model refresh, clear DTLS context, delete device) Quickly check connection status and parameters See basic device info Overview tab Display widgets related to device status and connectivity View Device location on the map and check location details Configuration tab Upload device image and change its Friendly name View and copy device connection parameters Data model tab Perform or schedule operations on device objects, object instances, and resources: Read Write Execute Set observations View the details of individual objects and resources Search the data model for device objects, object instances, and resources The Device Center replaces the old Device Management Center view (DMC) which is still supported - use the Go to previous version button and the Go to new Device Center link to switch between them.","title":"v2022.13.5"},{"location":"Release_Notes/v2022.13.5/#v2022135","text":"Previous version: v2022.12.4","title":"v2022.13.5"},{"location":"Release_Notes/v2022.13.5/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.13.5/#new-device-center","text":"We have introduced the new Device Center for effective management of single devices. Designed to enable IoT developers build LwM2M applications quickly and intuitively, it features the following actionable views: Summary sidebar Use device actions (reboot, data model refresh, clear DTLS context, delete device) Quickly check connection status and parameters See basic device info Overview tab Display widgets related to device status and connectivity View Device location on the map and check location details Configuration tab Upload device image and change its Friendly name View and copy device connection parameters Data model tab Perform or schedule operations on device objects, object instances, and resources: Read Write Execute Set observations View the details of individual objects and resources Search the data model for device objects, object instances, and resources The Device Center replaces the old Device Management Center view (DMC) which is still supported - use the Go to previous version button and the Go to new Device Center link to switch between them.","title":"New Device Center"},{"location":"Release_Notes/v2022.16.0/","text":"v2022.16.0 # Previous version: v2022.14.15 Enhancements # Minor GUI enhancements # We have fixed the behaviour of dialog windows for some platform views. We have improved the looks of empty states in some places of the GUI. The \u2018Additional costs\u2019 calculator in the Payment service panel has been modified so that it now includes base and additional costs. Validations have been added in the Set observation side navigation dialog of the Device Center . We have changed the date format presented in the GUI so that it conforms to the ISO standard. Float values presented in the data model are now rounded to at most two significant digits. Domain hierarchy support for DTLS/TLS certificates # The DTLS/TLS Certificates panel now displays only certificates from the current domain that the user is logged into. Bug Fixes # Fixed the Certificate Request message when connecting over TLS/TCP # We have fixed the Certificate Request message when the Server and Client try to connect over TLS/TCP. Connection errors for clients that use MBed TLS (including Anjay ) are now solved. Fixed the license invalidation # We have corrected the License invalidation action so that it is done only after a configurable retry backoff time limit. Added validation the Azure IoT Hub integration # We have added a validation for the Device ID in the Hyperscaler Integration Center . Now the Device ID should be a string up to 128 characters long consisting of alphanumeric characters plus the special characters: '-', '.', '_', ':'. The last character must be alphanumeric or dash. Fixed scheduling firmware upgrades when resource value is an empty string # We have fixed an error that prevented scheduling firmware upgrades on devices whose Firmware Update Protocol Support resource value was an empty string.","title":"v2022.16.0"},{"location":"Release_Notes/v2022.16.0/#v2022160","text":"Previous version: v2022.14.15","title":"v2022.16.0"},{"location":"Release_Notes/v2022.16.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.16.0/#minor-gui-enhancements","text":"We have fixed the behaviour of dialog windows for some platform views. We have improved the looks of empty states in some places of the GUI. The \u2018Additional costs\u2019 calculator in the Payment service panel has been modified so that it now includes base and additional costs. Validations have been added in the Set observation side navigation dialog of the Device Center . We have changed the date format presented in the GUI so that it conforms to the ISO standard. Float values presented in the data model are now rounded to at most two significant digits.","title":"Minor GUI enhancements"},{"location":"Release_Notes/v2022.16.0/#domain-hierarchy-support-for-dtlstls-certificates","text":"The DTLS/TLS Certificates panel now displays only certificates from the current domain that the user is logged into.","title":"Domain hierarchy support for DTLS/TLS certificates"},{"location":"Release_Notes/v2022.16.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.16.0/#fixed-the-certificate-request-message-when-connecting-over-tlstcp","text":"We have fixed the Certificate Request message when the Server and Client try to connect over TLS/TCP. Connection errors for clients that use MBed TLS (including Anjay ) are now solved.","title":"Fixed the Certificate Request message when connecting over TLS/TCP"},{"location":"Release_Notes/v2022.16.0/#fixed-the-license-invalidation","text":"We have corrected the License invalidation action so that it is done only after a configurable retry backoff time limit.","title":"Fixed the license invalidation"},{"location":"Release_Notes/v2022.16.0/#added-validation-the-azure-iot-hub-integration","text":"We have added a validation for the Device ID in the Hyperscaler Integration Center . Now the Device ID should be a string up to 128 characters long consisting of alphanumeric characters plus the special characters: '-', '.', '_', ':'. The last character must be alphanumeric or dash.","title":"Added validation the Azure IoT Hub integration"},{"location":"Release_Notes/v2022.16.0/#fixed-scheduling-firmware-upgrades-when-resource-value-is-an-empty-string","text":"We have fixed an error that prevented scheduling firmware upgrades on devices whose Firmware Update Protocol Support resource value was an empty string.","title":"Fixed scheduling firmware upgrades when resource value is an empty string"},{"location":"Release_Notes/v2022.17.0/","text":"v2022.17.0 # Previous version: v2022.16.0 Features # Configuring EST integration via Domain properties # We have introduced dynamic EST integration configuration via the domain properties. It is now possible for each client to set up its own EST server in the Domain management view. The configuration is inherited (analogously to the Kafka settings e.g.). To use the EST configuration property, the domainProperties.est permission is required. If there is no EST configuration on a given domain, then the system uses the value from Coiote IoT DM cdm.conf config file as a fallback, which ensures backward compatibility. Changes have also been made to the DTLS/TLS Certificates view. Now only certificates added in the given domain are presented to avoid cross-domain certificate visibility. Architectural Changes # There were no architectural changes in this release. Enhancements # Minor GUI improvements # In Device Inventory, the filter counter is now hidden when there is no filter applied. \u2018Impersonated by\u2019 column in User activity table of Historical analysis # We have added a new column to the User activity table that shows the UserID of the actual user (impersonator) who executed the recorded action from the account of the user being impersonated. Bug Fixes # Fixed Cancel all tests action in the Device tests tab of DMC # We have fixed the faulty behaviour of the Cancel all tests button used to stop the execution of tests inside the Device tests tab of the Device Management Center. Fixed loading data for multiresources with no instances in the data model # We have fixed an error occurring while loading a multiresource that has no instances in the data model. Now the multi-resource value is displayed in the same manner as a single resource without value. Fixed task execution status (report) not displayed after device domain change # When moving devices between domains, their task execution statuses (reports) are now updated accordingly.","title":"v2022.17.0"},{"location":"Release_Notes/v2022.17.0/#v2022170","text":"Previous version: v2022.16.0","title":"v2022.17.0"},{"location":"Release_Notes/v2022.17.0/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.17.0/#configuring-est-integration-via-domain-properties","text":"We have introduced dynamic EST integration configuration via the domain properties. It is now possible for each client to set up its own EST server in the Domain management view. The configuration is inherited (analogously to the Kafka settings e.g.). To use the EST configuration property, the domainProperties.est permission is required. If there is no EST configuration on a given domain, then the system uses the value from Coiote IoT DM cdm.conf config file as a fallback, which ensures backward compatibility. Changes have also been made to the DTLS/TLS Certificates view. Now only certificates added in the given domain are presented to avoid cross-domain certificate visibility.","title":"Configuring EST integration via Domain properties"},{"location":"Release_Notes/v2022.17.0/#architectural-changes","text":"There were no architectural changes in this release.","title":"Architectural Changes"},{"location":"Release_Notes/v2022.17.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.17.0/#minor-gui-improvements","text":"In Device Inventory, the filter counter is now hidden when there is no filter applied.","title":"Minor GUI improvements"},{"location":"Release_Notes/v2022.17.0/#impersonated-by-column-in-user-activity-table-of-historical-analysis","text":"We have added a new column to the User activity table that shows the UserID of the actual user (impersonator) who executed the recorded action from the account of the user being impersonated.","title":"\u2018Impersonated by\u2019 column in User activity table of Historical analysis"},{"location":"Release_Notes/v2022.17.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.17.0/#fixed-cancel-all-tests-action-in-the-device-tests-tab-of-dmc","text":"We have fixed the faulty behaviour of the Cancel all tests button used to stop the execution of tests inside the Device tests tab of the Device Management Center.","title":"Fixed Cancel all tests action in the Device tests tab of DMC"},{"location":"Release_Notes/v2022.17.0/#fixed-loading-data-for-multiresources-with-no-instances-in-the-data-model","text":"We have fixed an error occurring while loading a multiresource that has no instances in the data model. Now the multi-resource value is displayed in the same manner as a single resource without value.","title":"Fixed loading data for multiresources with no instances in the data model"},{"location":"Release_Notes/v2022.17.0/#fixed-task-execution-status-report-not-displayed-after-device-domain-change","text":"When moving devices between domains, their task execution statuses (reports) are now updated accordingly.","title":"Fixed task execution status (report) not displayed after device domain change"},{"location":"Release_Notes/v2022.18.3/","text":"v2022.18.3 # Previous version: v2022.17.0 Enhancements # FOTA panel redirection page in Device Center # We have added a new FOTA tab in the Device Center. It redirects users to the previous version of the Device Management Center to perform a device Firmware upgrade. The new FOTA view is currently under development. Improvements in Device inventory and Operations center # We have introduced some enhancements to the Device inventory and Operations center . Now it is the Device inventory that is the default page displayed upon logging in to the platform. The order in the navigation menu has also been changed. In the Operations center , the Alerts tab is now the default view that is displayed. The tables that list devices and alerts have new columns: Device inventory : Status , Bootstrap Operations center Alerts tab: Status , Alert status Operations center Device list tab: Status , Device alert status Sorting has been enabled in the newly added columns. Bug Fixes # Fixed Select template button behaviour in Task templates # In the Task template panel, the Select template button now appears correctly even for long template names. section for description of bug fixes. Fixed Device registration status action # We have fixed the behaviour of the Devices registration status action feature so that now the configured action is performed only for the domain it was set up in - no conflict of domains occurs. Fixed the Leave tag in XML tasks # We have fixed the behaviour of the leave tag in the XML tasks, so that the device now leaves all the defined subgroups and the task finishes successfully. Fixed loading page when migrating large numbers of devices between domains # We have fixed the GUI action of changing the domain for large numbers of devices via the Device inventory . Now the loading page doesn\u2019t freeze while handling bulk migrations. Fixed no response for 2nd Register Update in some devices # As a result of failure to persist updated device lifetime, the Server responded with the 4.04 error for the second Register Update in some devices. We have fixed it so that concurrent update handling in the Coiote IoT DM database is avoided.","title":"v2022.18.3"},{"location":"Release_Notes/v2022.18.3/#v2022183","text":"Previous version: v2022.17.0","title":"v2022.18.3"},{"location":"Release_Notes/v2022.18.3/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.18.3/#fota-panel-redirection-page-in-device-center","text":"We have added a new FOTA tab in the Device Center. It redirects users to the previous version of the Device Management Center to perform a device Firmware upgrade. The new FOTA view is currently under development.","title":"FOTA panel redirection page in Device Center"},{"location":"Release_Notes/v2022.18.3/#improvements-in-device-inventory-and-operations-center","text":"We have introduced some enhancements to the Device inventory and Operations center . Now it is the Device inventory that is the default page displayed upon logging in to the platform. The order in the navigation menu has also been changed. In the Operations center , the Alerts tab is now the default view that is displayed. The tables that list devices and alerts have new columns: Device inventory : Status , Bootstrap Operations center Alerts tab: Status , Alert status Operations center Device list tab: Status , Device alert status Sorting has been enabled in the newly added columns.","title":"Improvements in Device inventory and Operations center"},{"location":"Release_Notes/v2022.18.3/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.18.3/#fixed-select-template-button-behaviour-in-task-templates","text":"In the Task template panel, the Select template button now appears correctly even for long template names. section for description of bug fixes.","title":"Fixed Select template button behaviour in Task templates"},{"location":"Release_Notes/v2022.18.3/#fixed-device-registration-status-action","text":"We have fixed the behaviour of the Devices registration status action feature so that now the configured action is performed only for the domain it was set up in - no conflict of domains occurs.","title":"Fixed Device registration status action"},{"location":"Release_Notes/v2022.18.3/#fixed-the-leave-tag-in-xml-tasks","text":"We have fixed the behaviour of the leave tag in the XML tasks, so that the device now leaves all the defined subgroups and the task finishes successfully.","title":"Fixed the Leave tag in XML tasks"},{"location":"Release_Notes/v2022.18.3/#fixed-loading-page-when-migrating-large-numbers-of-devices-between-domains","text":"We have fixed the GUI action of changing the domain for large numbers of devices via the Device inventory . Now the loading page doesn\u2019t freeze while handling bulk migrations.","title":"Fixed loading page when migrating large numbers of devices between domains"},{"location":"Release_Notes/v2022.18.3/#fixed-no-response-for-2nd-register-update-in-some-devices","text":"As a result of failure to persist updated device lifetime, the Server responded with the 4.04 error for the second Register Update in some devices. We have fixed it so that concurrent update handling in the Coiote IoT DM database is avoided.","title":"Fixed no response for 2nd Register Update in some devices"},{"location":"Release_Notes/v2022.19.2/","text":"v2022.19.2 # Previous version: v2022.18.3 Enhancements # Connection status indicator in Device creator summary # We have introduced the connection status indicator to the summary step of the Device creator . It is now consistent with the Device Center summary \u2018Impersonated by\u2019 column in task edition history of Historical analysis # We have added the \u2018Impersonated by\u2019 column to theTask edition history table that shows the UserID of the actual user (impersonator) who executed the recorded action from the account of the user being impersonated. Architectural Changes # Device ID changes to Endpoint name # We have changed the Device ID label to Endpoint name in Device inventory, Device Center and other relevant views. This has been triggered by major changes in how the device endpoint name is now encrypted in the database. Bug Fixes # Fixed Devices registration status action causing domain change # Deleting Devices registration status action no longer causes devices to change domains. Fixed behavior of snackbars persisting between steps of the Device creator # Snackbars appearing In the \"Connect your device\u201d step of Device creator will now disappear when navigating to the next step. Fixed searching for task templates # We have fixed the search option available when selecting a task template. It now works correctly, also for old Expressions and for characters such as square brackets.","title":"v2022.19.2"},{"location":"Release_Notes/v2022.19.2/#v2022192","text":"Previous version: v2022.18.3","title":"v2022.19.2"},{"location":"Release_Notes/v2022.19.2/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.19.2/#connection-status-indicator-in-device-creator-summary","text":"We have introduced the connection status indicator to the summary step of the Device creator . It is now consistent with the Device Center summary","title":"Connection status indicator in Device creator summary"},{"location":"Release_Notes/v2022.19.2/#impersonated-by-column-in-task-edition-history-of-historical-analysis","text":"We have added the \u2018Impersonated by\u2019 column to theTask edition history table that shows the UserID of the actual user (impersonator) who executed the recorded action from the account of the user being impersonated.","title":"\u2018Impersonated by\u2019 column in task edition history of Historical analysis"},{"location":"Release_Notes/v2022.19.2/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2022.19.2/#device-id-changes-to-endpoint-name","text":"We have changed the Device ID label to Endpoint name in Device inventory, Device Center and other relevant views. This has been triggered by major changes in how the device endpoint name is now encrypted in the database.","title":"Device ID changes to Endpoint name"},{"location":"Release_Notes/v2022.19.2/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.19.2/#fixed-devices-registration-status-action-causing-domain-change","text":"Deleting Devices registration status action no longer causes devices to change domains.","title":"Fixed Devices registration status action causing domain change"},{"location":"Release_Notes/v2022.19.2/#fixed-behavior-of-snackbars-persisting-between-steps-of-the-device-creator","text":"Snackbars appearing In the \"Connect your device\u201d step of Device creator will now disappear when navigating to the next step.","title":"Fixed behavior of snackbars persisting between steps of the Device creator"},{"location":"Release_Notes/v2022.19.2/#fixed-searching-for-task-templates","text":"We have fixed the search option available when selecting a task template. It now works correctly, also for old Expressions and for characters such as square brackets.","title":"Fixed searching for task templates"},{"location":"Release_Notes/v2022.20.4/","text":"v2022.20.4 # Previous version: v2022.19.2 Features # Connect single device to Azure # We have added an option to connect single devices in Device inventory to the currently integrated Azure service. It is available in the context menu for each created device displayed in the Device inventory table. The operation can only be performed for a device with a configured LwM2M Management server and in the domain that the device belongs to. Saving filter state of the Device inventory in URL fragment # In Device inventory , we have introduced saving filter data as state in a URL fragment. This allows saving any filter data e.g. groups, domain, lifecycle status, and search text. When the user saves a filter or types in the search field, the URL fragment is updated. When copying and pasting the URL, the relevant data context will be applied in the filter. Architectural Changes # New monitoring endpoints in restAPI # We have implemented two device monitoring restAPI endpoints: /deviceMonitoring/data/{deviceId}/resourceUrl/{lwm2mUrl} - returns a series of monitoring data from the device's resource identified by its LwM2M URL that were reported between the timeRangeStart and timeRangeEnd . /deviceMonitoring/data/{deviceId}/alias/{alias} - returns a series of monitoring data from the device's resource identified by its alias that were reported between the timeRangeStart and timeRangeEnd . Enhancements # New methods added to lwM2M context in XML tasks # Added two methods to lwm2m context in XML tasks: dmPathToLwM2MPath - transforms a dmPath to a lwm2mPath (eg. Device.0.Manufacturer -> /3/0/0 ) getDataType gets the data type for a given path (eg. Device.0.Manufacturer -> string) If the specified dmPath is not known, because either: the model is invalid or the path itself is invalid, then the method will return null . Bug Fixes # Fixed adding devices to inaccessible group using <join> tag # We have changed the behavior of the XML task <join> tag so that it is no longer possible to create a group in the wrong domain using the tag. Fixed values of Connectivity widgets in Device Center Overview tab # We have fixed the Cell ID , APN , Radio signal strength and Network bearer Connectivity widgets in Device Center so that each displays the relevant values.","title":"v2022.20.4"},{"location":"Release_Notes/v2022.20.4/#v2022204","text":"Previous version: v2022.19.2","title":"v2022.20.4"},{"location":"Release_Notes/v2022.20.4/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.20.4/#connect-single-device-to-azure","text":"We have added an option to connect single devices in Device inventory to the currently integrated Azure service. It is available in the context menu for each created device displayed in the Device inventory table. The operation can only be performed for a device with a configured LwM2M Management server and in the domain that the device belongs to.","title":"Connect single device to Azure"},{"location":"Release_Notes/v2022.20.4/#saving-filter-state-of-the-device-inventory-in-url-fragment","text":"In Device inventory , we have introduced saving filter data as state in a URL fragment. This allows saving any filter data e.g. groups, domain, lifecycle status, and search text. When the user saves a filter or types in the search field, the URL fragment is updated. When copying and pasting the URL, the relevant data context will be applied in the filter.","title":"Saving filter state of the Device inventory in URL fragment"},{"location":"Release_Notes/v2022.20.4/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2022.20.4/#new-monitoring-endpoints-in-restapi","text":"We have implemented two device monitoring restAPI endpoints: /deviceMonitoring/data/{deviceId}/resourceUrl/{lwm2mUrl} - returns a series of monitoring data from the device's resource identified by its LwM2M URL that were reported between the timeRangeStart and timeRangeEnd . /deviceMonitoring/data/{deviceId}/alias/{alias} - returns a series of monitoring data from the device's resource identified by its alias that were reported between the timeRangeStart and timeRangeEnd .","title":"New monitoring endpoints in restAPI"},{"location":"Release_Notes/v2022.20.4/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.20.4/#new-methods-added-to-lwm2m-context-in-xml-tasks","text":"Added two methods to lwm2m context in XML tasks: dmPathToLwM2MPath - transforms a dmPath to a lwm2mPath (eg. Device.0.Manufacturer -> /3/0/0 ) getDataType gets the data type for a given path (eg. Device.0.Manufacturer -> string) If the specified dmPath is not known, because either: the model is invalid or the path itself is invalid, then the method will return null .","title":"New methods added to lwM2M context in XML tasks"},{"location":"Release_Notes/v2022.20.4/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.20.4/#fixed-adding-devices-to-inaccessible-group-using-join-tag","text":"We have changed the behavior of the XML task <join> tag so that it is no longer possible to create a group in the wrong domain using the tag.","title":"Fixed adding devices to inaccessible group using &lt;join&gt; tag"},{"location":"Release_Notes/v2022.20.4/#fixed-values-of-connectivity-widgets-in-device-center-overview-tab","text":"We have fixed the Cell ID , APN , Radio signal strength and Network bearer Connectivity widgets in Device Center so that each displays the relevant values.","title":"Fixed values of Connectivity widgets in Device Center Overview tab"},{"location":"Release_Notes/v2022.21.6/","text":"v2022.21.6 # Previous version: v2022.20.4 Features # New domain property group for configuring historical data storage period # In Domain management , we have introduced the possibility to define how long the device historical data should be stored. It can be configured using a property for a specific domain. The default maximum storage limit is 30 days. Bug Fixes # Fixed no EST logs generated for device when EST request is made # EST logs are now generated correctly for the device bootstrap entity. Fixed no possibility to delete \u201cbillable\u201d domain # We have restored the possibility to delete billing admin domains by superusers (under the standard condition that they don\u2019t contain any subdomains, users, and devices). Fixed failing Azure IoT Hub device export # We have fixed the issue with exporting devices to Azure IoT Hub via GUI and API by upgrading the Azure SDK libraries to the newest versions. We have also added possibility to re-initialize client connection to Azure on demand via the REST API using the new extensions/hyperscaler/restartClient method. Fixed Clear all button that disabled searching the same phrase in Device inventory # We have fixed the behaviour of the Device inventory search field. Now clicking the Clear all button after having searched a phrase, then trying to search the same phrase works as intended. Fixed API user not able retrieve test results if the test definition comes from parent domain # We have fixed the inability to retrieve test results by REST API users for tests defined in parent domains by aligning the API with the correct behaviour of the feature in GUI. Fixed inactive scroll for domain list in XML task creation view # We have fixed scrolling for the drop-down domain list used when creating an XML task.","title":"v2022.21.6"},{"location":"Release_Notes/v2022.21.6/#v2022216","text":"Previous version: v2022.20.4","title":"v2022.21.6"},{"location":"Release_Notes/v2022.21.6/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.21.6/#new-domain-property-group-for-configuring-historical-data-storage-period","text":"In Domain management , we have introduced the possibility to define how long the device historical data should be stored. It can be configured using a property for a specific domain. The default maximum storage limit is 30 days.","title":"New domain property group for configuring historical data storage period"},{"location":"Release_Notes/v2022.21.6/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.21.6/#fixed-no-est-logs-generated-for-device-when-est-request-is-made","text":"EST logs are now generated correctly for the device bootstrap entity.","title":"Fixed no EST logs generated for device when EST request is made"},{"location":"Release_Notes/v2022.21.6/#fixed-no-possibility-to-delete-billable-domain","text":"We have restored the possibility to delete billing admin domains by superusers (under the standard condition that they don\u2019t contain any subdomains, users, and devices).","title":"Fixed no possibility to delete \u201cbillable\u201d domain"},{"location":"Release_Notes/v2022.21.6/#fixed-failing-azure-iot-hub-device-export","text":"We have fixed the issue with exporting devices to Azure IoT Hub via GUI and API by upgrading the Azure SDK libraries to the newest versions. We have also added possibility to re-initialize client connection to Azure on demand via the REST API using the new extensions/hyperscaler/restartClient method.","title":"Fixed failing Azure IoT Hub device export"},{"location":"Release_Notes/v2022.21.6/#fixed-clear-all-button-that-disabled-searching-the-same-phrase-in-device-inventory","text":"We have fixed the behaviour of the Device inventory search field. Now clicking the Clear all button after having searched a phrase, then trying to search the same phrase works as intended.","title":"Fixed Clear all button that disabled searching the same phrase in Device inventory"},{"location":"Release_Notes/v2022.21.6/#fixed-api-user-not-able-retrieve-test-results-if-the-test-definition-comes-from-parent-domain","text":"We have fixed the inability to retrieve test results by REST API users for tests defined in parent domains by aligning the API with the correct behaviour of the feature in GUI.","title":"Fixed API user not able retrieve test results if the test definition comes from parent domain"},{"location":"Release_Notes/v2022.21.6/#fixed-inactive-scroll-for-domain-list-in-xml-task-creation-view","text":"We have fixed scrolling for the drop-down domain list used when creating an XML task.","title":"Fixed inactive scroll for domain list in XML task creation view"},{"location":"Release_Notes/v2022.22.0/","text":"v2022.22.0 # Previous version: v2022.21.6 Features # Added bulk device removal in Device inventory for non-superusers. # We have added bulk device removal (as a group action) in the Device inventory with a limit of 100 devices for non-superusers who have the ui.deviceInventory.deleteDevice role. New REST API endpoints for setting observations on device groups # We have created two new endpoints for setting observations on device groups. /observations/group/resourcePath/{groupId}/{path} creates or updates group observations for a given path. /observations/group/resourceUrl/{groupId}/{url} creates or updates group observations for a given LwM2M URL. Both endpoints have the createEnsureObserveIfNotExists attribute which determines if the ensureObserve task should be created in case it doesn\u2019t exist. Enhancements # Removed outdated Azure IoT integration extension # We have removed the outdated method of connecting the Azure IoT integration which was available as an extension in the Administration -> Extensions view. Removed Device settings XML panels from default configuration # We have removed the default XML panels in the Device settings tab of the old DMC: Access Control Connectivity Device Location Servers Also, the Device settings tab is no longer a default DMC menu tab. Added possibility to configure Execution logs storage for tasks and task templates # We have added a new option for tasks and task templates that allows selecting which type of execution logs should be stored, with three options: Store all - default behavior, all logs are generated and stored. Store failed - logs will be generated only if task execution fails. Store none - logs are not generated. Bug Fixes # Fixed inability to create an Azure template with custom LwM2M objects in non-root domain # LwM2M objects created by means of custom object definitions can be now included in Azure integration templates by users in non-root domains. Fixed static documentation not respecting multitenancy # We have fixed the behavior of static documentation (i.e. generated via files uploaded in the Resources panel ) so that it is only visible for users in relevant domains. Fixed different results of reading and writing executable resources # Writing to an executable resource caused the platform to report communication failure. We have aligned this behavior with the results of reading an executable resource, in which case a response with the correct 4.05 MethodNotAllowed error code is returned.","title":"v2022.22.0"},{"location":"Release_Notes/v2022.22.0/#v2022220","text":"Previous version: v2022.21.6","title":"v2022.22.0"},{"location":"Release_Notes/v2022.22.0/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.22.0/#added-bulk-device-removal-in-device-inventory-for-non-superusers","text":"We have added bulk device removal (as a group action) in the Device inventory with a limit of 100 devices for non-superusers who have the ui.deviceInventory.deleteDevice role.","title":"Added bulk device removal in Device inventory for non-superusers."},{"location":"Release_Notes/v2022.22.0/#new-rest-api-endpoints-for-setting-observations-on-device-groups","text":"We have created two new endpoints for setting observations on device groups. /observations/group/resourcePath/{groupId}/{path} creates or updates group observations for a given path. /observations/group/resourceUrl/{groupId}/{url} creates or updates group observations for a given LwM2M URL. Both endpoints have the createEnsureObserveIfNotExists attribute which determines if the ensureObserve task should be created in case it doesn\u2019t exist.","title":"New REST API endpoints for setting observations on device groups"},{"location":"Release_Notes/v2022.22.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.22.0/#removed-outdated-azure-iot-integration-extension","text":"We have removed the outdated method of connecting the Azure IoT integration which was available as an extension in the Administration -> Extensions view.","title":"Removed outdated Azure IoT integration extension"},{"location":"Release_Notes/v2022.22.0/#removed-device-settings-xml-panels-from-default-configuration","text":"We have removed the default XML panels in the Device settings tab of the old DMC: Access Control Connectivity Device Location Servers Also, the Device settings tab is no longer a default DMC menu tab.","title":"Removed Device settings XML panels from default configuration"},{"location":"Release_Notes/v2022.22.0/#added-possibility-to-configure-execution-logs-storage-for-tasks-and-task-templates","text":"We have added a new option for tasks and task templates that allows selecting which type of execution logs should be stored, with three options: Store all - default behavior, all logs are generated and stored. Store failed - logs will be generated only if task execution fails. Store none - logs are not generated.","title":"Added possibility to configure Execution logs storage for tasks and task templates"},{"location":"Release_Notes/v2022.22.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.22.0/#fixed-inability-to-create-an-azure-template-with-custom-lwm2m-objects-in-non-root-domain","text":"LwM2M objects created by means of custom object definitions can be now included in Azure integration templates by users in non-root domains.","title":"Fixed inability to create an Azure template with custom LwM2M objects in non-root domain"},{"location":"Release_Notes/v2022.22.0/#fixed-static-documentation-not-respecting-multitenancy","text":"We have fixed the behavior of static documentation (i.e. generated via files uploaded in the Resources panel ) so that it is only visible for users in relevant domains.","title":"Fixed static documentation not respecting multitenancy"},{"location":"Release_Notes/v2022.22.0/#fixed-different-results-of-reading-and-writing-executable-resources","text":"Writing to an executable resource caused the platform to report communication failure. We have aligned this behavior with the results of reading an executable resource, in which case a response with the correct 4.05 MethodNotAllowed error code is returned.","title":"Fixed different results of reading and writing executable resources"},{"location":"Release_Notes/v2022.23.11/","text":"v2022.23.11 # Previous version: v2022.22.0 Features # Visualizing data with widgets in the new Dashboard view # We have introduced a brand new Dashboard view for displaying widgets used for data visualization. Widgets are set and configured in the Data model tab of the Device Center , along with their corresponding Observations to enable data collection. The Dashboard data is displayed per domain and features the following kinds of charts based on the type of data collected: Line chart Boolean chart Gantt chart Punch card chart Architectural Changes # Renamed cdm.conf configuration file to devman.conf # We have renamed the cdm.conf configuration filename to devman.conf according to the established naming convention. Device ID compatibility translation in REST API v3 endpoints # We have completed the bidirectional compatibility translation between the old and new Device ID format for all the REST API v3 endpoints. In the new Device ID format, the Endpoint name is now hashed for better security. Enhancements # Improvements in displaying tooltips # We have fixed the behavior of the tooltips so that the displayed tooltip of one button doesn\u2019t prevent clicking on the neighboring element. We have also introduced small delays when showing and hiding tooltips upon hovering on an UI element. Consistent spacings between text fields # We have introduced consistent spacings between text fields in Operations Center and Device inventory . Bug Fixes # Fixed Azure IoT devices cannot be deleted # We have fixed a bug which prevented the user from deleting devices connected to an Azure IoT integration. Now, device deletion is instantaneous. Fixed hex key validation when adding a device with PSK mode # We have fixed the validation of keys typed in the hexadecimal format so that the warning message shows immediately after unclicking the key input. Domain verification when updating Management device entity in Bootstrap # We have added domain verification when updating the Management device entity inside the Bootstrap entity. Now, if the Management entity already exists it must be visible from the level of Bootstrap task domain, otherwise the task fails.","title":"v2022.23.11"},{"location":"Release_Notes/v2022.23.11/#v20222311","text":"Previous version: v2022.22.0","title":"v2022.23.11"},{"location":"Release_Notes/v2022.23.11/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.23.11/#visualizing-data-with-widgets-in-the-new-dashboard-view","text":"We have introduced a brand new Dashboard view for displaying widgets used for data visualization. Widgets are set and configured in the Data model tab of the Device Center , along with their corresponding Observations to enable data collection. The Dashboard data is displayed per domain and features the following kinds of charts based on the type of data collected: Line chart Boolean chart Gantt chart Punch card chart","title":"Visualizing data with widgets in the new Dashboard view"},{"location":"Release_Notes/v2022.23.11/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2022.23.11/#renamed-cdmconf-configuration-file-to-devmanconf","text":"We have renamed the cdm.conf configuration filename to devman.conf according to the established naming convention.","title":"Renamed cdm.conf configuration file to devman.conf"},{"location":"Release_Notes/v2022.23.11/#device-id-compatibility-translation-in-rest-api-v3-endpoints","text":"We have completed the bidirectional compatibility translation between the old and new Device ID format for all the REST API v3 endpoints. In the new Device ID format, the Endpoint name is now hashed for better security.","title":"Device ID compatibility translation in REST API v3 endpoints"},{"location":"Release_Notes/v2022.23.11/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.23.11/#improvements-in-displaying-tooltips","text":"We have fixed the behavior of the tooltips so that the displayed tooltip of one button doesn\u2019t prevent clicking on the neighboring element. We have also introduced small delays when showing and hiding tooltips upon hovering on an UI element.","title":"Improvements in displaying tooltips"},{"location":"Release_Notes/v2022.23.11/#consistent-spacings-between-text-fields","text":"We have introduced consistent spacings between text fields in Operations Center and Device inventory .","title":"Consistent spacings between text fields"},{"location":"Release_Notes/v2022.23.11/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.23.11/#fixed-azure-iot-devices-cannot-be-deleted","text":"We have fixed a bug which prevented the user from deleting devices connected to an Azure IoT integration. Now, device deletion is instantaneous.","title":"Fixed Azure IoT devices cannot be deleted"},{"location":"Release_Notes/v2022.23.11/#fixed-hex-key-validation-when-adding-a-device-with-psk-mode","text":"We have fixed the validation of keys typed in the hexadecimal format so that the warning message shows immediately after unclicking the key input.","title":"Fixed hex key validation when adding a device with PSK mode"},{"location":"Release_Notes/v2022.23.11/#domain-verification-when-updating-management-device-entity-in-bootstrap","text":"We have added domain verification when updating the Management device entity inside the Bootstrap entity. Now, if the Management entity already exists it must be visible from the level of Bootstrap task domain, otherwise the task fails.","title":"Domain verification when updating Management device entity in Bootstrap"},{"location":"Release_Notes/v2022.24.14/","text":"v2022.24.14 # Previous version: v2022.23.11 Enhancements # Introduce new Angular Material symbols # We have replaced the Angular Material theme icons with Material symbols, migrated the old symbol names to new ones, and replaced the custom SVG with Material symbols. Bug Fixes # Fixed FOTA in the \"only observations\" mode failing every second run # We have rewritten some of the conditions of the Firmware-over-the-air upgrade process so that it adheres more strictly to the LwM2M specification and thus minimized cases of FOTA failure. Fixed minor visual issues in the Data model tab of Device Center # We have fixed the Widget and Operations columns in the Device Center Data model tab so that the green \u2018success\u2019 icons are displayed properly. Also, we have made consistent the titles of the side navigation dialog displayed when performing LwM2M operations on the Data model . Documentation # Administrator Guide updates # We have updated the Administrator Guide so that it reflects the changes in relation to Coiote IoT DM services and installation. Other # We have fixed validation when adding a LwM2M object to a dialect We have added a mechanism for deleting collected device data when a device is deleted and for deleting domain widgets when a domain is deleted.","title":"v2022.24.14"},{"location":"Release_Notes/v2022.24.14/#v20222414","text":"Previous version: v2022.23.11","title":"v2022.24.14"},{"location":"Release_Notes/v2022.24.14/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.24.14/#introduce-new-angular-material-symbols","text":"We have replaced the Angular Material theme icons with Material symbols, migrated the old symbol names to new ones, and replaced the custom SVG with Material symbols.","title":"Introduce new Angular Material symbols"},{"location":"Release_Notes/v2022.24.14/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.24.14/#fixed-fota-in-the-only-observations-mode-failing-every-second-run","text":"We have rewritten some of the conditions of the Firmware-over-the-air upgrade process so that it adheres more strictly to the LwM2M specification and thus minimized cases of FOTA failure.","title":"Fixed FOTA in the \"only observations\" mode failing every second run"},{"location":"Release_Notes/v2022.24.14/#fixed-minor-visual-issues-in-the-data-model-tab-of-device-center","text":"We have fixed the Widget and Operations columns in the Device Center Data model tab so that the green \u2018success\u2019 icons are displayed properly. Also, we have made consistent the titles of the side navigation dialog displayed when performing LwM2M operations on the Data model .","title":"Fixed minor visual issues in the Data model tab of Device Center"},{"location":"Release_Notes/v2022.24.14/#documentation","text":"","title":"Documentation"},{"location":"Release_Notes/v2022.24.14/#administrator-guide-updates","text":"We have updated the Administrator Guide so that it reflects the changes in relation to Coiote IoT DM services and installation.","title":"Administrator Guide updates"},{"location":"Release_Notes/v2022.24.14/#other","text":"We have fixed validation when adding a LwM2M object to a dialect We have added a mechanism for deleting collected device data when a device is deleted and for deleting domain widgets when a domain is deleted.","title":"Other"},{"location":"Release_Notes/v2022.25.20/","text":"v2022.25.20 # Previous version: v2022.24.14 Architectural Changes # Deprecate the /devices/all/count REST API endpoint # We have deprecated the /devices/all/count REST API endpoint. The endpoint remains visible in the REST API and will be removed from the public documentation three months after deprecation. Enhancements # Date format in the Data model # We have changed the date format in the Data model to YYYY-MM-DD (dashes instead of slashes). Remove vulnerable dom4j 1.6.1 and xmlbeans 2.3.0 dependencies # We have resolved vulnerabilities that could have been potentially caused by the dom4j 1.6.1 and xmlbeans 2.3.0 dependencies used to support PDF-based reports in Monitoring & Reporting > Reports . Switch off old alert table for Device groups # We have removed the alert table with all its underlying code from the Group Management Center . Bug Fixes # Fixed incorrect Hide key (hex) text field behavior # We have fixed the behavior of the PSK key text field and the eye icon so that when the hex key is hidden, the displayed eye icon is closed (and remains open otherwise). Fixed the select action in task templates # We have fixed the behavior of the select checkbox in the Task templates view so that now every new selection clears the previous one. Fixed TaskReports API endpoints always returning empty value in translation mode # We have fixed the GET /taskReports and GET /taskReports/moreReports API endpoints so that both endpoints now return proper values of task reports. Fixed enforcing at least one observation parameter when setting and observation # We have removed the validation which enforced adding at least one parameter when setting an observation on a device data model. Now, all observation parameters are optional as per the OMA LwM2M specification . Also, the limit of Not more often than once every and At least once every has been lowered to 5 seconds. Fixed allowing for uploading non-image files as device images # We have added a validation when uploading a file for a device image which checks if the file is actually in an image format.","title":"v2022.25.20"},{"location":"Release_Notes/v2022.25.20/#v20222520","text":"Previous version: v2022.24.14","title":"v2022.25.20"},{"location":"Release_Notes/v2022.25.20/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2022.25.20/#deprecate-the-devicesallcount-rest-api-endpoint","text":"We have deprecated the /devices/all/count REST API endpoint. The endpoint remains visible in the REST API and will be removed from the public documentation three months after deprecation.","title":"Deprecate the /devices/all/count REST API endpoint"},{"location":"Release_Notes/v2022.25.20/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.25.20/#date-format-in-the-data-model","text":"We have changed the date format in the Data model to YYYY-MM-DD (dashes instead of slashes).","title":"Date format in the Data model"},{"location":"Release_Notes/v2022.25.20/#remove-vulnerable-dom4j-161-and-xmlbeans-230-dependencies","text":"We have resolved vulnerabilities that could have been potentially caused by the dom4j 1.6.1 and xmlbeans 2.3.0 dependencies used to support PDF-based reports in Monitoring & Reporting > Reports .","title":"Remove vulnerable dom4j 1.6.1 and xmlbeans 2.3.0 dependencies"},{"location":"Release_Notes/v2022.25.20/#switch-off-old-alert-table-for-device-groups","text":"We have removed the alert table with all its underlying code from the Group Management Center .","title":"Switch off old alert table for Device groups"},{"location":"Release_Notes/v2022.25.20/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.25.20/#fixed-incorrect-hide-key-hex-text-field-behavior","text":"We have fixed the behavior of the PSK key text field and the eye icon so that when the hex key is hidden, the displayed eye icon is closed (and remains open otherwise).","title":"Fixed incorrect Hide key (hex) text field behavior"},{"location":"Release_Notes/v2022.25.20/#fixed-the-select-action-in-task-templates","text":"We have fixed the behavior of the select checkbox in the Task templates view so that now every new selection clears the previous one.","title":"Fixed the select action in task templates"},{"location":"Release_Notes/v2022.25.20/#fixed-taskreports-api-endpoints-always-returning-empty-value-in-translation-mode","text":"We have fixed the GET /taskReports and GET /taskReports/moreReports API endpoints so that both endpoints now return proper values of task reports.","title":"Fixed TaskReports API endpoints always returning empty value in translation mode"},{"location":"Release_Notes/v2022.25.20/#fixed-enforcing-at-least-one-observation-parameter-when-setting-and-observation","text":"We have removed the validation which enforced adding at least one parameter when setting an observation on a device data model. Now, all observation parameters are optional as per the OMA LwM2M specification . Also, the limit of Not more often than once every and At least once every has been lowered to 5 seconds.","title":"Fixed enforcing at least one observation parameter when setting and observation"},{"location":"Release_Notes/v2022.25.20/#fixed-allowing-for-uploading-non-image-files-as-device-images","text":"We have added a validation when uploading a file for a device image which checks if the file is actually in an image format.","title":"Fixed allowing for uploading non-image files as device images"},{"location":"Release_Notes/v2022.26.0/","text":"v2022.26.0 # Previous version: v2022.25.20 Enhancements # Device registration status # We have added Never connected status for devices that have never connected to the server. Also, the Clear DTLS context and Refresh data model actions are now disabled for devices with such status. Save user selections in the Dashboard view # We have improved the Dashboard view so that the selected time range and sections expansion status in the Dashboard view does not reset upon each page reload. These settings are now locally stored in the user\u2019s browser. Add permissions to the Device Center # We have introduced a new set of user permissions for the Device Center . Users without appropriate permissions will only have read-only access to Device Center . Edit permissions can be defined for the following actions: using device actions, viewing the PSK key value, adding and deleting devices, configuring integrations. Bug Fixes # Fixed invalid 401 error after long-lasting operations # We have fixed the invalid 401 error , which occurred after longer operations in GUI, e.g. batch device migration actions lasting longer than five minutes. Fixed devices being moved to root domain after bootstrap # We have fixed devices being moved to the root domain instead of the designated one after successfully connecting via bootstrap. This occurred if both API translation mode and opaque device ID were enabled. Fixed unwarranted device full register (v2022.26.1) # We have fixed the issue with EU Cloud devices sending Register messages instead of the expected Register Updates . The root cause of the issue was incorrect internal load balancing. Introducing DTLS Connection ID support in future releases will further resolve this issue. Documentation # Swagger documentation for V3 API endpoints # We have created documentation for the V3 API endpoints in Swagger. Descriptions as well as examples have been provided for V3 API methods. User management documentation update # We have added sections in the User Guide explaining how to grant or revoke administrative access to the system for particular users.","title":"v2022.26.0"},{"location":"Release_Notes/v2022.26.0/#v2022260","text":"Previous version: v2022.25.20","title":"v2022.26.0"},{"location":"Release_Notes/v2022.26.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.26.0/#device-registration-status","text":"We have added Never connected status for devices that have never connected to the server. Also, the Clear DTLS context and Refresh data model actions are now disabled for devices with such status.","title":"Device registration status"},{"location":"Release_Notes/v2022.26.0/#save-user-selections-in-the-dashboard-view","text":"We have improved the Dashboard view so that the selected time range and sections expansion status in the Dashboard view does not reset upon each page reload. These settings are now locally stored in the user\u2019s browser.","title":"Save user selections in the Dashboard view"},{"location":"Release_Notes/v2022.26.0/#add-permissions-to-the-device-center","text":"We have introduced a new set of user permissions for the Device Center . Users without appropriate permissions will only have read-only access to Device Center . Edit permissions can be defined for the following actions: using device actions, viewing the PSK key value, adding and deleting devices, configuring integrations.","title":"Add permissions to the Device Center"},{"location":"Release_Notes/v2022.26.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.26.0/#fixed-invalid-401-error-after-long-lasting-operations","text":"We have fixed the invalid 401 error , which occurred after longer operations in GUI, e.g. batch device migration actions lasting longer than five minutes.","title":"Fixed invalid 401 error after long-lasting operations"},{"location":"Release_Notes/v2022.26.0/#fixed-devices-being-moved-to-root-domain-after-bootstrap","text":"We have fixed devices being moved to the root domain instead of the designated one after successfully connecting via bootstrap. This occurred if both API translation mode and opaque device ID were enabled.","title":"Fixed devices being moved to root domain after bootstrap"},{"location":"Release_Notes/v2022.26.0/#fixed-unwarranted-device-full-register-v2022261","text":"We have fixed the issue with EU Cloud devices sending Register messages instead of the expected Register Updates . The root cause of the issue was incorrect internal load balancing. Introducing DTLS Connection ID support in future releases will further resolve this issue.","title":"Fixed unwarranted device full register (v2022.26.1)"},{"location":"Release_Notes/v2022.26.0/#documentation","text":"","title":"Documentation"},{"location":"Release_Notes/v2022.26.0/#swagger-documentation-for-v3-api-endpoints","text":"We have created documentation for the V3 API endpoints in Swagger. Descriptions as well as examples have been provided for V3 API methods.","title":"Swagger documentation for V3 API endpoints"},{"location":"Release_Notes/v2022.26.0/#user-management-documentation-update","text":"We have added sections in the User Guide explaining how to grant or revoke administrative access to the system for particular users.","title":"User management documentation update"},{"location":"Release_Notes/v2022.27.0/","text":"v2022.27.0 # Previous version: v2022.26.0 Enhancements # Adjust width of the PSK fields in the configuration tab # We have adjusted the width of the PSK key fields in the Configuration tab of the Device Center to accommodate longer keys in the hex format and display them properly. Differentiate error codes in GET taskReports API method # We have introduced differentiating error codes for the GET /taskReports/{taskId}/{deviceId} task report API so that responses for unfound tasks (4040) and not executed tasks (4041) are now different. Bug Fixes # Fixed no translation for key Software Management # We have fixed the translation for the /9/ Software Management object key by updating the key Software Management with LWM2M Software Management in the default platform dialect. Fixed incorrectly updated textual chart data in Dashboard # We have fixed the behavior of the textual (Gantt) chart in the Dashboard widgets so that it is correctly updated after both automatic and manual data refresh. Fixed notifications in JSON generate errors # We have fixed the mechanism of parsing notifications sent by the device when notifications in the JSON format are set. Fixed Incorrect DTLS/TLS Identity for PSK bootstrap profile # We have fixed DTLS/TLS identity generation during bootstrap so that it is equal to the endpoint name. Previously, some domain configurations resulted in unwarranted inclusion of deviceID as a prefix. Fixed observations with no attributes not recognized as set up in the data model # We have fixed the behavior of observations set without any attributes so that they are now correctly displayed in the Device Center . Also, the Send notifications section when setting observations is now enabled by default.","title":"v2022.27.0"},{"location":"Release_Notes/v2022.27.0/#v2022270","text":"Previous version: v2022.26.0","title":"v2022.27.0"},{"location":"Release_Notes/v2022.27.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.27.0/#adjust-width-of-the-psk-fields-in-the-configuration-tab","text":"We have adjusted the width of the PSK key fields in the Configuration tab of the Device Center to accommodate longer keys in the hex format and display them properly.","title":"Adjust width of the PSK fields in the configuration tab"},{"location":"Release_Notes/v2022.27.0/#differentiate-error-codes-in-get-taskreports-api-method","text":"We have introduced differentiating error codes for the GET /taskReports/{taskId}/{deviceId} task report API so that responses for unfound tasks (4040) and not executed tasks (4041) are now different.","title":"Differentiate error codes in GET taskReports API method"},{"location":"Release_Notes/v2022.27.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.27.0/#fixed-no-translation-for-key-software-management","text":"We have fixed the translation for the /9/ Software Management object key by updating the key Software Management with LWM2M Software Management in the default platform dialect.","title":"Fixed no translation for key Software Management"},{"location":"Release_Notes/v2022.27.0/#fixed-incorrectly-updated-textual-chart-data-in-dashboard","text":"We have fixed the behavior of the textual (Gantt) chart in the Dashboard widgets so that it is correctly updated after both automatic and manual data refresh.","title":"Fixed incorrectly updated textual chart data in Dashboard"},{"location":"Release_Notes/v2022.27.0/#fixed-notifications-in-json-generate-errors","text":"We have fixed the mechanism of parsing notifications sent by the device when notifications in the JSON format are set.","title":"Fixed notifications in JSON generate errors"},{"location":"Release_Notes/v2022.27.0/#fixed-incorrect-dtlstls-identity-for-psk-bootstrap-profile","text":"We have fixed DTLS/TLS identity generation during bootstrap so that it is equal to the endpoint name. Previously, some domain configurations resulted in unwarranted inclusion of deviceID as a prefix.","title":"Fixed Incorrect DTLS/TLS Identity for PSK bootstrap profile"},{"location":"Release_Notes/v2022.27.0/#fixed-observations-with-no-attributes-not-recognized-as-set-up-in-the-data-model","text":"We have fixed the behavior of observations set without any attributes so that they are now correctly displayed in the Device Center . Also, the Send notifications section when setting observations is now enabled by default.","title":"Fixed observations with no attributes not recognized as set up in the data model"},{"location":"Release_Notes/v2022.3.2/","text":"v2022.3.2 # Previous version: v2021.24.5 Enhancements # New design and search engine for User Guide # We have introduced a new design that changes the look and feel of the Coiote IoT DM User Guide by switching from the Sphinx tool to the MkDocs documentation generator. Thanks to this, the search engine is improved to bring more accuracy to your search results. Also, navigating document sections is now easier with the new clickable table of contents on the right-hand side. Improved logic and added search in device variables management # We have improved the logic of the device variables management in DMC - a view that is used as part of the Protocol tests functionality. Also, we have added a possibility to search by name and value for both single and group variables. Bug Fixes # Fixes in Hyperscaler Integration Center view # We have introduced a few changes to improve the UX and performance of HIC: The state of the devices list tab is now reloading when changing the domain. Adding/editing/deleting integration configurations is now performed while still inside the dialog window for each action. A 1000-character validator has been added to all fields in the integration configuration It's now possible to copy and preview inherited templates when the user is in a domain lower than that in which a given template was created. Fixed stepper component # We have adapted the stepper component so that its appearance is in line with the design system guidelines for Coiote IoT DM.","title":"v2022.3.2"},{"location":"Release_Notes/v2022.3.2/#v202232","text":"Previous version: v2021.24.5","title":"v2022.3.2"},{"location":"Release_Notes/v2022.3.2/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.3.2/#new-design-and-search-engine-for-user-guide","text":"We have introduced a new design that changes the look and feel of the Coiote IoT DM User Guide by switching from the Sphinx tool to the MkDocs documentation generator. Thanks to this, the search engine is improved to bring more accuracy to your search results. Also, navigating document sections is now easier with the new clickable table of contents on the right-hand side.","title":"New design and search engine for User Guide"},{"location":"Release_Notes/v2022.3.2/#improved-logic-and-added-search-in-device-variables-management","text":"We have improved the logic of the device variables management in DMC - a view that is used as part of the Protocol tests functionality. Also, we have added a possibility to search by name and value for both single and group variables.","title":"Improved logic and added search in device variables management"},{"location":"Release_Notes/v2022.3.2/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.3.2/#fixes-in-hyperscaler-integration-center-view","text":"We have introduced a few changes to improve the UX and performance of HIC: The state of the devices list tab is now reloading when changing the domain. Adding/editing/deleting integration configurations is now performed while still inside the dialog window for each action. A 1000-character validator has been added to all fields in the integration configuration It's now possible to copy and preview inherited templates when the user is in a domain lower than that in which a given template was created.","title":"Fixes in Hyperscaler Integration Center view"},{"location":"Release_Notes/v2022.3.2/#fixed-stepper-component","text":"We have adapted the stepper component so that its appearance is in line with the design system guidelines for Coiote IoT DM.","title":"Fixed stepper component"},{"location":"Release_Notes/v2022.5.3/","text":"v2022.5.3 # Previous version: v2022.3.2 Features # LwM2M CBOR support # Coiote IoT DM now supports LwM2M CBOR, a new encoding format that was introduced in the Lightweight M2M 1.2 specification . It allows to significantly reduce the payload size of the Composite operations (Composite Read, Composite Write, Composite Observe). Kafka producer # Kafka is a new property category in the Domain properties view. By setting the properties, you create a Kafka producer that enables you to forward data from devices to your Kafka broker. Enhancements # New design of the Device test repository # We\u2019ve introduced a new look and a few changes to improve the UX of the Device tests repository: The Add test button now has two options. You can add a test manually or import tests from a .conf file. Better UI of the search, filter, delete, and mass delete actions. The Preview test option is now available from the context menu. Bug Fixes # HTTP status code 400 # Fixed a bug where REST API returned the HTTP status code 500 instead of 400. Now the correct 400 status code is returned in cases when, for example, a DTLS identity is already taken, when PSK contains an odd number of characters, or for the PUT/devices request.","title":"v2022.5.3"},{"location":"Release_Notes/v2022.5.3/#v202253","text":"Previous version: v2022.3.2","title":"v2022.5.3"},{"location":"Release_Notes/v2022.5.3/#features","text":"","title":"Features"},{"location":"Release_Notes/v2022.5.3/#lwm2m-cbor-support","text":"Coiote IoT DM now supports LwM2M CBOR, a new encoding format that was introduced in the Lightweight M2M 1.2 specification . It allows to significantly reduce the payload size of the Composite operations (Composite Read, Composite Write, Composite Observe).","title":"LwM2M CBOR support"},{"location":"Release_Notes/v2022.5.3/#kafka-producer","text":"Kafka is a new property category in the Domain properties view. By setting the properties, you create a Kafka producer that enables you to forward data from devices to your Kafka broker.","title":"Kafka producer"},{"location":"Release_Notes/v2022.5.3/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.5.3/#new-design-of-the-device-test-repository","text":"We\u2019ve introduced a new look and a few changes to improve the UX of the Device tests repository: The Add test button now has two options. You can add a test manually or import tests from a .conf file. Better UI of the search, filter, delete, and mass delete actions. The Preview test option is now available from the context menu.","title":"New design of the Device test repository"},{"location":"Release_Notes/v2022.5.3/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2022.5.3/#http-status-code-400","text":"Fixed a bug where REST API returned the HTTP status code 500 instead of 400. Now the correct 400 status code is returned in cases when, for example, a DTLS identity is already taken, when PSK contains an odd number of characters, or for the PUT/devices request.","title":"HTTP status code 400"},{"location":"Release_Notes/v2022.7.3/","text":"v2022.7.3 # Previous version: v2022.5.3 Enhancements # More formats in the XML Tasks # We\u2019ve added a new option in the readResource XML Task. You can now specify the format in which the file content should be read. The available formats are UTF-8 (default) and binary (reads data into a hex string). Furthermore, the REST tag now has the outBinary subtag. This means the payload of HTTP responses can be not only in JSON but also binary. New features in the Device test repository # SEND messages # You can now record and expect SEND messages when running your device tests. Previously, the record and expectation functionalities were only available for the Notify operations. To run the Start Send recording and Expect Send tasks, go to Device test repository > Server simulator . Click Add test > Add test manually and then select the relevant task from the Action list drop-down menu. In addition, the Send option was added to the Wait for uplink request task. Creation and modification dates # The Created and Last modified columns have been added to the Device test repository view . If no creation and modification dates are found, then the time of the migration to the new version of Coiote IoT DM is set. Download device tests # You can download a single test or multiple tests as a .conf file. To do so, select the necessary tests from the list and click Download test from the context menu. Bug fixes # Fixed a bug where uploading large CSV files failed if it took longer than one minute. Fixed a bug where Coiote IoT DM sometimes didn\u2019t reply to Register Update.","title":"v2022.7.3"},{"location":"Release_Notes/v2022.7.3/#v202273","text":"Previous version: v2022.5.3","title":"v2022.7.3"},{"location":"Release_Notes/v2022.7.3/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.7.3/#more-formats-in-the-xml-tasks","text":"We\u2019ve added a new option in the readResource XML Task. You can now specify the format in which the file content should be read. The available formats are UTF-8 (default) and binary (reads data into a hex string). Furthermore, the REST tag now has the outBinary subtag. This means the payload of HTTP responses can be not only in JSON but also binary.","title":"More formats in the XML Tasks"},{"location":"Release_Notes/v2022.7.3/#new-features-in-the-device-test-repository","text":"","title":"New features in the Device test repository"},{"location":"Release_Notes/v2022.7.3/#send-messages","text":"You can now record and expect SEND messages when running your device tests. Previously, the record and expectation functionalities were only available for the Notify operations. To run the Start Send recording and Expect Send tasks, go to Device test repository > Server simulator . Click Add test > Add test manually and then select the relevant task from the Action list drop-down menu. In addition, the Send option was added to the Wait for uplink request task.","title":"SEND messages"},{"location":"Release_Notes/v2022.7.3/#creation-and-modification-dates","text":"The Created and Last modified columns have been added to the Device test repository view . If no creation and modification dates are found, then the time of the migration to the new version of Coiote IoT DM is set.","title":"Creation and modification dates"},{"location":"Release_Notes/v2022.7.3/#download-device-tests","text":"You can download a single test or multiple tests as a .conf file. To do so, select the necessary tests from the list and click Download test from the context menu.","title":"Download device tests"},{"location":"Release_Notes/v2022.7.3/#bug-fixes","text":"Fixed a bug where uploading large CSV files failed if it took longer than one minute. Fixed a bug where Coiote IoT DM sometimes didn\u2019t reply to Register Update.","title":"Bug fixes"},{"location":"Release_Notes/v2022.8.2/","text":"v2022.8.2 # Previous version: v2022.7.3 Enhancements # UDP connector in standalone mode or disabled # We have removed the option of embedding the UDP connector within the Coiote IoT DM main system process. The UDP connector can be now either disabled or work in standalone mode. When disabling, there is no need for building a new package - setting a single config property in cdm.conf is enough: udpConnector.mode = Disabled # Disabled or Enabled Simplified setup of AWS integration # We have simplified the setup of the AWS integration. Now building and updating new lambdas is automated using one configuration template with all the required lambdas and dependencies. The updated integration guide can be found here . Modification and creation dates in Device test repository # We have added modification and creation dates as new columns in the Device test repository. Updating user properties via API PATCH method # We have added a new PATCH method to the Users API. This allows for updating the following user properties via API: emailVerified , userEnabled , domain , password , roles , permissions , tosAccepted .","title":"v2022.8.2"},{"location":"Release_Notes/v2022.8.2/#v202282","text":"Previous version: v2022.7.3","title":"v2022.8.2"},{"location":"Release_Notes/v2022.8.2/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.8.2/#udp-connector-in-standalone-mode-or-disabled","text":"We have removed the option of embedding the UDP connector within the Coiote IoT DM main system process. The UDP connector can be now either disabled or work in standalone mode. When disabling, there is no need for building a new package - setting a single config property in cdm.conf is enough: udpConnector.mode = Disabled # Disabled or Enabled","title":"UDP connector in standalone mode or disabled"},{"location":"Release_Notes/v2022.8.2/#simplified-setup-of-aws-integration","text":"We have simplified the setup of the AWS integration. Now building and updating new lambdas is automated using one configuration template with all the required lambdas and dependencies. The updated integration guide can be found here .","title":"Simplified setup of AWS integration"},{"location":"Release_Notes/v2022.8.2/#modification-and-creation-dates-in-device-test-repository","text":"We have added modification and creation dates as new columns in the Device test repository.","title":"Modification and creation dates in Device test repository"},{"location":"Release_Notes/v2022.8.2/#updating-user-properties-via-api-patch-method","text":"We have added a new PATCH method to the Users API. This allows for updating the following user properties via API: emailVerified , userEnabled , domain , password , roles , permissions , tosAccepted .","title":"Updating user properties via API PATCH method"},{"location":"Release_Notes/v2022.9.2/","text":"v2022.9.2 # Previous version: v2022.8.2 Enhancements # Edit device tests # You can now go to edit a test directly from the Device test repository . Select the necessary test from the list and click Edit test from the context menu. Please note that not all device tests are editable.","title":"v2022.9.2"},{"location":"Release_Notes/v2022.9.2/#v202292","text":"Previous version: v2022.8.2","title":"v2022.9.2"},{"location":"Release_Notes/v2022.9.2/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2022.9.2/#edit-device-tests","text":"You can now go to edit a test directly from the Device test repository . Select the necessary test from the list and click Edit test from the context menu. Please note that not all device tests are editable.","title":"Edit device tests"},{"location":"Release_Notes/v2023.10.0/","text":"v2023.10.0 # Previous version: v2023.9.0 Enhancements # Hide change password functionality for SSO users # We have removed an unintended functionality. Single sign-on users no longer have access to changing their password through the platform interface. Bug Fixes # Fix Device Inventory pagination issues # We have fixed issues with pagination in the Device Inventory , which occurred after returning to that view from Device Center . Bootstrap devices are now properly filtered and the interface shows accurate information. Fix DTLS session resumption # We have fixed an issue with DTLS session resumption failing after NAT expiration, even if replication was enabled. Fix REST API user permissions # We have fixed inconsistent user permissions, so that it is no longer possible for certain users to delete other users outside the scope of their domain via REST API.","title":"v2023.10.0"},{"location":"Release_Notes/v2023.10.0/#v2023100","text":"Previous version: v2023.9.0","title":"v2023.10.0"},{"location":"Release_Notes/v2023.10.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.10.0/#hide-change-password-functionality-for-sso-users","text":"We have removed an unintended functionality. Single sign-on users no longer have access to changing their password through the platform interface.","title":"Hide change password functionality for SSO users"},{"location":"Release_Notes/v2023.10.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.10.0/#fix-device-inventory-pagination-issues","text":"We have fixed issues with pagination in the Device Inventory , which occurred after returning to that view from Device Center . Bootstrap devices are now properly filtered and the interface shows accurate information.","title":"Fix Device Inventory pagination issues"},{"location":"Release_Notes/v2023.10.0/#fix-dtls-session-resumption","text":"We have fixed an issue with DTLS session resumption failing after NAT expiration, even if replication was enabled.","title":"Fix DTLS session resumption"},{"location":"Release_Notes/v2023.10.0/#fix-rest-api-user-permissions","text":"We have fixed inconsistent user permissions, so that it is no longer possible for certain users to delete other users outside the scope of their domain via REST API.","title":"Fix REST API user permissions"},{"location":"Release_Notes/v2023.3.0/","text":"v2023.3.0 # Previous version: v2022.27.0 Architectural Changes # Device ID compatibility translation in Device CSV import and export # We have added the possibility to identify devices through methods other than providing device.id in the imported CSV file. If device.id is not available in the CSV file, it is now composed from other data ( namespace/domain , endpointName , connectorType ). New devices cannot have a device.id provided during import and it is optional for Existing devices and New and existing devices import modes. This ensures full opaque device.id configuration. Enhancements # Improve table filtering # We have improved the table filters throughout the platform. We have removed legacy table filters. State of the columns is now saved in local storage and does not revert to default upon page refresh. Bug Fixes # Fix Schedule a report function in Advanced CSV exports # We have fixed an error which occurred when trying to use Schedule a report function in the Advanced CSV export . Fix expressions issues in Advanced CSV exports # We have fixed the device CSV export not working. We added bootstrap fields to the Simple tab and fixed export fields for DTLS. Exporting CSV files with the use of expressions also works again.","title":"v2023.3.0"},{"location":"Release_Notes/v2023.3.0/#v202330","text":"Previous version: v2022.27.0","title":"v2023.3.0"},{"location":"Release_Notes/v2023.3.0/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2023.3.0/#device-id-compatibility-translation-in-device-csv-import-and-export","text":"We have added the possibility to identify devices through methods other than providing device.id in the imported CSV file. If device.id is not available in the CSV file, it is now composed from other data ( namespace/domain , endpointName , connectorType ). New devices cannot have a device.id provided during import and it is optional for Existing devices and New and existing devices import modes. This ensures full opaque device.id configuration.","title":"Device ID compatibility translation in Device CSV import and export"},{"location":"Release_Notes/v2023.3.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.3.0/#improve-table-filtering","text":"We have improved the table filters throughout the platform. We have removed legacy table filters. State of the columns is now saved in local storage and does not revert to default upon page refresh.","title":"Improve table filtering"},{"location":"Release_Notes/v2023.3.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.3.0/#fix-schedule-a-report-function-in-advanced-csv-exports","text":"We have fixed an error which occurred when trying to use Schedule a report function in the Advanced CSV export .","title":"Fix Schedule a report function in Advanced CSV exports"},{"location":"Release_Notes/v2023.3.0/#fix-expressions-issues-in-advanced-csv-exports","text":"We have fixed the device CSV export not working. We added bootstrap fields to the Simple tab and fixed export fields for DTLS. Exporting CSV files with the use of expressions also works again.","title":"Fix expressions issues in Advanced CSV exports"},{"location":"Release_Notes/v2023.4.0/","text":"v2023.4.0 # Previous version: v2023.3.0 Architectural Changes # Enable DTLSConnection ID load balancing # We have enabled DTLS session replication and DTLS Connection ID load balancing on EU-cloud. Enhancements # Remove legacy Nordic Assistance task support # We have previously added support for the new Nordic Location Assistance and have kept backward compatibility with older tasks. However, support for the legacy Nordic Assistance task is no longer available. Add LwM2M specification names in tooltips # We have added tooltips which show how parameters refer to the names used in the OMA LwM2M specification. Tooltips are now available e.g. in the Set observation panel. Add examples to REST API v3 documentation # We have added examples and comments to all methods that were missing ones in the REST API v3 Swagger documentation. Remove range limits for observations # We have removed range limits for the Not more often than once every and At least once every parameters for sending notifications. The default value for both parameters now is 5 seconds. Add new cipher suites # We have added the following cipher suites to eu.iot.avsystem.cloud: TLS_ECDHE_ECDSA_WITH_AES_128_CCM TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_CCM TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 Bug Fixes # Fix unwarranted device impersonation # We have removed the possibility of impersonating other devices in separate domains. Now by default all devices that use certificates must have Common Name set to Endpoint Name in their certificates or use some custom logic (scex). In case a device does not use such a certificate (with CN=EP), but the user still wants to connect the device with a certificate, it is possible, but the Setting Value verifyEpAgainstCertCn on the device has to be set to false. Additionally, in case of incorrect Endpoint Name used when connecting to the platform using PSK we were responding with 4.03. Currently the response has been changed to 4.00 Fix FOTA failing over Azure # We have fixed Azure\u2019s DirectMethodPayload type being incorrectly parsed when doing FOTA. This type of Azure request no longer results in an error.","title":"v2023.4.0"},{"location":"Release_Notes/v2023.4.0/#v202340","text":"Previous version: v2023.3.0","title":"v2023.4.0"},{"location":"Release_Notes/v2023.4.0/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2023.4.0/#enable-dtlsconnection-id-load-balancing","text":"We have enabled DTLS session replication and DTLS Connection ID load balancing on EU-cloud.","title":"Enable DTLSConnection ID load balancing"},{"location":"Release_Notes/v2023.4.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.4.0/#remove-legacy-nordic-assistance-task-support","text":"We have previously added support for the new Nordic Location Assistance and have kept backward compatibility with older tasks. However, support for the legacy Nordic Assistance task is no longer available.","title":"Remove legacy Nordic Assistance task support"},{"location":"Release_Notes/v2023.4.0/#add-lwm2m-specification-names-in-tooltips","text":"We have added tooltips which show how parameters refer to the names used in the OMA LwM2M specification. Tooltips are now available e.g. in the Set observation panel.","title":"Add LwM2M specification names in tooltips"},{"location":"Release_Notes/v2023.4.0/#add-examples-to-rest-api-v3-documentation","text":"We have added examples and comments to all methods that were missing ones in the REST API v3 Swagger documentation.","title":"Add examples to REST API v3 documentation"},{"location":"Release_Notes/v2023.4.0/#remove-range-limits-for-observations","text":"We have removed range limits for the Not more often than once every and At least once every parameters for sending notifications. The default value for both parameters now is 5 seconds.","title":"Remove range limits for observations"},{"location":"Release_Notes/v2023.4.0/#add-new-cipher-suites","text":"We have added the following cipher suites to eu.iot.avsystem.cloud: TLS_ECDHE_ECDSA_WITH_AES_128_CCM TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_CCM TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","title":"Add new cipher suites"},{"location":"Release_Notes/v2023.4.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.4.0/#fix-unwarranted-device-impersonation","text":"We have removed the possibility of impersonating other devices in separate domains. Now by default all devices that use certificates must have Common Name set to Endpoint Name in their certificates or use some custom logic (scex). In case a device does not use such a certificate (with CN=EP), but the user still wants to connect the device with a certificate, it is possible, but the Setting Value verifyEpAgainstCertCn on the device has to be set to false. Additionally, in case of incorrect Endpoint Name used when connecting to the platform using PSK we were responding with 4.03. Currently the response has been changed to 4.00","title":"Fix unwarranted device impersonation"},{"location":"Release_Notes/v2023.4.0/#fix-fota-failing-over-azure","text":"We have fixed Azure\u2019s DirectMethodPayload type being incorrectly parsed when doing FOTA. This type of Azure request no longer results in an error.","title":"Fix FOTA failing over Azure"},{"location":"Release_Notes/v2023.5.0/","text":"v2023.5.0 # Previous version: v2023.4.0 Enhancements # Display API version in the user interface # We have added the API version display in the user interface. It is visible in the dropdown menu: Show documentation links icon -> Specification . Improve domain properties tab # We have introduced changes and fixes to the domain properties tab. It is now scrollable, the expansion panels are properly aligned and the cancel action has a new icon. Fix tooltips not being displayed # We have fixed tooltips not being displayed for disabled field forms, e.g. in the Set observation panel. Change default CSV import configuration # We have introduced a minor change to default expressions used for importing devices from a CSV file, so that the import relies on the endpoint name rather than device identifier. Fix wrong CSV import error messages # We have corrected an error message, which could occur during CSV import for devices without a specified connector type. The Identity has to be provided error was returned instead of ConnectorType field is mandatory. Add support for LwM2M CBOR and SenML JSON # We have added LwM2M CBOR and SenML JSON formats support for receiving LwM2M Send operations. Bug Fixes # Fix unwarranted HTML rendering in chart tooltips # We have introduced a fix, so that device names and resource values that are valid HTML tags are not rendered as HTML in the tooltips on Dashboards . Fix groups appearing outside the standard structure # We have fixed redundant groups appearing outside of the standard structure in the Device groups view. This was due to incomplete removal of domains from the database. Fix multi-instance monitoring fail # We have fixed an error which occurred while setting up monitoring for a multi-instance resource. Fix lwm2mBestEffortGet tag error # We have fixed the use of the lwm2mBestEffortGet tag in an XML task returning an error message despite successfully retrieving data from the device. Fix hanging on the handshake # We have fixed a bug where DTLS identity was removed from the PSK store during bootstrap, which prevented the devices from being able to register. Documentation # Administrator documentation update # We have added various sections on Alerts in the Administration documentation, under the Monitoring, logs and alerts chapter.","title":"v2023.5.0"},{"location":"Release_Notes/v2023.5.0/#v202350","text":"Previous version: v2023.4.0","title":"v2023.5.0"},{"location":"Release_Notes/v2023.5.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.5.0/#display-api-version-in-the-user-interface","text":"We have added the API version display in the user interface. It is visible in the dropdown menu: Show documentation links icon -> Specification .","title":"Display API version in the user interface"},{"location":"Release_Notes/v2023.5.0/#improve-domain-properties-tab","text":"We have introduced changes and fixes to the domain properties tab. It is now scrollable, the expansion panels are properly aligned and the cancel action has a new icon.","title":"Improve domain properties tab"},{"location":"Release_Notes/v2023.5.0/#fix-tooltips-not-being-displayed","text":"We have fixed tooltips not being displayed for disabled field forms, e.g. in the Set observation panel.","title":"Fix tooltips not being displayed"},{"location":"Release_Notes/v2023.5.0/#change-default-csv-import-configuration","text":"We have introduced a minor change to default expressions used for importing devices from a CSV file, so that the import relies on the endpoint name rather than device identifier.","title":"Change default CSV import configuration"},{"location":"Release_Notes/v2023.5.0/#fix-wrong-csv-import-error-messages","text":"We have corrected an error message, which could occur during CSV import for devices without a specified connector type. The Identity has to be provided error was returned instead of ConnectorType field is mandatory.","title":"Fix wrong CSV import error messages"},{"location":"Release_Notes/v2023.5.0/#add-support-for-lwm2m-cbor-and-senml-json","text":"We have added LwM2M CBOR and SenML JSON formats support for receiving LwM2M Send operations.","title":"Add support for LwM2M CBOR and SenML JSON"},{"location":"Release_Notes/v2023.5.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.5.0/#fix-unwarranted-html-rendering-in-chart-tooltips","text":"We have introduced a fix, so that device names and resource values that are valid HTML tags are not rendered as HTML in the tooltips on Dashboards .","title":"Fix unwarranted HTML rendering in chart tooltips"},{"location":"Release_Notes/v2023.5.0/#fix-groups-appearing-outside-the-standard-structure","text":"We have fixed redundant groups appearing outside of the standard structure in the Device groups view. This was due to incomplete removal of domains from the database.","title":"Fix groups appearing outside the standard structure"},{"location":"Release_Notes/v2023.5.0/#fix-multi-instance-monitoring-fail","text":"We have fixed an error which occurred while setting up monitoring for a multi-instance resource.","title":"Fix multi-instance monitoring fail"},{"location":"Release_Notes/v2023.5.0/#fix-lwm2mbesteffortget-tag-error","text":"We have fixed the use of the lwm2mBestEffortGet tag in an XML task returning an error message despite successfully retrieving data from the device.","title":"Fix lwm2mBestEffortGet tag error"},{"location":"Release_Notes/v2023.5.0/#fix-hanging-on-the-handshake","text":"We have fixed a bug where DTLS identity was removed from the PSK store during bootstrap, which prevented the devices from being able to register.","title":"Fix hanging on the handshake"},{"location":"Release_Notes/v2023.5.0/#documentation","text":"","title":"Documentation"},{"location":"Release_Notes/v2023.5.0/#administrator-documentation-update","text":"We have added various sections on Alerts in the Administration documentation, under the Monitoring, logs and alerts chapter.","title":"Administrator documentation update"},{"location":"Release_Notes/v2023.6.0/","text":"v2023.6.0 # Previous version: v2023.5.0 Enhancements # Remove Object ID limit # We have removed the current limitation for the number of Object ID (> 502) in new monitoring. Add error message for Azure integration # We have added an error message, which informs about incorrect validation of endpoint names in the used CSV file during Azure integration. Add new columns in device tests lists # We have added two default new columns in the device tests list table - Created by and Last update by. They indicate which user created or updated a given test case. Task execution scope for tasks and task templates # We have introduced a change, so that all tasks and task templates have the execution scope property assigned. This is to avoid potential errors and does not affect existing tasks. XML tasks security improvements # For security reasons, we have introduced the following changes to the rest and coioteRest XML tasks tags: Requests to private IP addresses are blocked by default, Following redirections is disabled by default, Allowed protocols are limited to HTTP and HTTPS. Remove domain select dropdown for Developer plan # We have removed the domain select dropdown from the navigation bar as domain management is not a functionality available for users with the Developer plan. Bug Fixes # Fix an exception during Azure client refresh # We have removed a faulty dependency, which resulted in an unhandled exception during Azure client refresh. We have also updated the Azure SDK library. Fix UI issue in Device Center # We have fixed an issue with the Set observation panel in the Device Center. It is no longer possible to interact with the inactive part of the interface, while the panel is extended. Fix setting values not properly applied # We have fixed an issue with setting values not being properly logged during the initial session of a device and working only after restarting a task. This occurred if setting values were accessed in a migration rule and therefore initialised prematurely. Fix LwM2M Bootstrap panel notice message format # We have fixed the notice message entries in the LwM2M Bootstrap panel being duplicated.","title":"v2023.6.0"},{"location":"Release_Notes/v2023.6.0/#v202360","text":"Previous version: v2023.5.0","title":"v2023.6.0"},{"location":"Release_Notes/v2023.6.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.6.0/#remove-object-id-limit","text":"We have removed the current limitation for the number of Object ID (> 502) in new monitoring.","title":"Remove Object ID limit"},{"location":"Release_Notes/v2023.6.0/#add-error-message-for-azure-integration","text":"We have added an error message, which informs about incorrect validation of endpoint names in the used CSV file during Azure integration.","title":"Add error message for Azure integration"},{"location":"Release_Notes/v2023.6.0/#add-new-columns-in-device-tests-lists","text":"We have added two default new columns in the device tests list table - Created by and Last update by. They indicate which user created or updated a given test case.","title":"Add new columns in device tests lists"},{"location":"Release_Notes/v2023.6.0/#task-execution-scope-for-tasks-and-task-templates","text":"We have introduced a change, so that all tasks and task templates have the execution scope property assigned. This is to avoid potential errors and does not affect existing tasks.","title":"Task execution scope for tasks and task templates"},{"location":"Release_Notes/v2023.6.0/#xml-tasks-security-improvements","text":"For security reasons, we have introduced the following changes to the rest and coioteRest XML tasks tags: Requests to private IP addresses are blocked by default, Following redirections is disabled by default, Allowed protocols are limited to HTTP and HTTPS.","title":"XML tasks security improvements"},{"location":"Release_Notes/v2023.6.0/#remove-domain-select-dropdown-for-developer-plan","text":"We have removed the domain select dropdown from the navigation bar as domain management is not a functionality available for users with the Developer plan.","title":"Remove domain select dropdown for Developer plan"},{"location":"Release_Notes/v2023.6.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.6.0/#fix-an-exception-during-azure-client-refresh","text":"We have removed a faulty dependency, which resulted in an unhandled exception during Azure client refresh. We have also updated the Azure SDK library.","title":"Fix an exception during Azure client refresh"},{"location":"Release_Notes/v2023.6.0/#fix-ui-issue-in-device-center","text":"We have fixed an issue with the Set observation panel in the Device Center. It is no longer possible to interact with the inactive part of the interface, while the panel is extended.","title":"Fix UI issue in Device Center"},{"location":"Release_Notes/v2023.6.0/#fix-setting-values-not-properly-applied","text":"We have fixed an issue with setting values not being properly logged during the initial session of a device and working only after restarting a task. This occurred if setting values were accessed in a migration rule and therefore initialised prematurely.","title":"Fix setting values not properly applied"},{"location":"Release_Notes/v2023.6.0/#fix-lwm2m-bootstrap-panel-notice-message-format","text":"We have fixed the notice message entries in the LwM2M Bootstrap panel being duplicated.","title":"Fix LwM2M Bootstrap panel notice message format"},{"location":"Release_Notes/v2023.7.0/","text":"v2023.7.0 # Previous version: v2023.6.0 Enhancements # Add duplicate test action # We have added a new functionality, which allows for duplicating single device tests in the Device test repository . Only custom tests can be duplicated. Improve search fields consistency # We have made improvements to the Endpoint name , Friendly name and Description search fields in Device inventory and Device groups views. It is now possible to conduct searches in all of the fields using a partial match query. Due to security reasons, if encryption is enabled, the Endpoint name can be found only with an exact match query. Plain text - HEX conversion for PSK # We have added the possibility to switch between the two PSK formats in the Device center . A preview of the value converted to the other format is now present in the device creator and the configuration edit dialog. Update lwm2m-test server certificate for lwm2m endpoints # We have changed the server certificate on lwm2m-test.avsystem.io installation so that it uses only secp256r1 (EC256) keys. This increases compatibility with constrained devices. To verify server certificate on lwm2m-test.avsystem.io installation, the device should have the https://ca.avsystem.com/certs/AVSystem_ECCA_LV1_SS.crt certificate in the trust store. Update endpoint name error messages # We have added custom error messages occurring when attempting to use an endpoint name, which is already in use. Save filtering, paging and sorting options in Device inventory # We have added an improvement to platform navigation. If you reach the Device inventory using the back button in your browser, the previously set filtering, paging and sorting options are restored. Ensure device alias uniqueness # We have added a requirement for device alias names to be unique in order to prevent data sets not being complete when retrieved via API. Bug Fixes # Fix incorrect traffic routing # We have fixed incorrect traffic routing to UDPC, which occasionally failed, especially if direct routing was enabled. Fix data collection domain property # We have fixed an issue with the Data collection domain property, where it was possible to retrieve data meant to have been deleted according to the settings. Fix table custom settings # We have fixed an error, which occurred for some users and caused the custom settings for menu entries (tabs) in the Device management center being reverted to the default ones. Fix Forbidden Address Issue # We have fixed an issue with one of the tasks interfering with security checks, which resulted in the Forbidden Address Issue error.","title":"v2023.7.0"},{"location":"Release_Notes/v2023.7.0/#v202370","text":"Previous version: v2023.6.0","title":"v2023.7.0"},{"location":"Release_Notes/v2023.7.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.7.0/#add-duplicate-test-action","text":"We have added a new functionality, which allows for duplicating single device tests in the Device test repository . Only custom tests can be duplicated.","title":"Add duplicate test action"},{"location":"Release_Notes/v2023.7.0/#improve-search-fields-consistency","text":"We have made improvements to the Endpoint name , Friendly name and Description search fields in Device inventory and Device groups views. It is now possible to conduct searches in all of the fields using a partial match query. Due to security reasons, if encryption is enabled, the Endpoint name can be found only with an exact match query.","title":"Improve search fields consistency"},{"location":"Release_Notes/v2023.7.0/#plain-text-hex-conversion-for-psk","text":"We have added the possibility to switch between the two PSK formats in the Device center . A preview of the value converted to the other format is now present in the device creator and the configuration edit dialog.","title":"Plain text - HEX conversion for PSK"},{"location":"Release_Notes/v2023.7.0/#update-lwm2m-test-server-certificate-for-lwm2m-endpoints","text":"We have changed the server certificate on lwm2m-test.avsystem.io installation so that it uses only secp256r1 (EC256) keys. This increases compatibility with constrained devices. To verify server certificate on lwm2m-test.avsystem.io installation, the device should have the https://ca.avsystem.com/certs/AVSystem_ECCA_LV1_SS.crt certificate in the trust store.","title":"Update lwm2m-test server certificate for lwm2m endpoints"},{"location":"Release_Notes/v2023.7.0/#update-endpoint-name-error-messages","text":"We have added custom error messages occurring when attempting to use an endpoint name, which is already in use.","title":"Update endpoint name error messages"},{"location":"Release_Notes/v2023.7.0/#save-filtering-paging-and-sorting-options-in-device-inventory","text":"We have added an improvement to platform navigation. If you reach the Device inventory using the back button in your browser, the previously set filtering, paging and sorting options are restored.","title":"Save filtering, paging and sorting options in Device inventory"},{"location":"Release_Notes/v2023.7.0/#ensure-device-alias-uniqueness","text":"We have added a requirement for device alias names to be unique in order to prevent data sets not being complete when retrieved via API.","title":"Ensure device alias uniqueness"},{"location":"Release_Notes/v2023.7.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.7.0/#fix-incorrect-traffic-routing","text":"We have fixed incorrect traffic routing to UDPC, which occasionally failed, especially if direct routing was enabled.","title":"Fix incorrect traffic routing"},{"location":"Release_Notes/v2023.7.0/#fix-data-collection-domain-property","text":"We have fixed an issue with the Data collection domain property, where it was possible to retrieve data meant to have been deleted according to the settings.","title":"Fix data collection domain property"},{"location":"Release_Notes/v2023.7.0/#fix-table-custom-settings","text":"We have fixed an error, which occurred for some users and caused the custom settings for menu entries (tabs) in the Device management center being reverted to the default ones.","title":"Fix table custom settings"},{"location":"Release_Notes/v2023.7.0/#fix-forbidden-address-issue","text":"We have fixed an issue with one of the tasks interfering with security checks, which resulted in the Forbidden Address Issue error.","title":"Fix Forbidden Address Issue"},{"location":"Release_Notes/v2023.9.0/","text":"v2023.9.0 # Previous version: v2023.7.0 Architectural Changes # New Firmware update tab # We have added the possibility to conduct both Basic and Multi-component Firmware Update in the user interface. This functionality is accessible through the Device Center > Firmware update > Update Firmware . We have also added two new cards in the device Firmware update tab. The Device firmware card displays the last recorded information about the current firmware version of the device. The Updates list card contains a table with a detailed overview of executed and scheduled firmware updates Enhancements # Improve device logs # We have introduced a configuration change, so that information about failed connection attempts is included in the device logs. Bug Fixes # Fix unwarranted tag in XML tasks # We have fixed a bug, which caused the <ensureObservation> tag being injected into XML task code when scheduling a task via API. Fix error not being logged # We have fixed an error message not being properly logged in case a device could not obtain an EST certificate after being added via Bootstrap. This occurred if the Endpoint name and certificate Common Name verification ( verifyEpAgainstCertCn Setting Value) was disabled and a certificate of a different device was used.","title":"v2023.9.0"},{"location":"Release_Notes/v2023.9.0/#v202390","text":"Previous version: v2023.7.0","title":"v2023.9.0"},{"location":"Release_Notes/v2023.9.0/#architectural-changes","text":"","title":"Architectural Changes"},{"location":"Release_Notes/v2023.9.0/#new-firmware-update-tab","text":"We have added the possibility to conduct both Basic and Multi-component Firmware Update in the user interface. This functionality is accessible through the Device Center > Firmware update > Update Firmware . We have also added two new cards in the device Firmware update tab. The Device firmware card displays the last recorded information about the current firmware version of the device. The Updates list card contains a table with a detailed overview of executed and scheduled firmware updates","title":"New Firmware update tab"},{"location":"Release_Notes/v2023.9.0/#enhancements","text":"","title":"Enhancements"},{"location":"Release_Notes/v2023.9.0/#improve-device-logs","text":"We have introduced a configuration change, so that information about failed connection attempts is included in the device logs.","title":"Improve device logs"},{"location":"Release_Notes/v2023.9.0/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"Release_Notes/v2023.9.0/#fix-unwarranted-tag-in-xml-tasks","text":"We have fixed a bug, which caused the <ensureObservation> tag being injected into XML task code when scheduling a task via API.","title":"Fix unwarranted tag in XML tasks"},{"location":"Release_Notes/v2023.9.0/#fix-error-not-being-logged","text":"We have fixed an error message not being properly logged in case a device could not obtain an EST certificate after being added via Bootstrap. This occurred if the Endpoint name and certificate Common Name verification ( verifyEpAgainstCertCn Setting Value) was disabled and a certificate of a different device was used.","title":"Fix error not being logged"},{"location":"academy/","text":"LwM2M Academy (beta) # Welcome! # Welcome to the LwM2M Academy , an immersive online course tailored to equip you with understanding of the Lightweight Machine to Machine (LwM2M) protocol. This program is designed to provide you with both the theoretical understanding and hands-on skills necessary to utilize this powerful IoT standard. The course consists of 5 modules which will journey you through the diverse aspects of LwM2M, from the underlying principles and architecture to its implementation and optimization for creating robust IoT applications. By the end of the course, you will understand the advantages of the LwM2M standard and possess the skills to implement it effectively. With a strong emphasis on real-world applications, the course is designed to provide you with practical experience, empowering you to build IoT applications confidently using LwM2M. Embark on this learning journey and explore the fascinating world of LwM2M. Invitation to Discord Community # Step right into the heart of learning with the AVSystem Discord Community . During the course, Discord is the place for expert guidance on LwM2M, networking with fellow course students, and showcasing the cool stuff you're building. We've dedicated an exclusive channel for our learners, named lwm2m-academy . We invite you to join the AVSystem Discord Community to enrich your learning experience and interact with the LwM2M community. Provide your feedback # We're constantly working on improving the LwM2M Academy. Please share with us your feedback throughout the course so we can create an even better learning experience. Feedback form Intro to the hardware used in this course # Throughout this course, we will be using the Raspberry Pi Pico W , Raspberry Pi's first wireless microcontroller board. It has been designed as a tiny and low-cost yet flexible development platform for the RP2040 MCU. The 21 mm \u00d7 51 mm board comes with a 2.4GHz wireless LAN interface (802.11n). It provides 26 GPIO pins, three of which can function as analog inputs. Four RP2040 I/O pins are used for internal functions: driving an LED, on-board switch mode power supply power control, and sensing the system voltages. Reprogramming the Pico W flash can be done using USB (simply drag and drop a file onto the Pico W, which appears as a mass storage device), or using the serial wire debug (SWD) port. The SWD port can also be used to debug code running on the RP2040 interactively. Purchase hardware via Raspberry's website Sensor used in the course: # In this course, we will be using the LM35 analog temperature sensor. Purchase the sensor via Kiwi electronics (EU), Amazon (US) or Mouser (EU/US) Intro to Anjay LwM2M Client # Anjay is a free and open-source LwM2M Client written in C for rapidly building LwM2M solutions. It comes with an SDK comprising pre-built examples and reference implementations for popular hardware platforms such as STM32, Raspberry Pi, Nordic or ESP32. Anjay eases the development of LwM2M applications by taking care of the implementation of the LwM2M protocol. The project was created and is actively maintained by AVSystem . Some expert features such as support for hardware security modules or SMS binding are available commercially. Anjay features Automatically implements the LwM2M data format & Smart Objects Security by default (DTLS, OSCORE) Support for FOTA (firmware updates over the air) Device management mechanisms to update configurations over time vStandard implementations available for many hardware platforms Find more information about Anjay and its features, or visit the official documentation website directly. Intro to Coiote IoT DM # Coiote IoT Device Management platform is built around the LwM2M standard. It acts as a LwM2M Server and is designed as a scalable platform to manage large numbers of devices. The platform comes with tools to monitor groups of devices, manage device configurations, and perform firmware updates. In addition, it supports cloud integrations with platforms such as AWS IoT Core or Azure IoT Hub. Coiote IoT DM has a developer version, allowing you to connect up to 10 devices free of charge. To create a developer account, visit eu.iot.avsystem.cloud Coiote IoT DM features Data collection and storage Connect LwM2M devices securely and store their data. Device management Remotely manage device configurations and firmware. Developer tools Tools include time series data visualization, hardware in loop testing, server-side logs collection and automated alerts. Processing data Collect data from your sensors and send them directly in the unified data format to the cloud thanks to various options of data integrations, including AWS IoT Core, Azure IoT Hub, Kafka, and Webhooks. Find more information about getting started with Coiote IoT Device Management platform.","title":"Welcome"},{"location":"academy/#lwm2m-academy-beta","text":"","title":"LwM2M Academy (beta)"},{"location":"academy/#welcome","text":"Welcome to the LwM2M Academy , an immersive online course tailored to equip you with understanding of the Lightweight Machine to Machine (LwM2M) protocol. This program is designed to provide you with both the theoretical understanding and hands-on skills necessary to utilize this powerful IoT standard. The course consists of 5 modules which will journey you through the diverse aspects of LwM2M, from the underlying principles and architecture to its implementation and optimization for creating robust IoT applications. By the end of the course, you will understand the advantages of the LwM2M standard and possess the skills to implement it effectively. With a strong emphasis on real-world applications, the course is designed to provide you with practical experience, empowering you to build IoT applications confidently using LwM2M. Embark on this learning journey and explore the fascinating world of LwM2M.","title":"Welcome!"},{"location":"academy/#invitation-to-discord-community","text":"Step right into the heart of learning with the AVSystem Discord Community . During the course, Discord is the place for expert guidance on LwM2M, networking with fellow course students, and showcasing the cool stuff you're building. We've dedicated an exclusive channel for our learners, named lwm2m-academy . We invite you to join the AVSystem Discord Community to enrich your learning experience and interact with the LwM2M community.","title":"Invitation to Discord Community"},{"location":"academy/#provide-your-feedback","text":"We're constantly working on improving the LwM2M Academy. Please share with us your feedback throughout the course so we can create an even better learning experience. Feedback form","title":"Provide your feedback"},{"location":"academy/#intro-to-the-hardware-used-in-this-course","text":"Throughout this course, we will be using the Raspberry Pi Pico W , Raspberry Pi's first wireless microcontroller board. It has been designed as a tiny and low-cost yet flexible development platform for the RP2040 MCU. The 21 mm \u00d7 51 mm board comes with a 2.4GHz wireless LAN interface (802.11n). It provides 26 GPIO pins, three of which can function as analog inputs. Four RP2040 I/O pins are used for internal functions: driving an LED, on-board switch mode power supply power control, and sensing the system voltages. Reprogramming the Pico W flash can be done using USB (simply drag and drop a file onto the Pico W, which appears as a mass storage device), or using the serial wire debug (SWD) port. The SWD port can also be used to debug code running on the RP2040 interactively. Purchase hardware via Raspberry's website","title":"Intro to the hardware used in this course"},{"location":"academy/#sensor-used-in-the-course","text":"In this course, we will be using the LM35 analog temperature sensor. Purchase the sensor via Kiwi electronics (EU), Amazon (US) or Mouser (EU/US)","title":"Sensor used in the course:"},{"location":"academy/#intro-to-anjay-lwm2m-client","text":"Anjay is a free and open-source LwM2M Client written in C for rapidly building LwM2M solutions. It comes with an SDK comprising pre-built examples and reference implementations for popular hardware platforms such as STM32, Raspberry Pi, Nordic or ESP32. Anjay eases the development of LwM2M applications by taking care of the implementation of the LwM2M protocol. The project was created and is actively maintained by AVSystem . Some expert features such as support for hardware security modules or SMS binding are available commercially. Anjay features Automatically implements the LwM2M data format & Smart Objects Security by default (DTLS, OSCORE) Support for FOTA (firmware updates over the air) Device management mechanisms to update configurations over time vStandard implementations available for many hardware platforms Find more information about Anjay and its features, or visit the official documentation website directly.","title":"Intro to Anjay LwM2M Client"},{"location":"academy/#intro-to-coiote-iot-dm","text":"Coiote IoT Device Management platform is built around the LwM2M standard. It acts as a LwM2M Server and is designed as a scalable platform to manage large numbers of devices. The platform comes with tools to monitor groups of devices, manage device configurations, and perform firmware updates. In addition, it supports cloud integrations with platforms such as AWS IoT Core or Azure IoT Hub. Coiote IoT DM has a developer version, allowing you to connect up to 10 devices free of charge. To create a developer account, visit eu.iot.avsystem.cloud Coiote IoT DM features Data collection and storage Connect LwM2M devices securely and store their data. Device management Remotely manage device configurations and firmware. Developer tools Tools include time series data visualization, hardware in loop testing, server-side logs collection and automated alerts. Processing data Collect data from your sensors and send them directly in the unified data format to the cloud thanks to various options of data integrations, including AWS IoT Core, Azure IoT Hub, Kafka, and Webhooks. Find more information about getting started with Coiote IoT Device Management platform.","title":"Intro to Coiote IoT DM"},{"location":"academy/exercise1/","text":"Exercise 1: Connect the Raspberry Pi Pico W to a LwM2M Server # Let\u2019s start with the first exercise on building an end-to-end LwM2M application by running Anjay LwM2M Client on the Raspberry Pi Pico W, and connecting your device to Coiote IoT Device Management platform over WiFi. Prerequisites # A Raspberry Pi Pico W board with a USB cable Git Access to a WiFi network Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Prepare binaries # Install dependencies # Configure and compile the LwM2M Client. To do so, you need to install some dependencies and clone three GitHub repositories: Anjay Client for the Raspberry Pi Pico W , the Raspberry Pi Pico W SDK , and the FreeRTOS kernel . Start by creating a new workspace, installing the dependencies, and cloning all three GitHub directories into this workspace. Create and open a new directory: mkdir lwm2m-academy cd lwm2m-academy Install dependencies: Linux When using Ubuntu , run the following command: sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib When using Fedora , run the following command: sudo dnf install python3 cmake minicom arm-none-eabi-newlib arm-none-eabi-gcc-cs-c++ arm-none-eabi-gcc-cs arm-none-eabi-binutils-cs gcc-arm-linux-gnu gcc-c++-arm-linux-gnu gcc gcc-c++ Mac When using MacOS, run the following command: brew install armmbed/formulae/arm-none-eabi-gcc Windows Download and run the installer to install arm-none-eabi-gcc and arm-none-eabi-gdb . Select the default destination directory (E.g. C:\\GNU_Arm_Embedded_Toolchain ). Check the Add path to environment variable option before you click the Finish button for the installation. Clone three GitHub repositories using Git. Clone the RPi Pico SDK repository and update its submodules git clone -b 1.4.0 https://github.com/raspberrypi/pico-sdk.git cd pico-sdk/ && git submodule update --init && cd .. Clone the FreeRTOS kernel repository git clone -b V10.5.0 https://github.com/FreeRTOS/FreeRTOS-Kernel.git Clone the Anjay-pico-client repository and update its modules git clone https://github.com/AVSystem/Anjay-pico-client.git cd Anjay-pico-client && git submodule update --init --recursive && cd .. Tip Need help? Head over to the lwm2m-academy channel on Discord to get in touch with our experts. Connect to the LwM2M Server # Before connecting your device to the cloud, log in to Coiote IoT Device Management platform: eu.iot.avsystem.cloud . Once logged in, select Device Inventory from the left-side menu In the Device Inventory, click Add device . Select the tile Connect your LwM2M device directly via the Management server . In the Device Credentials step: Enter the Endpoint name. You can choose an endpoint name by yourself. As the Security mode, choose NoSec . Click Add device and Confirm in the confirmation pop-up. Click Go to Summary to find your Device Center view. Compile the application # Let\u2019s continue building the required files for the application. We are using NoSec mode where encryption and authentication are disabled and the data messages are passed in plain text over the network. In future exercises, we\u2019ll cover secure implementation in more detail. Warning Use the NoSec mode only for development, testing, and debugging purposes, never in production environments unless end-to-end security is provided on a lower layer (e.g. IPSec). To start the compilation of the application, go to the Anjay-pico-client directory. Build the project with <ssid> and <pass> replaced with your WiFi network name and password respectively. The LwM2M Client Endpoint Name is configured using the <endpoint_name> parameter. Note A LwM2M Client is uniquely identified by an Endpoint Name . Use the Endpoint Name you created in the Connect to the Server section. Create and open a directory called build : mkdir build && cd build If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" .. -G \"MinGW Makefiles\" Open up the build directory and run the following command: cmake --build . -j It will generate directories that contain the .uf2 and .hex files. The .uf2 files can be programmed using the bootloader (e.g. drag-and-drop method) and .hex files can be loaded directly into the memory of the device using the rp2 tool. In this example, we will use the .uf2 file. Flash the board using the bootloader: # To program the Raspberry Pi using the bootloader, press and hold the BOOTSEL button while connecting the device through a USB cable - it should be recognized as a Mass Storage device. In the build/mandatory_objects directory, you will find the .uf2 file. Copy the mandatory_objects.uf2 file to the Mass Storage device directory, and wait until the process finishes - copying the firmware image may take a while Check the logs # With the board still connected to your PC, open a serial communication program. This will help you to check if everything is working correctly. Note To open the serial port interface you need to check the name of the connected device and choose the proper baud rate value: Linux usually uses /dev/ttyACM or /dev/ttyUSB for a serial port device name. Windows uses COM for a serial port device name. macOS uses /dev/tty.usbmodem for a serial port device name. It\u2019s important to set the correct baud rate, too. The baud rate is the number of symbols transferred in a communication channel per second and must be the same both on the serial communication program and on the board. The most common baud rates for serial ports are 9600 and 115200 . In exercises throughout the academy, we use 115200 baud, since it\u2019s the default value used by Raspberry Pi Pico W. Tip Those logs may help figure out why the device didn't connect to the server (e.g. because of the mistake in writing the WiFi password in the cmake command). If all went well and logs show registration successful/registration successfully updated , you can go to Coiote IoT DM where the Registration status should show Registered . Did you manage to connect the Raspberry Pi Pico W to the Coiote IoT Device Management platform? Well done! You\u2019ve created your first LwM2M application \ud83d\udc4f Data model view # Click the Data model tab from the top menu. In this view, we can see all LwM2M Object the device supports. As of now, there is only the LwM2M Server Object, more objects will be added in future exercises. Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 1 - Connect the RPI to a LwM2M Server"},{"location":"academy/exercise1/#exercise-1-connect-the-raspberry-pi-pico-w-to-a-lwm2m-server","text":"Let\u2019s start with the first exercise on building an end-to-end LwM2M application by running Anjay LwM2M Client on the Raspberry Pi Pico W, and connecting your device to Coiote IoT Device Management platform over WiFi.","title":"Exercise 1: Connect the Raspberry Pi Pico W to a LwM2M Server"},{"location":"academy/exercise1/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable Git Access to a WiFi network Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account.","title":"Prerequisites"},{"location":"academy/exercise1/#prepare-binaries","text":"","title":"Prepare binaries"},{"location":"academy/exercise1/#install-dependencies","text":"Configure and compile the LwM2M Client. To do so, you need to install some dependencies and clone three GitHub repositories: Anjay Client for the Raspberry Pi Pico W , the Raspberry Pi Pico W SDK , and the FreeRTOS kernel . Start by creating a new workspace, installing the dependencies, and cloning all three GitHub directories into this workspace. Create and open a new directory: mkdir lwm2m-academy cd lwm2m-academy Install dependencies: Linux When using Ubuntu , run the following command: sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib When using Fedora , run the following command: sudo dnf install python3 cmake minicom arm-none-eabi-newlib arm-none-eabi-gcc-cs-c++ arm-none-eabi-gcc-cs arm-none-eabi-binutils-cs gcc-arm-linux-gnu gcc-c++-arm-linux-gnu gcc gcc-c++ Mac When using MacOS, run the following command: brew install armmbed/formulae/arm-none-eabi-gcc Windows Download and run the installer to install arm-none-eabi-gcc and arm-none-eabi-gdb . Select the default destination directory (E.g. C:\\GNU_Arm_Embedded_Toolchain ). Check the Add path to environment variable option before you click the Finish button for the installation. Clone three GitHub repositories using Git. Clone the RPi Pico SDK repository and update its submodules git clone -b 1.4.0 https://github.com/raspberrypi/pico-sdk.git cd pico-sdk/ && git submodule update --init && cd .. Clone the FreeRTOS kernel repository git clone -b V10.5.0 https://github.com/FreeRTOS/FreeRTOS-Kernel.git Clone the Anjay-pico-client repository and update its modules git clone https://github.com/AVSystem/Anjay-pico-client.git cd Anjay-pico-client && git submodule update --init --recursive && cd .. Tip Need help? Head over to the lwm2m-academy channel on Discord to get in touch with our experts.","title":"Install dependencies"},{"location":"academy/exercise1/#connect-to-the-lwm2m-server","text":"Before connecting your device to the cloud, log in to Coiote IoT Device Management platform: eu.iot.avsystem.cloud . Once logged in, select Device Inventory from the left-side menu In the Device Inventory, click Add device . Select the tile Connect your LwM2M device directly via the Management server . In the Device Credentials step: Enter the Endpoint name. You can choose an endpoint name by yourself. As the Security mode, choose NoSec . Click Add device and Confirm in the confirmation pop-up. Click Go to Summary to find your Device Center view.","title":"Connect to the LwM2M Server"},{"location":"academy/exercise1/#compile-the-application","text":"Let\u2019s continue building the required files for the application. We are using NoSec mode where encryption and authentication are disabled and the data messages are passed in plain text over the network. In future exercises, we\u2019ll cover secure implementation in more detail. Warning Use the NoSec mode only for development, testing, and debugging purposes, never in production environments unless end-to-end security is provided on a lower layer (e.g. IPSec). To start the compilation of the application, go to the Anjay-pico-client directory. Build the project with <ssid> and <pass> replaced with your WiFi network name and password respectively. The LwM2M Client Endpoint Name is configured using the <endpoint_name> parameter. Note A LwM2M Client is uniquely identified by an Endpoint Name . Use the Endpoint Name you created in the Connect to the Server section. Create and open a directory called build : mkdir build && cd build If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" .. -G \"MinGW Makefiles\" Open up the build directory and run the following command: cmake --build . -j It will generate directories that contain the .uf2 and .hex files. The .uf2 files can be programmed using the bootloader (e.g. drag-and-drop method) and .hex files can be loaded directly into the memory of the device using the rp2 tool. In this example, we will use the .uf2 file.","title":"Compile the application"},{"location":"academy/exercise1/#flash-the-board-using-the-bootloader","text":"To program the Raspberry Pi using the bootloader, press and hold the BOOTSEL button while connecting the device through a USB cable - it should be recognized as a Mass Storage device. In the build/mandatory_objects directory, you will find the .uf2 file. Copy the mandatory_objects.uf2 file to the Mass Storage device directory, and wait until the process finishes - copying the firmware image may take a while","title":"Flash the board using the bootloader:"},{"location":"academy/exercise1/#check-the-logs","text":"With the board still connected to your PC, open a serial communication program. This will help you to check if everything is working correctly. Note To open the serial port interface you need to check the name of the connected device and choose the proper baud rate value: Linux usually uses /dev/ttyACM or /dev/ttyUSB for a serial port device name. Windows uses COM for a serial port device name. macOS uses /dev/tty.usbmodem for a serial port device name. It\u2019s important to set the correct baud rate, too. The baud rate is the number of symbols transferred in a communication channel per second and must be the same both on the serial communication program and on the board. The most common baud rates for serial ports are 9600 and 115200 . In exercises throughout the academy, we use 115200 baud, since it\u2019s the default value used by Raspberry Pi Pico W. Tip Those logs may help figure out why the device didn't connect to the server (e.g. because of the mistake in writing the WiFi password in the cmake command). If all went well and logs show registration successful/registration successfully updated , you can go to Coiote IoT DM where the Registration status should show Registered . Did you manage to connect the Raspberry Pi Pico W to the Coiote IoT Device Management platform? Well done! You\u2019ve created your first LwM2M application \ud83d\udc4f","title":"Check the logs"},{"location":"academy/exercise1/#data-model-view","text":"Click the Data model tab from the top menu. In this view, we can see all LwM2M Object the device supports. As of now, there is only the LwM2M Server Object, more objects will be added in future exercises. Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Data model view"},{"location":"academy/exercise2a/","text":"Exercise 2A: Analyze the Mandatory Objects # In this exercise, we will look into the implementation of the mandatory LwM2M Objects using the Anjay LwM2M Client. To connect the Raspberry Pi to a LwM2M Server and handle incoming packets, three objects need to be implemented: LwM2M Security (Object /0 ) LwM2M Server (Object /1 ) LwM2M Device (Object /3 ) Fortunately, Anjay provides these Objects in the form of pre-implemented modules which can be easily used. In this exercise, we analyze the application \u201c Mandatory Objects \u201d which we built in the exercise of module 1 . This application registers the device to the Coiote IoT Device Management platform and periodically sends status messages. This exercise describes the functionalities of the application that uses the NoSec security mode. In the next exercise we will implement a security mode. Prerequisites # A Raspberry Pi Pico W board with a USB cable. Completed exercise 1 from module 1. An active Coiote IoT DM user account. Introduction to Mandatory Objects # Note This exercise only describes functions from the Anjay-pico-client/mandatory_objects application necessary to run LwM2M Client. To create the Security Object with a different secure mode go to exercise 2B. Go to your local Anjay-pico-client/mandatory_objects directory and open the main.c file in a text editor (e.g. VS Code). Security Object /0 # In the setup_security_object() function the security configurations are defined. The Resources which are configured for the Security Object are: Resource /0/x/10 : Server Short ID (ssid). This Resource explicitly identifies the LwM2M Server. By default, this is set to 1. Additional values can be added when more LwM2M Security Objects are configured. Resource /0/x/0 : LwM2M Server URI . This Resource defines the address of the LwM2M Server. Resource /0/x/2 : Security Mode . This Resource defines the security mode. In this application, the NoSec (no security) mode is used. By changing this parameter, other security modes can be used, including Pre-Shared Key mode and Certificate mode. main.c // Installs Security Object and adds an instance of it. // An instance of Security Object provides information needed to connect // to LwM2M server. static int setup_security_object() { if (anjay_security_object_install(g_anjay)) { return -1; } const anjay_security_instance_t security_instance = { .ssid = 1, .server_uri = \"coap://eu.iot.avsystem.cloud:5683\", .security_mode = ANJAY_SECURITY_NOSEC }; // Anjay will assign Instance ID automatically anjay_iid_t security_instance_id = ANJAY_ID_INVALID; if (anjay_security_object_add_instance(g_anjay, &security_instance, &security_instance_id)) { return -1; } return 0; } Server Object /1 # The Server Object is defined in the setup_server_object() function which can be found in the main.c file. Within this function, the required credentials for connecting to a LwM2M Server are defined. Note The Security and Server configurations are linked by the Short Server ID Resource. That is why we need to ensure the SSIDs in both the setup_server_object() and setup_security_object() match. The Resources which are configured for the Server Object are: Resource /1/x/0 : Short Server ID (ssid). This Resource explicitly identifies the LwM2M Server. By default, this is set to 1. Additional values can be added when more LwM2M Server are configured. Resource /1/x/1 : Lifetime - This Resource shows the time for how long the server deems the registration valid which means that the Client (our device) should send an Update message to the server before Lifetime expires. In this application, the Client sends an update message at least every 50 seconds. Resource /1/x/2 : Default Min Period (pmin) - If this Resource is set, notifications will never be sent more than once every pmin seconds, if this parameter isn't configured on a particular Observation. In this application, we use \u201c-1\u201d which means the Default Minimum Period is disabled. Resource /1/x/3 : Default Max Period (pmax) - If this Resource is set, notifications will always be sent at least once every pmax seconds, if this parameter isn't configured on a particular Observation, even if the value did not change. In this application, we use \u201c-1\u201d which means the Default Maximum Period is disabled. Note Resource /1/x/2 : Default Min Period and Resource /1/x/3 : Default Max Period show usage of LwM2M Notifications which will be described in the next module: Module 3 - Building a LwM2M application/device firmware . Resource /1/x/5 : Disable Timeout - This Resource controls the time period after which, the LwM2M Client will re-register to the server. In this application, we use \u201c-1\u201d which means the Disable Timeout is disabled. When this Resource is not set, the default timeout value of 86400 seconds (1 day) is used. Resource /1/x/7 : Binding - This Resource sets the preferred transport method. In this application, it is set to UDP. The LwM2M standard provides the option to set the binding to TCP, SMS, LoRaWAN, CIoT, or WebSockets. main.c // Installs Server Object and adds an instance of it. // An instance of Server Object provides the data related to a LwM2M // Server. static int setup_server_object() { if (anjay_server_object_install(g_anjay)) { return -1; } const anjay_server_instance_t server_instance = { .ssid = 1, .lifetime = 50, .default_min_period = -1, .default_max_period = -1, .disable_timeout = -1, .binding = \"U\" }; // Anjay will assign Instance ID automatically anjay_iid_t server_instance_id = ANJAY_ID_INVALID; if (anjay_server_object_add_instance(g_anjay, &server_instance, &server_instance_id)) { return -1; } return 0; } Device Object /3 # The LwM2M Object can be used to define device-related details such as: Resource /3/x/0 : Manufacturer Resource /3/x/1 : Model Number Resource /3/x/2 : Serial Number Resource /3/x/3 : Firmware Version It is also used for invoking a device Resource /3/x/4 : Reboot or Resource /3/x/5 : Factory Reset . Note Although the LwM2M specifications define the Device Object as mandatory, the Coiote IoT Device Management platform works without creating this Object. In module 3 (client-side operations) we are covering the creation of the Device Object. Initiate Objects # After the setup_server_object() and the setup_security_object() have been added to the main.c file, these Objects need to be initiated using anjay_task() . This is done using the code below. main.c void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } // Server and Security Objects are initiated here: if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } main_loop(); anjay_delete(g_anjay); } Did you review all of the code snippets in the Mandatory Objects application? Nice work! You now understand the basics of building an LwM2M application. \ud83c\udf89 Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 2A - Analyze Mandatory Objects"},{"location":"academy/exercise2a/#exercise-2a-analyze-the-mandatory-objects","text":"In this exercise, we will look into the implementation of the mandatory LwM2M Objects using the Anjay LwM2M Client. To connect the Raspberry Pi to a LwM2M Server and handle incoming packets, three objects need to be implemented: LwM2M Security (Object /0 ) LwM2M Server (Object /1 ) LwM2M Device (Object /3 ) Fortunately, Anjay provides these Objects in the form of pre-implemented modules which can be easily used. In this exercise, we analyze the application \u201c Mandatory Objects \u201d which we built in the exercise of module 1 . This application registers the device to the Coiote IoT Device Management platform and periodically sends status messages. This exercise describes the functionalities of the application that uses the NoSec security mode. In the next exercise we will implement a security mode.","title":"Exercise 2A: Analyze the Mandatory Objects"},{"location":"academy/exercise2a/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable. Completed exercise 1 from module 1. An active Coiote IoT DM user account.","title":"Prerequisites"},{"location":"academy/exercise2a/#introduction-to-mandatory-objects","text":"Note This exercise only describes functions from the Anjay-pico-client/mandatory_objects application necessary to run LwM2M Client. To create the Security Object with a different secure mode go to exercise 2B. Go to your local Anjay-pico-client/mandatory_objects directory and open the main.c file in a text editor (e.g. VS Code).","title":"Introduction to Mandatory Objects"},{"location":"academy/exercise2a/#security-object-0","text":"In the setup_security_object() function the security configurations are defined. The Resources which are configured for the Security Object are: Resource /0/x/10 : Server Short ID (ssid). This Resource explicitly identifies the LwM2M Server. By default, this is set to 1. Additional values can be added when more LwM2M Security Objects are configured. Resource /0/x/0 : LwM2M Server URI . This Resource defines the address of the LwM2M Server. Resource /0/x/2 : Security Mode . This Resource defines the security mode. In this application, the NoSec (no security) mode is used. By changing this parameter, other security modes can be used, including Pre-Shared Key mode and Certificate mode. main.c // Installs Security Object and adds an instance of it. // An instance of Security Object provides information needed to connect // to LwM2M server. static int setup_security_object() { if (anjay_security_object_install(g_anjay)) { return -1; } const anjay_security_instance_t security_instance = { .ssid = 1, .server_uri = \"coap://eu.iot.avsystem.cloud:5683\", .security_mode = ANJAY_SECURITY_NOSEC }; // Anjay will assign Instance ID automatically anjay_iid_t security_instance_id = ANJAY_ID_INVALID; if (anjay_security_object_add_instance(g_anjay, &security_instance, &security_instance_id)) { return -1; } return 0; }","title":"Security Object /0"},{"location":"academy/exercise2a/#server-object-1","text":"The Server Object is defined in the setup_server_object() function which can be found in the main.c file. Within this function, the required credentials for connecting to a LwM2M Server are defined. Note The Security and Server configurations are linked by the Short Server ID Resource. That is why we need to ensure the SSIDs in both the setup_server_object() and setup_security_object() match. The Resources which are configured for the Server Object are: Resource /1/x/0 : Short Server ID (ssid). This Resource explicitly identifies the LwM2M Server. By default, this is set to 1. Additional values can be added when more LwM2M Server are configured. Resource /1/x/1 : Lifetime - This Resource shows the time for how long the server deems the registration valid which means that the Client (our device) should send an Update message to the server before Lifetime expires. In this application, the Client sends an update message at least every 50 seconds. Resource /1/x/2 : Default Min Period (pmin) - If this Resource is set, notifications will never be sent more than once every pmin seconds, if this parameter isn't configured on a particular Observation. In this application, we use \u201c-1\u201d which means the Default Minimum Period is disabled. Resource /1/x/3 : Default Max Period (pmax) - If this Resource is set, notifications will always be sent at least once every pmax seconds, if this parameter isn't configured on a particular Observation, even if the value did not change. In this application, we use \u201c-1\u201d which means the Default Maximum Period is disabled. Note Resource /1/x/2 : Default Min Period and Resource /1/x/3 : Default Max Period show usage of LwM2M Notifications which will be described in the next module: Module 3 - Building a LwM2M application/device firmware . Resource /1/x/5 : Disable Timeout - This Resource controls the time period after which, the LwM2M Client will re-register to the server. In this application, we use \u201c-1\u201d which means the Disable Timeout is disabled. When this Resource is not set, the default timeout value of 86400 seconds (1 day) is used. Resource /1/x/7 : Binding - This Resource sets the preferred transport method. In this application, it is set to UDP. The LwM2M standard provides the option to set the binding to TCP, SMS, LoRaWAN, CIoT, or WebSockets. main.c // Installs Server Object and adds an instance of it. // An instance of Server Object provides the data related to a LwM2M // Server. static int setup_server_object() { if (anjay_server_object_install(g_anjay)) { return -1; } const anjay_server_instance_t server_instance = { .ssid = 1, .lifetime = 50, .default_min_period = -1, .default_max_period = -1, .disable_timeout = -1, .binding = \"U\" }; // Anjay will assign Instance ID automatically anjay_iid_t server_instance_id = ANJAY_ID_INVALID; if (anjay_server_object_add_instance(g_anjay, &server_instance, &server_instance_id)) { return -1; } return 0; }","title":"Server Object /1"},{"location":"academy/exercise2a/#device-object-3","text":"The LwM2M Object can be used to define device-related details such as: Resource /3/x/0 : Manufacturer Resource /3/x/1 : Model Number Resource /3/x/2 : Serial Number Resource /3/x/3 : Firmware Version It is also used for invoking a device Resource /3/x/4 : Reboot or Resource /3/x/5 : Factory Reset . Note Although the LwM2M specifications define the Device Object as mandatory, the Coiote IoT Device Management platform works without creating this Object. In module 3 (client-side operations) we are covering the creation of the Device Object.","title":"Device Object /3"},{"location":"academy/exercise2a/#initiate-objects","text":"After the setup_server_object() and the setup_security_object() have been added to the main.c file, these Objects need to be initiated using anjay_task() . This is done using the code below. main.c void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } // Server and Security Objects are initiated here: if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } main_loop(); anjay_delete(g_anjay); } Did you review all of the code snippets in the Mandatory Objects application? Nice work! You now understand the basics of building an LwM2M application. \ud83c\udf89 Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Initiate Objects"},{"location":"academy/exercise2b/","text":"Exercise 2B: Implement Pre-Shared Key Security Mode # In this exercise, we will change the security mode from No-Sec to Pre-Shared Key (PSK). In this mode, communication is symmetrically encrypted and authenticated using the same secret key (password), shared between the server and the client. Prerequisites # A Raspberry Pi Pico W board with a USB cable. Completed exercise 1 from module 1. Completed exercise 2A from module 2. Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Connect to the LwM2M Server # For LwM2M Servers like Coiote IoT DM , server-side configuration needs to be updated to enable LwM2M Clients to connect using PSK. The simplest solution is to edit the connection parameters on the Coiote IoT Device Management platform configuration page. Follow the next steps to change the parameters and set them to Pre-Shared Key mode. Change connection parameters # Log in to Coiote IoT DM: https://eu.iot.avsystem.cloud . Select Device Inventory from the left-side menu. From the Device Inventory, go to your created device. Go to the Configuration page and click the right pencil icon on the Connection parameters panel. Update Connection parameters : In the Security mode section, select the Pre-Shared Key mode: In the Key identity field, it\u2019s recommended to provide the same value as in the Endpoint name field. In the Key field , create the shared secret used for device-server authentication. During the compilation step you will provide the PSK_KEY which must have the same value as the Key . Warning Nowadays it\u2019s easy to guess simple human-generated passwords. Generating a password using a combination of alphanumeric characters and special symbols ensures its security. Avoid putting your personal information and generate a combination of keys to help you maximize safety and security. Click the Save button and confirm the changes. Configure credentials in application sources # Let\u2019s get started by going to the Anjay-pico-client directory and creating a new directory called psk-mode . Important Copy and paste the main.c and CMakeLists.txt files from the Anjay-pico-client/mandatory_objects directory into the Anjay-pico-client/psk-mode directory. Open the main.c file in a code editor (e.g. VS Code). In this file, we need to modify the setup_security_object() function to change Anjay\u2019s security settings and add the configuration of PSK-based encryption. This can be done using the code below. main.c static int setup_security_object() { if (anjay_security_object_install(g_anjay)) { return -1; } static const char psk_identity[] = PSK_IDENTITY; static const char psk_key[] = PSK_KEY; const anjay_security_instance_t security_instance = { .ssid = 1, .server_uri = \"coaps://eu.iot.avsystem.cloud:5684\", .security_mode = ANJAY_SECURITY_PSK, .public_cert_or_psk_identity = (const uint8_t *) psk_identity, .public_cert_or_psk_identity_size = strlen(psk_identity), .private_cert_or_psk_key = (const uint8_t *) psk_key, .private_cert_or_psk_key_size = strlen(psk_key) }; anjay_iid_t security_instance_id = ANJAY_ID_INVALID; if (anjay_security_object_add_instance(g_anjay, &security_instance, &security_instance_id)) { return -1; } return 0; } Next, open the CMakeLists.txt , change the file names and add the required information about the PSK mode. CMakeLists.txt cmake_minimum_required(VERSION 3.13) add_executable(psk-mode main.c ) target_link_libraries(psk-mode pico_stdlib anjay-pico FreeRTOS ) target_include_directories(psk-mode PRIVATE ${COMMON_DIR}/config ) target_compile_definitions(psk-mode PRIVATE WIFI_SSID=\\\"${WIFI_SSID}\\\" WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\" ENDPOINT_NAME=\\\"${ENDPOINT_NAME}\\\" PSK_IDENTITY=\\\"${PSK_IDENTITY}\\\" PSK_KEY=\\\"${PSK_KEY}\\\" ) pico_enable_stdio_usb(psk-mode 1) pico_enable_stdio_uart(psk-mode 0) pico_add_extra_outputs(psk-mode) At the end of the file add the mention about subdirectory to the general CMakeLists.txt. Anjay-pico-client/CMakeLists.txt add_subdirectory(psk_mode) Now the client is ready to be built and connected to LwM2M Server, allowing it to read the Time object. Important Remember that the Anjay-pico-client/CMakeLists.txt and Anjay-pico-client/psk-mode/CMakeLists.txt are two different files. Tip Need help? Head over to the lwm2m-academy channel on Discord to get in touch with our experts. Configure PSK Identity and Pre-Shared Key # After updating the setup_security_object() function in the main.c file, it is time to describe the most important variables to configure the PSK mode. PSK Identity ( PSK_IDENTITY ) is the name by which the device identifies itself during the DTLS handshake. It is recommended to use the endpoint name as the Key identity. PSK Key ( PSK_KEY ) is the shared secret (password) the device uses for server connections in PSK mode. You must enter this PSK Key in plain text. Server URI ( server_uri ) points to the LwM2M Server. Note that the URI port has changed from 5683 to 5684 . Note The complete code for a similar example targeting desktop platforms can be found in the secure_communication subdirectory of the Anjay-pico-client project repository. Recompile the application and flash the board # To recompile the application, go to the Anjay-pico-client/build directory. If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. -G \"MinGW Makefiles\" Run the following command in the build directory cmake --build . -j Program your board using the bootloader. Press and hold the BOOTSEL button while connecting the device through a USB cable - it should be recognized as a Mass Storage device. In the build/psk-mode directory, you will find the .uf2 file which contains the added changes. Copy the psk-mode.uf2 file to the Mass Storage device directory, and wait until the process finishes - copying the firmware image may take a while Check the logs # If all went well and logs show registration successfully updated . In Coiote IoT Device Management platform, the Registration status should show Registered and the Security mode in the bottom-left corner panel should now include the tag: Pre-Shared Key . Can you see Registered in the registration status and the tag Pre-Shared Key ? If yes, well done! \ud83d\udc4f \ud83d\udc4f Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 2B - Pre-Shared Key"},{"location":"academy/exercise2b/#exercise-2b-implement-pre-shared-key-security-mode","text":"In this exercise, we will change the security mode from No-Sec to Pre-Shared Key (PSK). In this mode, communication is symmetrically encrypted and authenticated using the same secret key (password), shared between the server and the client.","title":"Exercise 2B: Implement Pre-Shared Key Security Mode"},{"location":"academy/exercise2b/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable. Completed exercise 1 from module 1. Completed exercise 2A from module 2. Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account.","title":"Prerequisites"},{"location":"academy/exercise2b/#connect-to-the-lwm2m-server","text":"For LwM2M Servers like Coiote IoT DM , server-side configuration needs to be updated to enable LwM2M Clients to connect using PSK. The simplest solution is to edit the connection parameters on the Coiote IoT Device Management platform configuration page. Follow the next steps to change the parameters and set them to Pre-Shared Key mode.","title":"Connect to the LwM2M Server"},{"location":"academy/exercise2b/#change-connection-parameters","text":"Log in to Coiote IoT DM: https://eu.iot.avsystem.cloud . Select Device Inventory from the left-side menu. From the Device Inventory, go to your created device. Go to the Configuration page and click the right pencil icon on the Connection parameters panel. Update Connection parameters : In the Security mode section, select the Pre-Shared Key mode: In the Key identity field, it\u2019s recommended to provide the same value as in the Endpoint name field. In the Key field , create the shared secret used for device-server authentication. During the compilation step you will provide the PSK_KEY which must have the same value as the Key . Warning Nowadays it\u2019s easy to guess simple human-generated passwords. Generating a password using a combination of alphanumeric characters and special symbols ensures its security. Avoid putting your personal information and generate a combination of keys to help you maximize safety and security. Click the Save button and confirm the changes.","title":"Change connection parameters"},{"location":"academy/exercise2b/#configure-credentials-in-application-sources","text":"Let\u2019s get started by going to the Anjay-pico-client directory and creating a new directory called psk-mode . Important Copy and paste the main.c and CMakeLists.txt files from the Anjay-pico-client/mandatory_objects directory into the Anjay-pico-client/psk-mode directory. Open the main.c file in a code editor (e.g. VS Code). In this file, we need to modify the setup_security_object() function to change Anjay\u2019s security settings and add the configuration of PSK-based encryption. This can be done using the code below. main.c static int setup_security_object() { if (anjay_security_object_install(g_anjay)) { return -1; } static const char psk_identity[] = PSK_IDENTITY; static const char psk_key[] = PSK_KEY; const anjay_security_instance_t security_instance = { .ssid = 1, .server_uri = \"coaps://eu.iot.avsystem.cloud:5684\", .security_mode = ANJAY_SECURITY_PSK, .public_cert_or_psk_identity = (const uint8_t *) psk_identity, .public_cert_or_psk_identity_size = strlen(psk_identity), .private_cert_or_psk_key = (const uint8_t *) psk_key, .private_cert_or_psk_key_size = strlen(psk_key) }; anjay_iid_t security_instance_id = ANJAY_ID_INVALID; if (anjay_security_object_add_instance(g_anjay, &security_instance, &security_instance_id)) { return -1; } return 0; } Next, open the CMakeLists.txt , change the file names and add the required information about the PSK mode. CMakeLists.txt cmake_minimum_required(VERSION 3.13) add_executable(psk-mode main.c ) target_link_libraries(psk-mode pico_stdlib anjay-pico FreeRTOS ) target_include_directories(psk-mode PRIVATE ${COMMON_DIR}/config ) target_compile_definitions(psk-mode PRIVATE WIFI_SSID=\\\"${WIFI_SSID}\\\" WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\" ENDPOINT_NAME=\\\"${ENDPOINT_NAME}\\\" PSK_IDENTITY=\\\"${PSK_IDENTITY}\\\" PSK_KEY=\\\"${PSK_KEY}\\\" ) pico_enable_stdio_usb(psk-mode 1) pico_enable_stdio_uart(psk-mode 0) pico_add_extra_outputs(psk-mode) At the end of the file add the mention about subdirectory to the general CMakeLists.txt. Anjay-pico-client/CMakeLists.txt add_subdirectory(psk_mode) Now the client is ready to be built and connected to LwM2M Server, allowing it to read the Time object. Important Remember that the Anjay-pico-client/CMakeLists.txt and Anjay-pico-client/psk-mode/CMakeLists.txt are two different files. Tip Need help? Head over to the lwm2m-academy channel on Discord to get in touch with our experts.","title":"Configure credentials in application sources"},{"location":"academy/exercise2b/#configure-psk-identity-and-pre-shared-key","text":"After updating the setup_security_object() function in the main.c file, it is time to describe the most important variables to configure the PSK mode. PSK Identity ( PSK_IDENTITY ) is the name by which the device identifies itself during the DTLS handshake. It is recommended to use the endpoint name as the Key identity. PSK Key ( PSK_KEY ) is the shared secret (password) the device uses for server connections in PSK mode. You must enter this PSK Key in plain text. Server URI ( server_uri ) points to the LwM2M Server. Note that the URI port has changed from 5683 to 5684 . Note The complete code for a similar example targeting desktop platforms can be found in the secure_communication subdirectory of the Anjay-pico-client project repository.","title":"Configure PSK Identity and Pre-Shared Key"},{"location":"academy/exercise2b/#recompile-the-application-and-flash-the-board","text":"To recompile the application, go to the Anjay-pico-client/build directory. If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. -G \"MinGW Makefiles\" Run the following command in the build directory cmake --build . -j Program your board using the bootloader. Press and hold the BOOTSEL button while connecting the device through a USB cable - it should be recognized as a Mass Storage device. In the build/psk-mode directory, you will find the .uf2 file which contains the added changes. Copy the psk-mode.uf2 file to the Mass Storage device directory, and wait until the process finishes - copying the firmware image may take a while","title":"Recompile the application and flash the board"},{"location":"academy/exercise2b/#check-the-logs","text":"If all went well and logs show registration successfully updated . In Coiote IoT Device Management platform, the Registration status should show Registered and the Security mode in the bottom-left corner panel should now include the tag: Pre-Shared Key . Can you see Registered in the registration status and the tag Pre-Shared Key ? If yes, well done! \ud83d\udc4f \ud83d\udc4f Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Check the logs"},{"location":"academy/exercise3a/","text":"Exercise 3A: Implement the Time Object # In this exercise, we are implementing the Time Object /3333 using LwM2M version 1.0. With only 3 Resources, it is one of the simplest Objects defined in the OMA LwM2M Registry . The Object allows LwM2M Clients to report the current time in seconds since January 1, 1970, UTC. The Time Object contains three Resources as shown in the table below. ID Name Operations Mandatory Type Description 5506 Current Time RW Mandatory Time Unix Time. A signed integer representing the number of seconds since Jan 1st, 1970 in the UTC time zone. 5507 Fractional Time RW Optional Float A fractional part of the time when sub-second precision is used (e.g., 0.23 for 230 ms). 5750 Application Type RW Optional String The application type of the sensor or actuator as a string depending on the use case. This description identifies Instance (e.g. description indicating the time comes from GPS, internal server clock, or another source) Explanation of table rows: ID - number used to identify the particular Resource. Operations - RW indicates that the Resource is Readable and Writable (the third possible option is E - Executable). Mandatory - not all Resources must be implemented to comply with the specification. In this case, only the Current Time Resource is mandatory. Note Current Time and Fractional Time Resources are writable, but for this exercise, we will only focus on implementing the read operation for these two resources. With our Time Object we will initiate one Instance, implement the read and write functions, make the device responsive to server read commands, and make the Object register to the server at boot. Prerequisites # A Raspberry Pi Pico W board with a USB cable Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. Python An active Coiote IoT DM user account. Completed exercise 2B from module 2 Implement the Time Object # Let\u2019s get started by going to the Anjay-pico-client directory and creating a new directory called time_object . Go to the directory and start by generating the Object's implementation. Important Copy and paste the main.c and CMakeLists.txt files from the Anjay-pico-client/secure_communication directory to the Anjay-pico-client/time_object directory. Generate base source code # To generate a layout of the Object\u2019s implementation, we will use the anjay_codegen.py and lwm2m_object_registry.py scripts which are bundled with the Anjay library. The script downloads the LwM2M Object Definition and generates a skeleton of the LwM2M Object code, requiring you to only fill in actual Object logic. For more information about the script, visit the Anjay documentation . If you\u2019re using Linux or MacOS go to the Anjay-pico-client directory, and run the following commands in your command line: python3 deps/anjay/tools/lwm2m_object_registry.py --get-xml 3333 -v 1.0 > time_object/lwm2m_3333.xml python3 deps/anjay/tools/anjay_codegen.py -i time_object/lwm2m_3333.xml -o time_object/time_object.c Important If you\u2019re using Windows , use python instead of python3 . The commands use the anjay_codegen.py and lwm2m_object_registry.py scripts to generate the lwm2m_3333.xml and time_object.c files in the Anjay-pico-client/time_object . The generated files still require some modifications to make them operational. In the next part, you can find the highlighted code blocks which should be added to the time_object.c files. Instance and Object state # Each Object requires at least one Object Instance which contains all the required Resources. Go to the Anjay-pico-client/time_object directory and open the file time_object.c . Start by adding some variables responsible for the state of our Time Object Instance to the time_instance_t structure. For this add a value of Application Type Resource because Current Time Resource will be using a system clock source directly, whenever a read handler is called. Note There is also a second array for keeping a backup of the Application Type - this will be required for the implementation of transactions. We will get back to it at the end of this exercise. time_object.c typedef struct time_instance_struct { anjay_iid_t iid; char application_type[64]; char application_type_backup[64]; } time_instance_t; typedef struct time_object_struct { const anjay_dm_object_def_t *def; AVS_LIST(time_instance_t) instances; } time_object_t; Initiate, release, and reset the Instance # Next up is implementing the init_instance() and release_instance() functions. These functions are used during the creation and deletion of Instances, usually performed through device work. In this case, all we have to do is initialize the Application Type with some value. We can do this by setting the first byte of time_instance_t::application_type variable to \\0 . Note To better understand the code, it is useful to know the \u201cfull names\u201d of some variables: obj - Object iid - Instance ID rid - Resource ID riid - Resource Instance ID time_object.c static int init_instance(time_instance_t *inst, anjay_iid_t iid) { assert(iid != ANJAY_ID_INVALID); inst->iid = iid; inst->application_type[0] = '\\0'; return 0; } The next function to implement is instance_reset() which resets the Instance to its default state. In our case, this means we clear the Application Type. time_object.c static int instance_reset(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); assert(obj); time_instance_t *inst = find_instance(obj, iid); assert(inst); inst->application_type[0] = '\\0'; return 0; } We can also disable the presence of one of the Resources in the list_resources() function. It is done by changing ANJAY_DM_RES_PRESENT to ANJAY_DM_RES_ABSENT in the anjay_dm_emit_res() call. This change will simplify the implementation of the Read Handler and Observe/Notifications support in the next section. time_object.c static int list_resources(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid, anjay_dm_resource_list_ctx_t *ctx) { (void) anjay; (void) obj_ptr; (void) iid; anjay_dm_emit_res(ctx, RID_CURRENT_TIME, ANJAY_DM_RES_RW, ANJAY_DM_RES_PRESENT); anjay_dm_emit_res(ctx, RID_FRACTIONAL_TIME, ANJAY_DM_RES_RW, ANJAY_DM_RES_ABSENT); anjay_dm_emit_res(ctx, RID_APPLICATION_TYPE, ANJAY_DM_RES_RW, ANJAY_DM_RES_PRESENT); return 0; } Note Using the -r command line option in anjay_codegen.py you can generate Object\u2019s stub with specified Resources only. You can run python3 deps/anjay/tools/anjay_codegen.py --help from the Anjay-pico-client direcotry for more help. Read and Write handlers # Now we are ready to implement resource_read() and resource_write() handlers. These handlers will be called every time LwM2M Server performs a Read or Write operation on the Time Object. Note Read and Write operations will be described in more detail in the next module: Module 4 - Device Management using LwM2M . The resource_read() operation on Current Time resource should return current time in seconds since January 1, 1970, UTC. To get this value, we can use the preimplemented avs_time_real_now() function. The same operation on Application Type resource should return the time_instance_t::application_type string. Because we\u2019ve made the Fractional Time resource absent, we won\u2019t perform any actions on this resource during resource_read() operation. time_object.c static int resource_read(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid, anjay_rid_t rid, anjay_riid_t riid, anjay_output_ctx_t *ctx) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); assert(obj); time_instance_t *inst = find_instance(obj, iid); assert(inst); switch (rid) { case RID_CURRENT_TIME: { assert(riid == ANJAY_ID_INVALID); int64_t timestamp; if (avs_time_real_to_scalar(&timestamp, AVS_TIME_S, avs_time_real_now())) { return -1; } return anjay_ret_i64(ctx, timestamp); } case RID_APPLICATION_TYPE: assert(riid == ANJAY_ID_INVALID); return anjay_ret_string(ctx, inst->application_type); default: return ANJAY_ERR_METHOD_NOT_ALLOWED; } } As discussed, we only implement the Read operation on the Current Time Resource, so the Write operation is only implemented on the Application Type Resource. time_object.c static int resource_write(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid, anjay_rid_t rid, anjay_riid_t riid, anjay_input_ctx_t *ctx) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); assert(obj); time_instance_t *inst = find_instance(obj, iid); assert(inst); switch (rid) { case RID_APPLICATION_TYPE: assert(riid == ANJAY_ID_INVALID); return anjay_get_string(ctx, inst->application_type, sizeof(inst->application_type)); default: return ANJAY_ERR_METHOD_NOT_ALLOWED; } } Initialize the Object # There is one function left to implement: time_object_create() . This function uses add_instance() to create an Object Instance, allowing data to be read by the LwM2M Server. time_object.c const anjay_dm_object_def_t **time_object_create(void) { time_object_t *obj = (time_object_t *) avs_calloc(1, sizeof(time_object_t)); if (!obj) { return NULL; } obj->def = &OBJ_DEF; time_instance_t *inst = add_instance(obj, 0); if (!inst) { avs_free(obj); return NULL; } strcpy(inst->application_type, \"Clock 0\"); return &obj->def; } Register the Object in Anjay # The last thing to do is to create the header file time_object.h for the implemented object, include the header file in the main.c and update the CMakeLists.txt file. time_object.h #pragma once #include <anjay/dm.h> const anjay_dm_object_def_t **time_object_create(void); void time_object_release(const anjay_dm_object_def_t **def); main.c void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } const anjay_dm_object_def_t **time_object = time_object_create(); if (!time_object || anjay_register_object(g_anjay, time_object)) { avs_log(main, WARNING, \"Failed to initialize time object\"); } main_loop(); time_object_release(time_object); anjay_delete(g_anjay); } Include the time_object.h file on the top of the main.c file. time_object.c #include <avsystem/commons/avs_list.h> #include <avsystem/commons/avs_log.h> #include <avsystem/commons/avs_prng.h> #include <avsystem/commons/avs_time.h> #include \"time_object.h\" #ifndef RUN_FREERTOS_ON_CORE # define RUN_FREERTOS_ON_CORE 0 #endif CMakeLists.txt cmake_minimum_required(VERSION 3.13) add_executable(time_object main.c time_object.c time_object.h ) target_link_libraries(time_object pico_stdlib anjay-pico FreeRTOS ) target_include_directories(time_object PRIVATE ${COMMON_DIR}/config ) target_compile_definitions(time_object PRIVATE WIFI_SSID=\\\"${WIFI_SSID}\\\" WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\" ENDPOINT_NAME=\\\"${ENDPOINT_NAME}\\\" PSK_IDENTITY=\\\"${PSK_IDENTITY}\\\" PSK_KEY=\\\"${PSK_KEY}\\\" ) pico_enable_stdio_usb(time_object 1) pico_enable_stdio_uart(time_object 0) pico_add_extra_outputs(time_object) At the end of the file add the mention about subdirectory to the general CMakeLists.txt . Anjay-pico-client/CMakeLists.txt add_subdirectory(time_object) Now the client is ready to be built and connected to LwM2M Server, allowing it to read the Time object. Support transactional writes # Consider the following scenario: the LwM2M Server tries to write to two or more Resources simultaneously. The write-on Application Type will probably succeed, but we are sure that writing at the Current Time will fail as we didn\u2019t implement this Write operation. Without supporting transactions, the entire Write operation will fail. By default, transaction handlers are set to anjay_dm_transaction_NOOP and do nothing. To properly support Writes on the O two handlers: transaction_begin which makes a backup of the Application Type value, and transaction_rollback which reverts the Application Type to its initial value (before the Write operation is performed) for which we need the time_instance_t::application_type_backup array. Go back to the time_object.c file and update the file using the following code block: time_object.c static int transaction_begin(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); time_instance_t *element; AVS_LIST_FOREACH(element, obj->instances) { strcpy(element->application_type_backup, element->application_type); } return 0; } static int transaction_rollback(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); time_instance_t *element; AVS_LIST_FOREACH(element, obj->instances) { strcpy(element->application_type, element->application_type_backup); } return 0; } static const anjay_dm_object_def_t OBJ_DEF = { .oid = 3333, .handlers = { .list_instances = list_instances, .instance_create = instance_create, .instance_remove = instance_remove, .instance_reset = instance_reset, .list_resources = list_resources, .resource_read = resource_read, .resource_write = resource_write, .transaction_begin = transaction_begin, .transaction_validate = anjay_dm_transaction_NOOP, .transaction_commit = anjay_dm_transaction_NOOP, .transaction_rollback = transaction_rollback } }; Recompile the application and flash the board # To recompile the application, go to the Anjay-pico-client/build directory. If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. -G \"MinGW Makefiles\" Run the following command in the build directory cmake --build . -j Program your board using the bootloader. Press and hold the BOOTSEL button while connecting the device through a USB cable - it should be recognized as a Mass Storage device. In the build/time_object directory, you will find the .uf2 file which has our added changes. Copy the time_object.uf2 file to the Mass Storage device directory, and wait until the process finishes - copying the firmware image may take a while. Check the logs # With the board still connected to your PC, open a serial communication program. This will help you to check if everything is working correctly. If all went well and logs show registration successfully updated , you can go to Coiote IoT Device Management platform where the Registration status should show Registered . Go to the Data Model and check if you can see the Time Object in the Defined objects section. Note The Object allows LwM2M Clients to report the current time in seconds since January 1, 1970, UTC. After refreshing the page you can see that the value changed. Good job! \ud83d\udc4f\ud83d\udc4f Now you are ready to create more difficult Objects. For this, go to the next exercise. Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 3A - Implement Time Object"},{"location":"academy/exercise3a/#exercise-3a-implement-the-time-object","text":"In this exercise, we are implementing the Time Object /3333 using LwM2M version 1.0. With only 3 Resources, it is one of the simplest Objects defined in the OMA LwM2M Registry . The Object allows LwM2M Clients to report the current time in seconds since January 1, 1970, UTC. The Time Object contains three Resources as shown in the table below. ID Name Operations Mandatory Type Description 5506 Current Time RW Mandatory Time Unix Time. A signed integer representing the number of seconds since Jan 1st, 1970 in the UTC time zone. 5507 Fractional Time RW Optional Float A fractional part of the time when sub-second precision is used (e.g., 0.23 for 230 ms). 5750 Application Type RW Optional String The application type of the sensor or actuator as a string depending on the use case. This description identifies Instance (e.g. description indicating the time comes from GPS, internal server clock, or another source) Explanation of table rows: ID - number used to identify the particular Resource. Operations - RW indicates that the Resource is Readable and Writable (the third possible option is E - Executable). Mandatory - not all Resources must be implemented to comply with the specification. In this case, only the Current Time Resource is mandatory. Note Current Time and Fractional Time Resources are writable, but for this exercise, we will only focus on implementing the read operation for these two resources. With our Time Object we will initiate one Instance, implement the read and write functions, make the device responsive to server read commands, and make the Object register to the server at boot.","title":"Exercise 3A: Implement the Time Object"},{"location":"academy/exercise3a/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. Python An active Coiote IoT DM user account. Completed exercise 2B from module 2","title":"Prerequisites"},{"location":"academy/exercise3a/#implement-the-time-object","text":"Let\u2019s get started by going to the Anjay-pico-client directory and creating a new directory called time_object . Go to the directory and start by generating the Object's implementation. Important Copy and paste the main.c and CMakeLists.txt files from the Anjay-pico-client/secure_communication directory to the Anjay-pico-client/time_object directory.","title":"Implement the Time Object"},{"location":"academy/exercise3a/#generate-base-source-code","text":"To generate a layout of the Object\u2019s implementation, we will use the anjay_codegen.py and lwm2m_object_registry.py scripts which are bundled with the Anjay library. The script downloads the LwM2M Object Definition and generates a skeleton of the LwM2M Object code, requiring you to only fill in actual Object logic. For more information about the script, visit the Anjay documentation . If you\u2019re using Linux or MacOS go to the Anjay-pico-client directory, and run the following commands in your command line: python3 deps/anjay/tools/lwm2m_object_registry.py --get-xml 3333 -v 1.0 > time_object/lwm2m_3333.xml python3 deps/anjay/tools/anjay_codegen.py -i time_object/lwm2m_3333.xml -o time_object/time_object.c Important If you\u2019re using Windows , use python instead of python3 . The commands use the anjay_codegen.py and lwm2m_object_registry.py scripts to generate the lwm2m_3333.xml and time_object.c files in the Anjay-pico-client/time_object . The generated files still require some modifications to make them operational. In the next part, you can find the highlighted code blocks which should be added to the time_object.c files.","title":"Generate base source code"},{"location":"academy/exercise3a/#instance-and-object-state","text":"Each Object requires at least one Object Instance which contains all the required Resources. Go to the Anjay-pico-client/time_object directory and open the file time_object.c . Start by adding some variables responsible for the state of our Time Object Instance to the time_instance_t structure. For this add a value of Application Type Resource because Current Time Resource will be using a system clock source directly, whenever a read handler is called. Note There is also a second array for keeping a backup of the Application Type - this will be required for the implementation of transactions. We will get back to it at the end of this exercise. time_object.c typedef struct time_instance_struct { anjay_iid_t iid; char application_type[64]; char application_type_backup[64]; } time_instance_t; typedef struct time_object_struct { const anjay_dm_object_def_t *def; AVS_LIST(time_instance_t) instances; } time_object_t;","title":"Instance and Object state"},{"location":"academy/exercise3a/#initiate-release-and-reset-the-instance","text":"Next up is implementing the init_instance() and release_instance() functions. These functions are used during the creation and deletion of Instances, usually performed through device work. In this case, all we have to do is initialize the Application Type with some value. We can do this by setting the first byte of time_instance_t::application_type variable to \\0 . Note To better understand the code, it is useful to know the \u201cfull names\u201d of some variables: obj - Object iid - Instance ID rid - Resource ID riid - Resource Instance ID time_object.c static int init_instance(time_instance_t *inst, anjay_iid_t iid) { assert(iid != ANJAY_ID_INVALID); inst->iid = iid; inst->application_type[0] = '\\0'; return 0; } The next function to implement is instance_reset() which resets the Instance to its default state. In our case, this means we clear the Application Type. time_object.c static int instance_reset(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); assert(obj); time_instance_t *inst = find_instance(obj, iid); assert(inst); inst->application_type[0] = '\\0'; return 0; } We can also disable the presence of one of the Resources in the list_resources() function. It is done by changing ANJAY_DM_RES_PRESENT to ANJAY_DM_RES_ABSENT in the anjay_dm_emit_res() call. This change will simplify the implementation of the Read Handler and Observe/Notifications support in the next section. time_object.c static int list_resources(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid, anjay_dm_resource_list_ctx_t *ctx) { (void) anjay; (void) obj_ptr; (void) iid; anjay_dm_emit_res(ctx, RID_CURRENT_TIME, ANJAY_DM_RES_RW, ANJAY_DM_RES_PRESENT); anjay_dm_emit_res(ctx, RID_FRACTIONAL_TIME, ANJAY_DM_RES_RW, ANJAY_DM_RES_ABSENT); anjay_dm_emit_res(ctx, RID_APPLICATION_TYPE, ANJAY_DM_RES_RW, ANJAY_DM_RES_PRESENT); return 0; } Note Using the -r command line option in anjay_codegen.py you can generate Object\u2019s stub with specified Resources only. You can run python3 deps/anjay/tools/anjay_codegen.py --help from the Anjay-pico-client direcotry for more help.","title":"Initiate, release, and reset the Instance"},{"location":"academy/exercise3a/#read-and-write-handlers","text":"Now we are ready to implement resource_read() and resource_write() handlers. These handlers will be called every time LwM2M Server performs a Read or Write operation on the Time Object. Note Read and Write operations will be described in more detail in the next module: Module 4 - Device Management using LwM2M . The resource_read() operation on Current Time resource should return current time in seconds since January 1, 1970, UTC. To get this value, we can use the preimplemented avs_time_real_now() function. The same operation on Application Type resource should return the time_instance_t::application_type string. Because we\u2019ve made the Fractional Time resource absent, we won\u2019t perform any actions on this resource during resource_read() operation. time_object.c static int resource_read(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid, anjay_rid_t rid, anjay_riid_t riid, anjay_output_ctx_t *ctx) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); assert(obj); time_instance_t *inst = find_instance(obj, iid); assert(inst); switch (rid) { case RID_CURRENT_TIME: { assert(riid == ANJAY_ID_INVALID); int64_t timestamp; if (avs_time_real_to_scalar(&timestamp, AVS_TIME_S, avs_time_real_now())) { return -1; } return anjay_ret_i64(ctx, timestamp); } case RID_APPLICATION_TYPE: assert(riid == ANJAY_ID_INVALID); return anjay_ret_string(ctx, inst->application_type); default: return ANJAY_ERR_METHOD_NOT_ALLOWED; } } As discussed, we only implement the Read operation on the Current Time Resource, so the Write operation is only implemented on the Application Type Resource. time_object.c static int resource_write(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr, anjay_iid_t iid, anjay_rid_t rid, anjay_riid_t riid, anjay_input_ctx_t *ctx) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); assert(obj); time_instance_t *inst = find_instance(obj, iid); assert(inst); switch (rid) { case RID_APPLICATION_TYPE: assert(riid == ANJAY_ID_INVALID); return anjay_get_string(ctx, inst->application_type, sizeof(inst->application_type)); default: return ANJAY_ERR_METHOD_NOT_ALLOWED; } }","title":"Read and Write handlers"},{"location":"academy/exercise3a/#initialize-the-object","text":"There is one function left to implement: time_object_create() . This function uses add_instance() to create an Object Instance, allowing data to be read by the LwM2M Server. time_object.c const anjay_dm_object_def_t **time_object_create(void) { time_object_t *obj = (time_object_t *) avs_calloc(1, sizeof(time_object_t)); if (!obj) { return NULL; } obj->def = &OBJ_DEF; time_instance_t *inst = add_instance(obj, 0); if (!inst) { avs_free(obj); return NULL; } strcpy(inst->application_type, \"Clock 0\"); return &obj->def; }","title":"Initialize the Object"},{"location":"academy/exercise3a/#register-the-object-in-anjay","text":"The last thing to do is to create the header file time_object.h for the implemented object, include the header file in the main.c and update the CMakeLists.txt file. time_object.h #pragma once #include <anjay/dm.h> const anjay_dm_object_def_t **time_object_create(void); void time_object_release(const anjay_dm_object_def_t **def); main.c void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } const anjay_dm_object_def_t **time_object = time_object_create(); if (!time_object || anjay_register_object(g_anjay, time_object)) { avs_log(main, WARNING, \"Failed to initialize time object\"); } main_loop(); time_object_release(time_object); anjay_delete(g_anjay); } Include the time_object.h file on the top of the main.c file. time_object.c #include <avsystem/commons/avs_list.h> #include <avsystem/commons/avs_log.h> #include <avsystem/commons/avs_prng.h> #include <avsystem/commons/avs_time.h> #include \"time_object.h\" #ifndef RUN_FREERTOS_ON_CORE # define RUN_FREERTOS_ON_CORE 0 #endif CMakeLists.txt cmake_minimum_required(VERSION 3.13) add_executable(time_object main.c time_object.c time_object.h ) target_link_libraries(time_object pico_stdlib anjay-pico FreeRTOS ) target_include_directories(time_object PRIVATE ${COMMON_DIR}/config ) target_compile_definitions(time_object PRIVATE WIFI_SSID=\\\"${WIFI_SSID}\\\" WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\" ENDPOINT_NAME=\\\"${ENDPOINT_NAME}\\\" PSK_IDENTITY=\\\"${PSK_IDENTITY}\\\" PSK_KEY=\\\"${PSK_KEY}\\\" ) pico_enable_stdio_usb(time_object 1) pico_enable_stdio_uart(time_object 0) pico_add_extra_outputs(time_object) At the end of the file add the mention about subdirectory to the general CMakeLists.txt . Anjay-pico-client/CMakeLists.txt add_subdirectory(time_object) Now the client is ready to be built and connected to LwM2M Server, allowing it to read the Time object.","title":"Register the Object in Anjay"},{"location":"academy/exercise3a/#support-transactional-writes","text":"Consider the following scenario: the LwM2M Server tries to write to two or more Resources simultaneously. The write-on Application Type will probably succeed, but we are sure that writing at the Current Time will fail as we didn\u2019t implement this Write operation. Without supporting transactions, the entire Write operation will fail. By default, transaction handlers are set to anjay_dm_transaction_NOOP and do nothing. To properly support Writes on the O two handlers: transaction_begin which makes a backup of the Application Type value, and transaction_rollback which reverts the Application Type to its initial value (before the Write operation is performed) for which we need the time_instance_t::application_type_backup array. Go back to the time_object.c file and update the file using the following code block: time_object.c static int transaction_begin(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); time_instance_t *element; AVS_LIST_FOREACH(element, obj->instances) { strcpy(element->application_type_backup, element->application_type); } return 0; } static int transaction_rollback(anjay_t *anjay, const anjay_dm_object_def_t *const *obj_ptr) { (void) anjay; time_object_t *obj = get_obj(obj_ptr); time_instance_t *element; AVS_LIST_FOREACH(element, obj->instances) { strcpy(element->application_type, element->application_type_backup); } return 0; } static const anjay_dm_object_def_t OBJ_DEF = { .oid = 3333, .handlers = { .list_instances = list_instances, .instance_create = instance_create, .instance_remove = instance_remove, .instance_reset = instance_reset, .list_resources = list_resources, .resource_read = resource_read, .resource_write = resource_write, .transaction_begin = transaction_begin, .transaction_validate = anjay_dm_transaction_NOOP, .transaction_commit = anjay_dm_transaction_NOOP, .transaction_rollback = transaction_rollback } };","title":"Support transactional writes"},{"location":"academy/exercise3a/#recompile-the-application-and-flash-the-board","text":"To recompile the application, go to the Anjay-pico-client/build directory. If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. -G \"MinGW Makefiles\" Run the following command in the build directory cmake --build . -j Program your board using the bootloader. Press and hold the BOOTSEL button while connecting the device through a USB cable - it should be recognized as a Mass Storage device. In the build/time_object directory, you will find the .uf2 file which has our added changes. Copy the time_object.uf2 file to the Mass Storage device directory, and wait until the process finishes - copying the firmware image may take a while.","title":"Recompile the application and flash the board"},{"location":"academy/exercise3a/#check-the-logs","text":"With the board still connected to your PC, open a serial communication program. This will help you to check if everything is working correctly. If all went well and logs show registration successfully updated , you can go to Coiote IoT Device Management platform where the Registration status should show Registered . Go to the Data Model and check if you can see the Time Object in the Defined objects section. Note The Object allows LwM2M Clients to report the current time in seconds since January 1, 1970, UTC. After refreshing the page you can see that the value changed. Good job! \ud83d\udc4f\ud83d\udc4f Now you are ready to create more difficult Objects. For this, go to the next exercise. Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Check the logs"},{"location":"academy/exercise3b/","text":"Exercise 3B: Implement the Temperature Object # Among many Objects defined in the OMA LwM2M Object and Resource Registry , Temperature is one of the most frequently used. We will implement the Temperature Object ( /3303 ) in this exercise using the LM35 temperature sensor . Anjay provides an easy-to-use API for implementing new sensor Objects as you will experience in this tutorial. Note In this exercise, we\u2019re presenting an alternative way for implementing Objects which is different from what we used in exercise 3A . The implementation in this exercise requires more manual work, but provides an easier way to implement Objects which contain many Resources. Prerequisites # A Raspberry Pi Pico W board with a USB cable A LM35 temperature sensor Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Completed exercise 2B from module 2 Tip Need help? Head over to the lwm2m-academy channel on Discord to get in touch with our experts. Implement the Temperature Object # In these steps, we are going to generate the temperature sensor files required to: Install the IPSO Temperature Object /3303 Make the Object register to the LwM2M Server at boot Make the device responsive to server read commands Generate the lm35.c file # Let\u2019s get started by going to the Anjay-pico-client directory and creating a new directory called temperature_object_lm35 .In this directory, we are creating the files: lm35.c and its header file lm35.h temperature_sensor.c and its header file temperature_sensor.h main.c CMakeLists.txt Important Copy and paste the main.c and CMakeLists.txt files from the Anjay-pico-client/secure_communication directory to the Anjay-pico-client/temperature_object_lm35 directory. In the lm35.c file we need two functions: The lm35_init() for the initialization of the ADC (Analog to Digital Converter) and the ADC GPIO pin. The temperature_get_data() for computing the temperature value from the sensor. This function will be called from the temperature_sensor.c file. lm35.c #include <hardware/adc.h> #include <hardware/gpio.h> #include <pico/stdlib.h> #include \"lm35.h\" #if (LM35_GPIO_PIN < 26) || (LM35_GPIO_PIN > 28) # error \"Invalid ADC GPIO pin selected for LM35 sensor\" #endif int lm35_init(void) { adc_init(); adc_gpio_init(LM35_GPIO_PIN); return 0; } int temperature_get_data(double *sensor_data) { adc_select_input(LM35_ADC_CHANNEL); uint adc_val = adc_read(); // read ADC value (0-4095) double milli_volts = (double) adc_val * (3300. / 4096.); // 3.3 V which is 3300 mV // divide by 4096 because of the size of ADC 12 bits (2^12 = 4096) *sensor_data = milli_volts / 10.; // product requirements return 0; } Generate the temperature_sensor.c file # To generate a layout of the Object\u2019s implementation, we need a few functions to be added to the temperature_sensor.c file: temperature_sensor_install() , temperature_sensor_update() , temperature_sensor_release() and temperature_sensor_get_value() . The most important function is responsible for getting the temperature value from the sensor. For this, we create temperature_sensor_get_value() function where we call the temperature_get_data() function (this function was created in lm35.c file). temperature_sensor.c static int temperature_sensor_get_value(anjay_iid_t iid, void *_ctx, double *value) { (void) iid; (void) _ctx; assert(value); return temperature_get_data(value); } In the temperature_sensor_install() function, we describe the initialization of the LM35 sensor, the installation of the ipso_basic_sensor parameters using sensor-friendly Anjay API, and the creation of the Instance parameters. To install an Anjay IPSO Object we can use anjay_ipso_basic_sensor_install . For Instance parameters we need to describe the proper temperature unit which is degrees Celsius (as defined in SenML RFC ), and our sensor measures temperatures which are between 0 and 100 degrees Celsius. Knowing this we can prepare an Instance and pass it to the anjay_ipso_basic_sensor_instance_add() function. Let\u2019s look at the temperature_sensor_install() function implementation: temperature_sensor.c void temperature_sensor_install(anjay_t *anjay) { if (lm35_init()) { avs_log(ipso_object, WARNING, \"Driver for LM35 could not be initialized!\"); return; } if (anjay_ipso_basic_sensor_install(anjay, 3303, NUM_INSTANCES)) { avs_log(ipso_object, WARNING, \"Object: Temperature sensor could not be installed\"); return; } if (anjay_ipso_basic_sensor_instance_add( anjay, 3303, 0, (anjay_ipso_basic_sensor_impl_t) { .unit = \"Cel\", .min_range_value = 0, .max_range_value = 100, .get_value = temperature_sensor_get_value })) { avs_log(ipso_object, WARNING, \"Instance of Temperature sensor object could not be added\"); } } This function can be divided into a three sections: Section 1 At the beginning we need to initialize our sensor so we can use it and get data from it. In our case, we call lm35_init() function, which will initialize Analog-to-Digital Converter (ADC) on Pico W and ADC GPIO Pin for LM35. if (lm35_init()) { avs_log(ipso_object, WARNING, \"Driver for LM35 could not be initialized!\"); return; } Section 2 Next, we need to create an Object\u2019s Instance with ID /3303 . Because we will use only one sensor, we create only one Instance of this Object. Note Variable NUM_INSTANCES is defined on top of the temperature_sensor.c file and its value shows the number of created Instances. If you want to add another instance you have to call anjay_ipso_basic_sensor_instance_add in the loop. if (anjay_ipso_basic_sensor_install(anjay, 3303, NUM_INSTANCES)) { avs_log(ipso_object, WARNING, \"Object: Temperature sensor could not be installed\"); return; } Section 3 After the sensor and Object initialization, we can add an instance of a sensor. Because it\u2019s the first and only instance, we will define it as /3303/0 . The sensor readings will be calculated to Celsius and the sensor can read value between 0-100 Cel degrees. To acquire sensor value, Anjay will use the temperature_sensor_get_value() function we\u2019ve created before. if (anjay_ipso_basic_sensor_instance_add( anjay, 3303, 0, (anjay_ipso_basic_sensor_impl_t) { .unit = \"Cel\", .min_range_value = 0, .max_range_value = 100, .get_value = temperature_sensor_get_value })) { avs_log(ipso_object, WARNING, \"Instance of Temperature sensor object could not be added\"); } Let's add the functions temperature_sensor_update() , and temperature_sensor_release() . To update the Instance we can use anjay_ipso_basic_sensor_instance_update . temperature_sensor.c void temperature_sensor_update(anjay_t *anjay) { anjay_ipso_basic_sensor_update(anjay, 3303, 0); } void temperature_sensor_release(void) { gpio_deinit(LM35_GPIO_PIN); } Add on top the necessary paths to the libraries used in the temperature_sensor.c and defined constant. In file you should include: temperature_sensor.c #include <assert.h> #include <stdbool.h> #include <anjay/anjay.h> #include <anjay/ipso_objects.h> #include <avsystem/commons/avs_defs.h> #include <avsystem/commons/avs_log.h> #include <hardware/gpio.h> #include \"lm35.h\" #include \"temperature_sensor.h\" #define NUM_INSTANCES 1 Register the Object in Anjay # The last things to do is creating the header files ( temperature_sensor.h and lm35.h ) for the implemented Object, registering the temperature sensor in Anjay by updating the main.c file, and updating CMakeLists.txt file. temperature_sensor.h #pragma once #include <anjay/dm.h> void temperature_sensor_install(anjay_t *anjay); void temperature_sensor_update(anjay_t *anjay); void temperature_sensor_release(void); lm35.h #pragma once #define ADC_PIN_TO_CHANNEL(Pin) ((Pin) - (26)) /* Temperature sensor ADC channel and pin */ #define LM35_GPIO_PIN 26 #define LM35_ADC_CHANNEL ADC_PIN_TO_CHANNEL(LM35_GPIO_PIN) int lm35_init(void); int temperature_get_data(double *sensor_data); main.c void temperature_sensor_update_task(__unused void *params) { const TickType_t delay = 2000 / portTICK_PERIOD_MS; while (true) { temperature_sensor_update(g_anjay); vTaskDelay(delay); } } void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } temperature_sensor_install(g_anjay); xTaskCreateStatic(temperature_sensor_update_task, \"TemperatureUpdateTask\", TEMP_UPDATE_TASK_SIZE, NULL, TEMP_UPDATE_TASK_PRIORITY, temp_update_stack, &temp_update_task_buffer); main_loop(); anjay_delete(g_anjay); temperature_sensor_release(); } Add on top the necessary paths to the libraries used in the main.c file you should include: main.c #include \"temperature_sensor.h\" #ifndef RUN_FREERTOS_ON_CORE # define RUN_FREERTOS_ON_CORE 0 #endif #define ANJAY_TASK_PRIORITY (tskIDLE_PRIORITY + 2UL) #define TEMP_UPDATE_TASK_PRIORITY (tskIDLE_PRIORITY + 1UL) #define ANJAY_TASK_SIZE (4000U) #define TEMP_UPDATE_TASK_SIZE (1000U) static anjay_t *g_anjay; static StackType_t anjay_stack[ANJAY_TASK_SIZE]; static StaticTask_t anjay_task_buffer; static StackType_t temp_update_stack[TEMP_UPDATE_TASK_SIZE]; static StaticTask_t temp_update_task_buffer; CMakeLists.txt cmake_minimum_required(VERSION 3.13) add_executable(temperature_object_lm35 main.c temperature_sensor.c lm35.c ) target_link_libraries(temperature_object_lm35 pico_stdlib hardware_adc anjay-pico FreeRTOS ) target_include_directories(temperature_object_lm35 PRIVATE ${COMMON_DIR}/config ) target_compile_definitions(temperature_object_lm35 PRIVATE WIFI_SSID=\\\"${WIFI_SSID}\\\" WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\" ENDPOINT_NAME=\\\"${ENDPOINT_NAME}\\\" PSK_IDENTITY=\\\"${PSK_IDENTITY}\\\" PSK_KEY=\\\"${PSK_KEY}\\\" ) pico_enable_stdio_usb(temperature_object_lm35 1) pico_enable_stdio_uart(temperature_object_lm35 0) pico_add_extra_outputs(temperature_object_lm35) At the end of the file add the mention about subdirectory to the general CMakeLists.txt. Anjay-pico-client/CMakeLists.txt add_subdirectory(temperature_object_lm35) Save the created code and go to the next step to build the .uf2 file. Recompile the application and flash the board # To recompile the application, go to the Anjay-pico-client/build directory. If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. -G \"MinGW Makefiles\" Run the following command in the build directory cmake --build . -j Connect the sensor to Raspberry Pi Pico W # Now, let\u2019s connect the LM35 temperature sensor to the Raspberry Pi Pico W. For this, we need 3 cables to connect the power, the ground, and the analog output of the sensor. VCC is the power supply pin of the LM35 temperature sensor which we connect to the VBUS pin of the RPI Pico W. GND is the ground pin of the LM35 temperature sensor and should be connected to the ground pin of the RPI Pico W. OUT is the temperature sensor analog output pin, the output voltage on this pin is directly proportional to the temperature. We connect this pin to the GPIO 26 pin of the RPI Pico W. Once the sensor is connected, it\u2019s time to flash the .uf2 file to the Pico. Program your board using the bootloader. Press and hold the BOOTSEL button while connecting the device through a USB cable, it should be recognized as a Mass Storage device. Go to the Anjay-pico-client/build/temperature_object_lm35 directory, copy the temperature_object_lm35.uf2 file to the Mass Storage device directory and wait until the process finishes - copying the firmware image may take a while. Check the logs # With the board still connected to your PC, open a serial communication program. This will help you to check if everything is working correctly. If all went well and logs show registration successfully updated , you can go to Coiote IoT Device Management platform where the Registration status should show Registered . In the Data model view, you should now see the Temperature Object containing all the created Resources. Well done adding the temperature Object to the Raspberry Pi Pico W \ud83d\udc4f Tip In the temperature Object you can see the Operations column. If you want to get to know what it is and how to work with this, go to the next module: Module 4 - Device Management using LwM2M . Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 3B - Implement Temperature Object"},{"location":"academy/exercise3b/#exercise-3b-implement-the-temperature-object","text":"Among many Objects defined in the OMA LwM2M Object and Resource Registry , Temperature is one of the most frequently used. We will implement the Temperature Object ( /3303 ) in this exercise using the LM35 temperature sensor . Anjay provides an easy-to-use API for implementing new sensor Objects as you will experience in this tutorial. Note In this exercise, we\u2019re presenting an alternative way for implementing Objects which is different from what we used in exercise 3A . The implementation in this exercise requires more manual work, but provides an easier way to implement Objects which contain many Resources.","title":"Exercise 3B: Implement the Temperature Object"},{"location":"academy/exercise3b/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable A LM35 temperature sensor Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Completed exercise 2B from module 2 Tip Need help? Head over to the lwm2m-academy channel on Discord to get in touch with our experts.","title":"Prerequisites"},{"location":"academy/exercise3b/#implement-the-temperature-object","text":"In these steps, we are going to generate the temperature sensor files required to: Install the IPSO Temperature Object /3303 Make the Object register to the LwM2M Server at boot Make the device responsive to server read commands","title":"Implement the Temperature Object"},{"location":"academy/exercise3b/#generate-the-lm35c-file","text":"Let\u2019s get started by going to the Anjay-pico-client directory and creating a new directory called temperature_object_lm35 .In this directory, we are creating the files: lm35.c and its header file lm35.h temperature_sensor.c and its header file temperature_sensor.h main.c CMakeLists.txt Important Copy and paste the main.c and CMakeLists.txt files from the Anjay-pico-client/secure_communication directory to the Anjay-pico-client/temperature_object_lm35 directory. In the lm35.c file we need two functions: The lm35_init() for the initialization of the ADC (Analog to Digital Converter) and the ADC GPIO pin. The temperature_get_data() for computing the temperature value from the sensor. This function will be called from the temperature_sensor.c file. lm35.c #include <hardware/adc.h> #include <hardware/gpio.h> #include <pico/stdlib.h> #include \"lm35.h\" #if (LM35_GPIO_PIN < 26) || (LM35_GPIO_PIN > 28) # error \"Invalid ADC GPIO pin selected for LM35 sensor\" #endif int lm35_init(void) { adc_init(); adc_gpio_init(LM35_GPIO_PIN); return 0; } int temperature_get_data(double *sensor_data) { adc_select_input(LM35_ADC_CHANNEL); uint adc_val = adc_read(); // read ADC value (0-4095) double milli_volts = (double) adc_val * (3300. / 4096.); // 3.3 V which is 3300 mV // divide by 4096 because of the size of ADC 12 bits (2^12 = 4096) *sensor_data = milli_volts / 10.; // product requirements return 0; }","title":"Generate the lm35.c file"},{"location":"academy/exercise3b/#generate-the-temperature_sensorc-file","text":"To generate a layout of the Object\u2019s implementation, we need a few functions to be added to the temperature_sensor.c file: temperature_sensor_install() , temperature_sensor_update() , temperature_sensor_release() and temperature_sensor_get_value() . The most important function is responsible for getting the temperature value from the sensor. For this, we create temperature_sensor_get_value() function where we call the temperature_get_data() function (this function was created in lm35.c file). temperature_sensor.c static int temperature_sensor_get_value(anjay_iid_t iid, void *_ctx, double *value) { (void) iid; (void) _ctx; assert(value); return temperature_get_data(value); } In the temperature_sensor_install() function, we describe the initialization of the LM35 sensor, the installation of the ipso_basic_sensor parameters using sensor-friendly Anjay API, and the creation of the Instance parameters. To install an Anjay IPSO Object we can use anjay_ipso_basic_sensor_install . For Instance parameters we need to describe the proper temperature unit which is degrees Celsius (as defined in SenML RFC ), and our sensor measures temperatures which are between 0 and 100 degrees Celsius. Knowing this we can prepare an Instance and pass it to the anjay_ipso_basic_sensor_instance_add() function. Let\u2019s look at the temperature_sensor_install() function implementation: temperature_sensor.c void temperature_sensor_install(anjay_t *anjay) { if (lm35_init()) { avs_log(ipso_object, WARNING, \"Driver for LM35 could not be initialized!\"); return; } if (anjay_ipso_basic_sensor_install(anjay, 3303, NUM_INSTANCES)) { avs_log(ipso_object, WARNING, \"Object: Temperature sensor could not be installed\"); return; } if (anjay_ipso_basic_sensor_instance_add( anjay, 3303, 0, (anjay_ipso_basic_sensor_impl_t) { .unit = \"Cel\", .min_range_value = 0, .max_range_value = 100, .get_value = temperature_sensor_get_value })) { avs_log(ipso_object, WARNING, \"Instance of Temperature sensor object could not be added\"); } } This function can be divided into a three sections: Section 1 At the beginning we need to initialize our sensor so we can use it and get data from it. In our case, we call lm35_init() function, which will initialize Analog-to-Digital Converter (ADC) on Pico W and ADC GPIO Pin for LM35. if (lm35_init()) { avs_log(ipso_object, WARNING, \"Driver for LM35 could not be initialized!\"); return; } Section 2 Next, we need to create an Object\u2019s Instance with ID /3303 . Because we will use only one sensor, we create only one Instance of this Object. Note Variable NUM_INSTANCES is defined on top of the temperature_sensor.c file and its value shows the number of created Instances. If you want to add another instance you have to call anjay_ipso_basic_sensor_instance_add in the loop. if (anjay_ipso_basic_sensor_install(anjay, 3303, NUM_INSTANCES)) { avs_log(ipso_object, WARNING, \"Object: Temperature sensor could not be installed\"); return; } Section 3 After the sensor and Object initialization, we can add an instance of a sensor. Because it\u2019s the first and only instance, we will define it as /3303/0 . The sensor readings will be calculated to Celsius and the sensor can read value between 0-100 Cel degrees. To acquire sensor value, Anjay will use the temperature_sensor_get_value() function we\u2019ve created before. if (anjay_ipso_basic_sensor_instance_add( anjay, 3303, 0, (anjay_ipso_basic_sensor_impl_t) { .unit = \"Cel\", .min_range_value = 0, .max_range_value = 100, .get_value = temperature_sensor_get_value })) { avs_log(ipso_object, WARNING, \"Instance of Temperature sensor object could not be added\"); } Let's add the functions temperature_sensor_update() , and temperature_sensor_release() . To update the Instance we can use anjay_ipso_basic_sensor_instance_update . temperature_sensor.c void temperature_sensor_update(anjay_t *anjay) { anjay_ipso_basic_sensor_update(anjay, 3303, 0); } void temperature_sensor_release(void) { gpio_deinit(LM35_GPIO_PIN); } Add on top the necessary paths to the libraries used in the temperature_sensor.c and defined constant. In file you should include: temperature_sensor.c #include <assert.h> #include <stdbool.h> #include <anjay/anjay.h> #include <anjay/ipso_objects.h> #include <avsystem/commons/avs_defs.h> #include <avsystem/commons/avs_log.h> #include <hardware/gpio.h> #include \"lm35.h\" #include \"temperature_sensor.h\" #define NUM_INSTANCES 1","title":"Generate the temperature_sensor.c file"},{"location":"academy/exercise3b/#register-the-object-in-anjay","text":"The last things to do is creating the header files ( temperature_sensor.h and lm35.h ) for the implemented Object, registering the temperature sensor in Anjay by updating the main.c file, and updating CMakeLists.txt file. temperature_sensor.h #pragma once #include <anjay/dm.h> void temperature_sensor_install(anjay_t *anjay); void temperature_sensor_update(anjay_t *anjay); void temperature_sensor_release(void); lm35.h #pragma once #define ADC_PIN_TO_CHANNEL(Pin) ((Pin) - (26)) /* Temperature sensor ADC channel and pin */ #define LM35_GPIO_PIN 26 #define LM35_ADC_CHANNEL ADC_PIN_TO_CHANNEL(LM35_GPIO_PIN) int lm35_init(void); int temperature_get_data(double *sensor_data); main.c void temperature_sensor_update_task(__unused void *params) { const TickType_t delay = 2000 / portTICK_PERIOD_MS; while (true) { temperature_sensor_update(g_anjay); vTaskDelay(delay); } } void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } temperature_sensor_install(g_anjay); xTaskCreateStatic(temperature_sensor_update_task, \"TemperatureUpdateTask\", TEMP_UPDATE_TASK_SIZE, NULL, TEMP_UPDATE_TASK_PRIORITY, temp_update_stack, &temp_update_task_buffer); main_loop(); anjay_delete(g_anjay); temperature_sensor_release(); } Add on top the necessary paths to the libraries used in the main.c file you should include: main.c #include \"temperature_sensor.h\" #ifndef RUN_FREERTOS_ON_CORE # define RUN_FREERTOS_ON_CORE 0 #endif #define ANJAY_TASK_PRIORITY (tskIDLE_PRIORITY + 2UL) #define TEMP_UPDATE_TASK_PRIORITY (tskIDLE_PRIORITY + 1UL) #define ANJAY_TASK_SIZE (4000U) #define TEMP_UPDATE_TASK_SIZE (1000U) static anjay_t *g_anjay; static StackType_t anjay_stack[ANJAY_TASK_SIZE]; static StaticTask_t anjay_task_buffer; static StackType_t temp_update_stack[TEMP_UPDATE_TASK_SIZE]; static StaticTask_t temp_update_task_buffer; CMakeLists.txt cmake_minimum_required(VERSION 3.13) add_executable(temperature_object_lm35 main.c temperature_sensor.c lm35.c ) target_link_libraries(temperature_object_lm35 pico_stdlib hardware_adc anjay-pico FreeRTOS ) target_include_directories(temperature_object_lm35 PRIVATE ${COMMON_DIR}/config ) target_compile_definitions(temperature_object_lm35 PRIVATE WIFI_SSID=\\\"${WIFI_SSID}\\\" WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\" ENDPOINT_NAME=\\\"${ENDPOINT_NAME}\\\" PSK_IDENTITY=\\\"${PSK_IDENTITY}\\\" PSK_KEY=\\\"${PSK_KEY}\\\" ) pico_enable_stdio_usb(temperature_object_lm35 1) pico_enable_stdio_uart(temperature_object_lm35 0) pico_add_extra_outputs(temperature_object_lm35) At the end of the file add the mention about subdirectory to the general CMakeLists.txt. Anjay-pico-client/CMakeLists.txt add_subdirectory(temperature_object_lm35) Save the created code and go to the next step to build the .uf2 file.","title":"Register the Object in Anjay"},{"location":"academy/exercise3b/#recompile-the-application-and-flash-the-board","text":"To recompile the application, go to the Anjay-pico-client/build directory. If you\u2019re using Linux or Mac , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. If you\u2019re using Windows , run the following command: cmake -DCMAKE_BUILD_TYPE=Debug -DWIFI_SSID=\"<ssid>\" -DWIFI_PASSWORD=\"<pass>\" -DENDPOINT_NAME=\"<endpoint_name>\" -DPSK_IDENTITY=\"<identity>\" -DPSK_KEY=\"<psk>\" .. -G \"MinGW Makefiles\" Run the following command in the build directory cmake --build . -j","title":"Recompile the application and flash the board"},{"location":"academy/exercise3b/#connect-the-sensor-to-raspberry-pi-pico-w","text":"Now, let\u2019s connect the LM35 temperature sensor to the Raspberry Pi Pico W. For this, we need 3 cables to connect the power, the ground, and the analog output of the sensor. VCC is the power supply pin of the LM35 temperature sensor which we connect to the VBUS pin of the RPI Pico W. GND is the ground pin of the LM35 temperature sensor and should be connected to the ground pin of the RPI Pico W. OUT is the temperature sensor analog output pin, the output voltage on this pin is directly proportional to the temperature. We connect this pin to the GPIO 26 pin of the RPI Pico W. Once the sensor is connected, it\u2019s time to flash the .uf2 file to the Pico. Program your board using the bootloader. Press and hold the BOOTSEL button while connecting the device through a USB cable, it should be recognized as a Mass Storage device. Go to the Anjay-pico-client/build/temperature_object_lm35 directory, copy the temperature_object_lm35.uf2 file to the Mass Storage device directory and wait until the process finishes - copying the firmware image may take a while.","title":"Connect the sensor to Raspberry Pi Pico W"},{"location":"academy/exercise3b/#check-the-logs","text":"With the board still connected to your PC, open a serial communication program. This will help you to check if everything is working correctly. If all went well and logs show registration successfully updated , you can go to Coiote IoT Device Management platform where the Registration status should show Registered . In the Data model view, you should now see the Temperature Object containing all the created Resources. Well done adding the temperature Object to the Raspberry Pi Pico W \ud83d\udc4f Tip In the temperature Object you can see the Operations column. If you want to get to know what it is and how to work with this, go to the next module: Module 4 - Device Management using LwM2M . Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Check the logs"},{"location":"academy/exercise4a/","text":"Exercise 4A: LwM2M Operations # Some Resources represent values that change over time, like sensor readings. The LwM2M Server may request the Client to send notification messages at regular intervals or when values exceed a certain threshold. To do so, the Server can send an Observe Operation to the device, after which the device responds with periodic Notify messages containing the values of the observed Object, Object Instance, or Resource. Next to the Observe Operation, the Server can request the Client to send the value of a specific Resource using the Read Operation. This operations is performed only once. In this exercise, we start sending LwM2M Operations to the Client to monitor the Temperature Object implemented in the previous 3B exercise. Prerequisites # A Raspberry Pi Pico W board with a USB cable A LM35 temperature sensor Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Completed exercise 3B from module 3 Notifications support # Let\u2019s get started by connecting our Raspberry Pi Pico W to the computer via a USB cable. Open a serial communication program to watch the device logs and go to the Coiote IoT Device Management platform to check if your device has connected successfully. If so, you are ready to perform your first Observe/Read operations on your LwM2M Device (a.k.a. The LwM2M Client). Go to Coiote IoT DM , select the Data model tab and open the Temperature Object /3303 . Find in the Operations column three different icons representing three different Operations. Read - The Read operation requests the Client to send its latest value. The operation can be invoked on an Object, Object Instance, Resource or Resource Instance. Observe - After invoking the Observe operation, the Server requests the Client to send Notify messages periodically based on configurable time intervals or triggers. Execute - Execute operation invokes an action or operation on a Resource. For example instructing a device to reset, reboot, upgrade its firmware or just turn some LED on. Note There is no Write operation visible here, because the Sensor Objects do not have any \u201cwritable\u201d resources (i.e. resources into which you can write your value). Such operation can be found in e.g. Time Object\u2019s Application Type resource. Read Operation # The Server can perform a LwM2M Read operation on a Resource, Object Instance or a whole Object. To do this, click the circular icon in the Operations column (or use the 3 vertical dots menu in case of Objects and Object Instances). You can see that each time you perform a Read Operation on a specific Resource, its value is updated because the Client has been instructed to send the newest value to the server. Observe Operation # The Server can set observations on a Resource, Object Instance or a whole Object. To set an observation on the Sensor Value Resource /3303/*/5700 , click an eye icon to open the Set observation panel. Change the default \u201cNot more often than once every\u201d and \u201cNot more often than once every\u201d values. Not more often than once every - the minimum time in seconds between two notifications. At least once every - the maximum time in seconds between two notifications. The notification is sent even if the value hasn't changed. To set an observation on an Object or Object Instance, click on the 3 vertical dots menu and select Set observation . You can see that after each time interval which you set in the observation menu, the value is changed as a result of the Client sending an update. Execute Operation # To perform a LwM2M EXECUTE operation on a resource, click the cogwheel icon in the Operations column and select Execute , or Execute with parameters to set additional EXECUTE conditions. Well done! You remotely managed your IoT devices using the LwM2M Operations Read and Observe \ud83d\udc4f Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 4A - Read & Observe"},{"location":"academy/exercise4a/#exercise-4a-lwm2m-operations","text":"Some Resources represent values that change over time, like sensor readings. The LwM2M Server may request the Client to send notification messages at regular intervals or when values exceed a certain threshold. To do so, the Server can send an Observe Operation to the device, after which the device responds with periodic Notify messages containing the values of the observed Object, Object Instance, or Resource. Next to the Observe Operation, the Server can request the Client to send the value of a specific Resource using the Read Operation. This operations is performed only once. In this exercise, we start sending LwM2M Operations to the Client to monitor the Temperature Object implemented in the previous 3B exercise.","title":"Exercise 4A: LwM2M Operations"},{"location":"academy/exercise4a/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable A LM35 temperature sensor Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account. Completed exercise 3B from module 3","title":"Prerequisites"},{"location":"academy/exercise4a/#notifications-support","text":"Let\u2019s get started by connecting our Raspberry Pi Pico W to the computer via a USB cable. Open a serial communication program to watch the device logs and go to the Coiote IoT Device Management platform to check if your device has connected successfully. If so, you are ready to perform your first Observe/Read operations on your LwM2M Device (a.k.a. The LwM2M Client). Go to Coiote IoT DM , select the Data model tab and open the Temperature Object /3303 . Find in the Operations column three different icons representing three different Operations. Read - The Read operation requests the Client to send its latest value. The operation can be invoked on an Object, Object Instance, Resource or Resource Instance. Observe - After invoking the Observe operation, the Server requests the Client to send Notify messages periodically based on configurable time intervals or triggers. Execute - Execute operation invokes an action or operation on a Resource. For example instructing a device to reset, reboot, upgrade its firmware or just turn some LED on. Note There is no Write operation visible here, because the Sensor Objects do not have any \u201cwritable\u201d resources (i.e. resources into which you can write your value). Such operation can be found in e.g. Time Object\u2019s Application Type resource.","title":"Notifications support"},{"location":"academy/exercise4a/#read-operation","text":"The Server can perform a LwM2M Read operation on a Resource, Object Instance or a whole Object. To do this, click the circular icon in the Operations column (or use the 3 vertical dots menu in case of Objects and Object Instances). You can see that each time you perform a Read Operation on a specific Resource, its value is updated because the Client has been instructed to send the newest value to the server.","title":"Read Operation"},{"location":"academy/exercise4a/#observe-operation","text":"The Server can set observations on a Resource, Object Instance or a whole Object. To set an observation on the Sensor Value Resource /3303/*/5700 , click an eye icon to open the Set observation panel. Change the default \u201cNot more often than once every\u201d and \u201cNot more often than once every\u201d values. Not more often than once every - the minimum time in seconds between two notifications. At least once every - the maximum time in seconds between two notifications. The notification is sent even if the value hasn't changed. To set an observation on an Object or Object Instance, click on the 3 vertical dots menu and select Set observation . You can see that after each time interval which you set in the observation menu, the value is changed as a result of the Client sending an update.","title":"Observe Operation"},{"location":"academy/exercise4a/#execute-operation","text":"To perform a LwM2M EXECUTE operation on a resource, click the cogwheel icon in the Operations column and select Execute , or Execute with parameters to set additional EXECUTE conditions. Well done! You remotely managed your IoT devices using the LwM2M Operations Read and Observe \ud83d\udc4f Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Execute Operation"},{"location":"academy/exercise4b/","text":"Exercise 4B: LwM2M Send # In this exercise, we implement the LwM2M Send Operation for the Temperature Object and adjust the time interval between two Send Operations. The Send Operation is used by the LwM2M Client to send data without an explicit request from the LwM2M Server (unlike the Read Operation). Prerequisites # A Raspberry Pi Pico W board with a USB cable A LM35 temperature sensor Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account Completed exercise 3B from module 3 Completed exercise 4A from module 4 Send Operation support # Let\u2019s start by going to the Anjay-pico-client/temperature_object_lm35 directory. We will update the completed implementation to have the possibility to support Send Operations. Using a serial communication program we can monitor the LwM2M Client\u2019s behavior after making our changes. For doing so, we need to add code to our files. Temperature_sensor files # Let\u2019s start with the temperature_sensor.c file where we define the Temperature Object\u2019s Resources and add two functions: send_finished_handler() and temperature_object_lm35_send() . Let\u2019s start by defining all available Resources in temperature_sensor.c . temperature_sensor.c #include \"lm35.h\" #include \"temperature_sensor.h\" #define NUM_INSTANCES 1 /** * Min Measured Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The minimum value measured by the sensor since power ON or reset. */ # define RID_MIN_MEASURED_VALUE 5601 /** * Max Measured Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The maximum value measured by the sensor since power ON or reset. */ # define RID_MAX_MEASURED_VALUE 5602 /** * Min Range Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The minimum value that can be measured the sensor. */ # define RID_MIN_RANGE_VALUE 5603 /** * Max Range Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The maximum value that can be measured by the sensor. */ # define RID_MAX_RANGE_VALUE 5604 /** * Reset Min and Max Measured Values: E, Single, Optional * type: N/A, range: N/A, unit: N/A * Reset the Min and Max Measured Values to Current Value. */ # define RID_RESET_MIN_AND_MAX_MEASURED_VALUES 5605 /** * Sensor Value: R, Single, Mandatory * type: float, range: N/A, unit: N/A * Last or Current Measured Value from the Sensor. */ # define RID_SENSOR_VALUE 5700 /** * Sensor Units: R, Single, Optional * type: string, range: N/A, unit: N/A * Measurement Units Definition. */ # define RID_SENSOR_UNITS 5701 Next, at the end of the temperature_sensor.c file, add a handler which is called automatically each time a Send operation finishes, to send logs to the serial communication program about the operation result. temperature_sensor.c static void send_finished_handler(anjay_t *anjay, anjay_ssid_t ssid, const anjay_send_batch_t *batch, int result, void *data) { (void) anjay; (void) ssid; (void) batch; (void) data; if (result != ANJAY_SEND_SUCCESS) { avs_log(temperature_sensor, ERROR, \"Send failed, result: %d\", result); } else { avs_log(temperature_sensor, INFO, \"Send operation successful\"); } } It\u2019s time to create a function with the Send Operation itself. Data messages are created using anjay_send_batch_builder which builds the payload to be sent to the LwM2M Server. The payload can consist of multiple values from different resources. Calling the temperature_object_lm35_send() function does not send a batch immediately, but schedules a task to be run on the next iteration of the Anjay\u2019s event loop. temperature_sensor.c void temperature_object_lm35_send(anjay_t *anjay) { if (!anjay) { return; } const anjay_ssid_t server_ssid = 1; // Allocate new batch builder. anjay_send_batch_builder_t *builder = anjay_send_batch_builder_new(); if (!builder) { avs_log(temperature_sensor, ERROR, \"Failed to allocate batch builder\"); return; } int res = 0; for (int it = 0; it < NUM_INSTANCES; it++) { // Add current values of resources from Temperature Object. if (anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MIN_MEASURED_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MAX_MEASURED_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MIN_RANGE_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MAX_RANGE_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_SENSOR_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_SENSOR_UNITS)) { anjay_send_batch_builder_cleanup(&builder); avs_log(temperature_sensor, ERROR, \"Failed to add batch data, result: %d\", res); return; } } // After adding all values, compile our batch for sending. anjay_send_batch_t *batch = anjay_send_batch_builder_compile(&builder); if (!batch) { anjay_send_batch_builder_cleanup(&builder); avs_log(temperature_sensor, ERROR, \"Batch compile failed\"); return; } // Schedule our send to be run on next `anjay_sched_run()` call. res = anjay_send(anjay, server_ssid, batch, send_finished_handler, NULL); if (res) { avs_log(temperature_sensor, ERROR, \"Failed to send, result: %d\", res); } // After scheduling, we can release our batch. anjay_send_batch_release(&batch); } Add on top the necessary paths to the libraries used in the temperature_sensor.c and defined constant. temperature_sensor.c #include <assert.h> #include <stdbool.h> #include <anjay/anjay.h> #include <anjay/ipso_objects.h> #include <anjay/lwm2m_send.h> #include <avsystem/commons/avs_defs.h> #include <avsystem/commons/avs_log.h> #include <avsystem/commons/avs_list.h> #include <hardware/gpio.h> #include \"lm35.h\" #include \"temperature_sensor.h\" #define NUM_INSTANCES 1 Declare the function in the temperature_sensor.h file. temperature_sensor.h #pragma once #include <anjay/dm.h> void temperature_sensor_install(anjay_t *anjay); void temperature_sensor_update(anjay_t *anjay); void temperature_sensor_release(void); void temperature_object_lm35_send(anjay_t *anjay); Update Anjay task # Next up is updating the main.c file. We need to create a temperature_object struct and send_job() function to periodically issue a Send message. Note Optionally update the time interval from 10 seconds to any interval you prefer. main.c #define ANJAY_TASK_SIZE (4000U) #define TEMP_UPDATE_TASK_SIZE (1000U) static anjay_t *g_anjay; static StackType_t anjay_stack[ANJAY_TASK_SIZE]; static StaticTask_t anjay_task_buffer; static StackType_t temp_update_stack[TEMP_UPDATE_TASK_SIZE]; static StaticTask_t temp_update_task_buffer; typedef struct { anjay_t *anjay; } temperature_object_lm35_job_args_t; static void send_job(avs_sched_t *sched, const void *args_ptr) { const temperature_object_lm35_job_args_t *args = (const temperature_object_lm35_job_args_t *) args_ptr; temperature_object_lm35_send(args->anjay); // Schedule run of the same function after 10 seconds AVS_SCHED_DELAYED(sched, NULL, avs_time_duration_from_scalar(10, AVS_TIME_S), send_job, args, sizeof(*args)); } Now let\u2019s call the send_job() function in anjay_task() . main.c void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } temperature_sensor_install(g_anjay); xTaskCreateStatic(temperature_sensor_update_task, \"TemperatureUpdateTask\", TEMP_UPDATE_TASK_SIZE, NULL, TEMP_UPDATE_TASK_PRIORITY, temp_update_stack, &temp_update_task_buffer); send_job(anjay_get_scheduler(g_anjay), &(const temperature_object_lm35_job_args_t) { .anjay = g_anjay, }); main_loop(); anjay_delete(g_anjay); temperature_sensor_release(); } Save the created code, recompile the application and flash the board. Validate the new firmware # After flashing the board, open up your serial communication program and wait for the event \u201cSend Operation successful\u201d . This event shows that the Client performs regular Send Operations containing Temperature data. INFO [temperature_sensor][/temperature_object_lm35_send/temperature_sensor.c:135]: Send successful Now, open Coiote IoT Device Management platform and validate if the Resources are updated after each configured time interval. Well done! You\u2019ve added support for Send Operations in your firmware \ud83d\udc4f Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Exercise 4B - LwM2M Send"},{"location":"academy/exercise4b/#exercise-4b-lwm2m-send","text":"In this exercise, we implement the LwM2M Send Operation for the Temperature Object and adjust the time interval between two Send Operations. The Send Operation is used by the LwM2M Client to send data without an explicit request from the LwM2M Server (unlike the Read Operation).","title":"Exercise 4B: LwM2M Send"},{"location":"academy/exercise4b/#prerequisites","text":"A Raspberry Pi Pico W board with a USB cable A LM35 temperature sensor Installed minicom (for Linux), RealTerm , PuTTy (for Windows), or another serial communication program. An active Coiote IoT DM user account Completed exercise 3B from module 3 Completed exercise 4A from module 4","title":"Prerequisites"},{"location":"academy/exercise4b/#send-operation-support","text":"Let\u2019s start by going to the Anjay-pico-client/temperature_object_lm35 directory. We will update the completed implementation to have the possibility to support Send Operations. Using a serial communication program we can monitor the LwM2M Client\u2019s behavior after making our changes. For doing so, we need to add code to our files.","title":"Send Operation support"},{"location":"academy/exercise4b/#temperature_sensor-files","text":"Let\u2019s start with the temperature_sensor.c file where we define the Temperature Object\u2019s Resources and add two functions: send_finished_handler() and temperature_object_lm35_send() . Let\u2019s start by defining all available Resources in temperature_sensor.c . temperature_sensor.c #include \"lm35.h\" #include \"temperature_sensor.h\" #define NUM_INSTANCES 1 /** * Min Measured Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The minimum value measured by the sensor since power ON or reset. */ # define RID_MIN_MEASURED_VALUE 5601 /** * Max Measured Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The maximum value measured by the sensor since power ON or reset. */ # define RID_MAX_MEASURED_VALUE 5602 /** * Min Range Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The minimum value that can be measured the sensor. */ # define RID_MIN_RANGE_VALUE 5603 /** * Max Range Value: R, Single, Optional * type: float, range: N/A, unit: N/A * The maximum value that can be measured by the sensor. */ # define RID_MAX_RANGE_VALUE 5604 /** * Reset Min and Max Measured Values: E, Single, Optional * type: N/A, range: N/A, unit: N/A * Reset the Min and Max Measured Values to Current Value. */ # define RID_RESET_MIN_AND_MAX_MEASURED_VALUES 5605 /** * Sensor Value: R, Single, Mandatory * type: float, range: N/A, unit: N/A * Last or Current Measured Value from the Sensor. */ # define RID_SENSOR_VALUE 5700 /** * Sensor Units: R, Single, Optional * type: string, range: N/A, unit: N/A * Measurement Units Definition. */ # define RID_SENSOR_UNITS 5701 Next, at the end of the temperature_sensor.c file, add a handler which is called automatically each time a Send operation finishes, to send logs to the serial communication program about the operation result. temperature_sensor.c static void send_finished_handler(anjay_t *anjay, anjay_ssid_t ssid, const anjay_send_batch_t *batch, int result, void *data) { (void) anjay; (void) ssid; (void) batch; (void) data; if (result != ANJAY_SEND_SUCCESS) { avs_log(temperature_sensor, ERROR, \"Send failed, result: %d\", result); } else { avs_log(temperature_sensor, INFO, \"Send operation successful\"); } } It\u2019s time to create a function with the Send Operation itself. Data messages are created using anjay_send_batch_builder which builds the payload to be sent to the LwM2M Server. The payload can consist of multiple values from different resources. Calling the temperature_object_lm35_send() function does not send a batch immediately, but schedules a task to be run on the next iteration of the Anjay\u2019s event loop. temperature_sensor.c void temperature_object_lm35_send(anjay_t *anjay) { if (!anjay) { return; } const anjay_ssid_t server_ssid = 1; // Allocate new batch builder. anjay_send_batch_builder_t *builder = anjay_send_batch_builder_new(); if (!builder) { avs_log(temperature_sensor, ERROR, \"Failed to allocate batch builder\"); return; } int res = 0; for (int it = 0; it < NUM_INSTANCES; it++) { // Add current values of resources from Temperature Object. if (anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MIN_MEASURED_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MAX_MEASURED_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MIN_RANGE_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_MAX_RANGE_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_SENSOR_VALUE) || anjay_send_batch_data_add_current(builder, anjay, 3303, it, RID_SENSOR_UNITS)) { anjay_send_batch_builder_cleanup(&builder); avs_log(temperature_sensor, ERROR, \"Failed to add batch data, result: %d\", res); return; } } // After adding all values, compile our batch for sending. anjay_send_batch_t *batch = anjay_send_batch_builder_compile(&builder); if (!batch) { anjay_send_batch_builder_cleanup(&builder); avs_log(temperature_sensor, ERROR, \"Batch compile failed\"); return; } // Schedule our send to be run on next `anjay_sched_run()` call. res = anjay_send(anjay, server_ssid, batch, send_finished_handler, NULL); if (res) { avs_log(temperature_sensor, ERROR, \"Failed to send, result: %d\", res); } // After scheduling, we can release our batch. anjay_send_batch_release(&batch); } Add on top the necessary paths to the libraries used in the temperature_sensor.c and defined constant. temperature_sensor.c #include <assert.h> #include <stdbool.h> #include <anjay/anjay.h> #include <anjay/ipso_objects.h> #include <anjay/lwm2m_send.h> #include <avsystem/commons/avs_defs.h> #include <avsystem/commons/avs_log.h> #include <avsystem/commons/avs_list.h> #include <hardware/gpio.h> #include \"lm35.h\" #include \"temperature_sensor.h\" #define NUM_INSTANCES 1 Declare the function in the temperature_sensor.h file. temperature_sensor.h #pragma once #include <anjay/dm.h> void temperature_sensor_install(anjay_t *anjay); void temperature_sensor_update(anjay_t *anjay); void temperature_sensor_release(void); void temperature_object_lm35_send(anjay_t *anjay);","title":"Temperature_sensor files"},{"location":"academy/exercise4b/#update-anjay-task","text":"Next up is updating the main.c file. We need to create a temperature_object struct and send_job() function to periodically issue a Send message. Note Optionally update the time interval from 10 seconds to any interval you prefer. main.c #define ANJAY_TASK_SIZE (4000U) #define TEMP_UPDATE_TASK_SIZE (1000U) static anjay_t *g_anjay; static StackType_t anjay_stack[ANJAY_TASK_SIZE]; static StaticTask_t anjay_task_buffer; static StackType_t temp_update_stack[TEMP_UPDATE_TASK_SIZE]; static StaticTask_t temp_update_task_buffer; typedef struct { anjay_t *anjay; } temperature_object_lm35_job_args_t; static void send_job(avs_sched_t *sched, const void *args_ptr) { const temperature_object_lm35_job_args_t *args = (const temperature_object_lm35_job_args_t *) args_ptr; temperature_object_lm35_send(args->anjay); // Schedule run of the same function after 10 seconds AVS_SCHED_DELAYED(sched, NULL, avs_time_duration_from_scalar(10, AVS_TIME_S), send_job, args, sizeof(*args)); } Now let\u2019s call the send_job() function in anjay_task() . main.c void anjay_task(__unused void *params) { init_wifi(); anjay_configuration_t config = { .endpoint_name = ENDPOINT_NAME, .in_buffer_size = 2048, .out_buffer_size = 2048, .msg_cache_size = 2048, }; if (!(g_anjay = anjay_new(&config))) { avs_log(main, ERROR, \"Could not create Anjay object\"); exit(1); } if (setup_security_object() || setup_server_object()) { avs_log(main, ERROR, \"Failed to initialize basic objects\"); exit(1); } temperature_sensor_install(g_anjay); xTaskCreateStatic(temperature_sensor_update_task, \"TemperatureUpdateTask\", TEMP_UPDATE_TASK_SIZE, NULL, TEMP_UPDATE_TASK_PRIORITY, temp_update_stack, &temp_update_task_buffer); send_job(anjay_get_scheduler(g_anjay), &(const temperature_object_lm35_job_args_t) { .anjay = g_anjay, }); main_loop(); anjay_delete(g_anjay); temperature_sensor_release(); } Save the created code, recompile the application and flash the board.","title":"Update Anjay task"},{"location":"academy/exercise4b/#validate-the-new-firmware","text":"After flashing the board, open up your serial communication program and wait for the event \u201cSend Operation successful\u201d . This event shows that the Client performs regular Send Operations containing Temperature data. INFO [temperature_sensor][/temperature_object_lm35_send/temperature_sensor.c:135]: Send successful Now, open Coiote IoT Device Management platform and validate if the Resources are updated after each configured time interval. Well done! You\u2019ve added support for Send Operations in your firmware \ud83d\udc4f Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Validate the new firmware"},{"location":"academy/exercise5/","text":"Graduation Project # Congratulations on your progress in the LwM2M Academy! As you approach graduation, one final task awaits: bringing your IoT idea to life using the LwM2M standard. Your graduation project involves building an application that utilizes the LwM2M standard and the Coiote IoT Device Management platform. Whether you choose the Raspberry Pi Pico W or any other IoT device, your task is to effectively gather sensor data and establish a cloud connection. Once your project is complete, please publish the final result on our AVSystem Discord or share it publicly via platforms such as Hackster, Instructables, or your own social media. Best of luck with this final step. We can't wait to see how you apply your acquired knowledge to create a compelling end-to-end application. Useful Resources # Getting Started guides containing detailed documentation on using different IoT development kits AVSystem Discord for support and for submitting your graduation project Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Graduation Project"},{"location":"academy/exercise5/#graduation-project","text":"Congratulations on your progress in the LwM2M Academy! As you approach graduation, one final task awaits: bringing your IoT idea to life using the LwM2M standard. Your graduation project involves building an application that utilizes the LwM2M standard and the Coiote IoT Device Management platform. Whether you choose the Raspberry Pi Pico W or any other IoT device, your task is to effectively gather sensor data and establish a cloud connection. Once your project is complete, please publish the final result on our AVSystem Discord or share it publicly via platforms such as Hackster, Instructables, or your own social media. Best of luck with this final step. We can't wait to see how you apply your acquired knowledge to create a compelling end-to-end application.","title":"Graduation Project"},{"location":"academy/exercise5/#useful-resources","text":"Getting Started guides containing detailed documentation on using different IoT development kits AVSystem Discord for support and for submitting your graduation project Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Useful Resources"},{"location":"academy/module1/","text":"Module 1: Introduction to LwM2M # Today\u2019s challenges Today\u2019s challenges when developing IoT solutions # One of today\u2019s biggest challenges in IoT is interoperability. There are a plethora of devices, all of which solve specific problems with the help of sensors, actuators, communication modules, and local processing. Due to a lack of standards, devices use different communication protocols, data formats, and device management mechanisms. As a result, unique processes need to be implemented in order to make sense of the devices\u2019 data and manage them remotely over time. Once the device data reaches the cloud, it becomes challenging to interpret as each device uses a unique data format. Device management is usually embedded into the application firmware, and configurations can be updated using specific commands sent from the server, making it complex to implement when working with various devices. Finally, firmware updates are very challenging to implement. If FOTA (Firmware Over The Air) is implemented at all, it is custom built for each project. Managing a mixed fleet of devices and integrating the data into one platform is hard to realize. Lightweight M2M # To answer the industry\u2019s need for an easy, fast, and power-efficient device management mechanism, the OMA SpecWorks created a communication standard for IoT devices called Lightweight Machine-to-Machine (LwM2M) . The LwM2M protocol, released in 2017, was designed to simplify messaging and device management for resource-constrained IoT devices. The LwM2M optimizes bandwidth efficient consumption by using space-efficient binary payloads and introduces support for wireless standards such as NB-IoT, LTE-M, Bluetooth, WiFi, and SMS transport. It includes a uniform data format for easy interpretation of data, standardized device management processes, and support for FOTA (Firmware Over The Air). When IoT devices adhere to the LwM2M standard, cloud applications can easily interpret data, and devices independent of the manufacturer, hardware, or software can be managed the same way. LwM2M architecture # The architecture of a LwM2M application contains 3 components: The LwM2M Client runs on the end device and ensures a secure connection with the LwM2M Server and optionally Bootstrap Server. All data sent from the clients is formatted as dictated by the LwM2M standard. The LwM2M Server manages devices including their configurations and firmware in the cloud. It also captures and stores all telemetry data sent from the LwM2M Clients. The LwM2M Bootstrap Server is a cloud service to authenticate and provision LwM2M Clients. This is an optional component used to improve the application\u2019s security. LwM2M data format # In order to manage devices and process their data, components of IoT systems must be able to \u201cspeak\u201d the same language. This not only relates to the communication protocol but also to the data structure. The LwM2M standard realizes an interoperable data structure through the use of its LwM2M Object Model . LwM2M Objects represent configurations, functionalities, and sensors of IoT devices. By structuring the Objects in a particular manner, a language is created which both the LwM2M Client and the LwM2M Server can understand. This language is organized in (most situations as) a three-level tree comprising Objects which consist of Object Instances , and Object Instances consist of Resources . Entities on each of those levels are identified with numerical identifiers in the range 0-65534 and defined by the OMA in the LwM2M Registry . The language follows a sequence containing the Object ID, Object Instance ID, and Resource ID. To be more precise, a URI is made up of three unsigned 16-bit integers that are separated by the ' / ' character and look like this: /<object_ID>/<object_instance_ID>/<resource_ID> For example, a GNSS module generates location data containing latitude and longitude values. The URI of the latitude is: /6/0/0 , and the URI of the longitude is: /6/0/1 . 6 \u2192 The ID of the Location Object 0 \u200b\u200b\u2192 Instance 0 of the Location Object 0 \u2192 The ID of the latitude Resource 1 \u2192 The ID of the longitude Resource Objects - Devices contain different building blocks, each of these blocks is represented by an Object and identified by an Object ID . For example, the Firmware Update Object is used to invoke and track the status of the firmware update process. Objects can also describe the connectivity technology (e.g. cellular or WiFi), device information (serial number, manufacturer, firmware version), sensors (temperature, air quality), or peripherals (GPS, LEDs, buzzers). Object Instances - Some Objects are described as \u201csingle-instance\u201d. Such Objects have exactly one Instance with the identifier /0 . Examples are the Device Object which describes the device itself, and the Firmware Update Object which is used to perform firmware upgrades. Other Objects have multiple Instances. Examples of such Objects include the Object that manages connections to LwM2M Servers as multiple LwM2M Servers can be configured. Devices can also use Object Instances when using multiple SIMs with different APN profiles. When devices contain multiple identical sensors, Object Instances are used to distinguish the different sensors. Resources - Object Instances have one or multiple Resources. Resources can be represented as certain data types such as string, integer, Boolean, or float. For example, the \u201cDevice\u201d Object has multiple Resources such as the manufacturer , serial number , and firmware version . The \u201cLocation\u201d Object has the Resources' latitude, longitude , and altitude . Resource Instances - In some cases, Resources have multiple Resource Instances which turns the language into a four-level tree. For example: Device Object /3 includes Resource /6 : Available Power Sources. The different Resource Instances describe the different power sources: 0 : DC power 1 : Internal Battery 2 : External Battery 3 : Fuel Cell 4 : Power over Ethernet 5 : USB 6 : AC (Mains) power 7 : Solar To describe the availability of solar power, the URI becomes: /3/0/6/7 Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Theory Module 1"},{"location":"academy/module1/#module-1-introduction-to-lwm2m","text":"Today\u2019s challenges","title":"Module 1: Introduction to LwM2M"},{"location":"academy/module1/#todays-challenges-when-developing-iot-solutions","text":"One of today\u2019s biggest challenges in IoT is interoperability. There are a plethora of devices, all of which solve specific problems with the help of sensors, actuators, communication modules, and local processing. Due to a lack of standards, devices use different communication protocols, data formats, and device management mechanisms. As a result, unique processes need to be implemented in order to make sense of the devices\u2019 data and manage them remotely over time. Once the device data reaches the cloud, it becomes challenging to interpret as each device uses a unique data format. Device management is usually embedded into the application firmware, and configurations can be updated using specific commands sent from the server, making it complex to implement when working with various devices. Finally, firmware updates are very challenging to implement. If FOTA (Firmware Over The Air) is implemented at all, it is custom built for each project. Managing a mixed fleet of devices and integrating the data into one platform is hard to realize.","title":"Today\u2019s challenges when developing IoT solutions"},{"location":"academy/module1/#lightweight-m2m","text":"To answer the industry\u2019s need for an easy, fast, and power-efficient device management mechanism, the OMA SpecWorks created a communication standard for IoT devices called Lightweight Machine-to-Machine (LwM2M) . The LwM2M protocol, released in 2017, was designed to simplify messaging and device management for resource-constrained IoT devices. The LwM2M optimizes bandwidth efficient consumption by using space-efficient binary payloads and introduces support for wireless standards such as NB-IoT, LTE-M, Bluetooth, WiFi, and SMS transport. It includes a uniform data format for easy interpretation of data, standardized device management processes, and support for FOTA (Firmware Over The Air). When IoT devices adhere to the LwM2M standard, cloud applications can easily interpret data, and devices independent of the manufacturer, hardware, or software can be managed the same way.","title":"Lightweight M2M"},{"location":"academy/module1/#lwm2m-architecture","text":"The architecture of a LwM2M application contains 3 components: The LwM2M Client runs on the end device and ensures a secure connection with the LwM2M Server and optionally Bootstrap Server. All data sent from the clients is formatted as dictated by the LwM2M standard. The LwM2M Server manages devices including their configurations and firmware in the cloud. It also captures and stores all telemetry data sent from the LwM2M Clients. The LwM2M Bootstrap Server is a cloud service to authenticate and provision LwM2M Clients. This is an optional component used to improve the application\u2019s security.","title":"LwM2M architecture"},{"location":"academy/module1/#lwm2m-data-format","text":"In order to manage devices and process their data, components of IoT systems must be able to \u201cspeak\u201d the same language. This not only relates to the communication protocol but also to the data structure. The LwM2M standard realizes an interoperable data structure through the use of its LwM2M Object Model . LwM2M Objects represent configurations, functionalities, and sensors of IoT devices. By structuring the Objects in a particular manner, a language is created which both the LwM2M Client and the LwM2M Server can understand. This language is organized in (most situations as) a three-level tree comprising Objects which consist of Object Instances , and Object Instances consist of Resources . Entities on each of those levels are identified with numerical identifiers in the range 0-65534 and defined by the OMA in the LwM2M Registry . The language follows a sequence containing the Object ID, Object Instance ID, and Resource ID. To be more precise, a URI is made up of three unsigned 16-bit integers that are separated by the ' / ' character and look like this: /<object_ID>/<object_instance_ID>/<resource_ID> For example, a GNSS module generates location data containing latitude and longitude values. The URI of the latitude is: /6/0/0 , and the URI of the longitude is: /6/0/1 . 6 \u2192 The ID of the Location Object 0 \u200b\u200b\u2192 Instance 0 of the Location Object 0 \u2192 The ID of the latitude Resource 1 \u2192 The ID of the longitude Resource Objects - Devices contain different building blocks, each of these blocks is represented by an Object and identified by an Object ID . For example, the Firmware Update Object is used to invoke and track the status of the firmware update process. Objects can also describe the connectivity technology (e.g. cellular or WiFi), device information (serial number, manufacturer, firmware version), sensors (temperature, air quality), or peripherals (GPS, LEDs, buzzers). Object Instances - Some Objects are described as \u201csingle-instance\u201d. Such Objects have exactly one Instance with the identifier /0 . Examples are the Device Object which describes the device itself, and the Firmware Update Object which is used to perform firmware upgrades. Other Objects have multiple Instances. Examples of such Objects include the Object that manages connections to LwM2M Servers as multiple LwM2M Servers can be configured. Devices can also use Object Instances when using multiple SIMs with different APN profiles. When devices contain multiple identical sensors, Object Instances are used to distinguish the different sensors. Resources - Object Instances have one or multiple Resources. Resources can be represented as certain data types such as string, integer, Boolean, or float. For example, the \u201cDevice\u201d Object has multiple Resources such as the manufacturer , serial number , and firmware version . The \u201cLocation\u201d Object has the Resources' latitude, longitude , and altitude . Resource Instances - In some cases, Resources have multiple Resource Instances which turns the language into a four-level tree. For example: Device Object /3 includes Resource /6 : Available Power Sources. The different Resource Instances describe the different power sources: 0 : DC power 1 : Internal Battery 2 : External Battery 3 : Fuel Cell 4 : Power over Ethernet 5 : USB 6 : AC (Mains) power 7 : Solar To describe the availability of solar power, the URI becomes: /3/0/6/7 Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"LwM2M data format"},{"location":"academy/module2/","text":"Module 2 - Getting Started with LwM2M # Introduction # Welcome to the second module of the LwM2M Academy. In the previous module, we introduced the LwM2M protocol and its key features. In this module, we will dive deeper into the technical details of LwM2M by focusing on the mandatory Objects that must be implemented by all compliant devices. These Objects provide a standardized way to represent various aspects of an IoT device, such as its security settings, device information, and server connection. Additionally, we will discuss the different security modes of LwM2M both in theory as well as in practice. Mandatory Objects are: Security /0 , Server Object /1 & Device /3 Mandatory Objects # LwM2M is a protocol designed for efficient communication between IoT devices and servers. It is a client-server protocol where IoT devices (known as LwM2M Clients ) communicate with LwM2M Servers using various networking technologies such as cellular, WiFi, or Ethernet. To ensure interoperability and standardization among different LwM2M implementations, the protocol defines a set of mandatory Objects that LwM2M Clients must implement. These Objects provide a baseline level of functionality that enables LwM2M Servers to communicate effectively with LwM2M Clients, regardless of the specific use case or vendor. The mandatory Objects cover essential aspects of the LwM2M protocol regarding security, server management, and device management. They enable LwM2M Servers to authenticate and authorize LwM2M Clients, manage their connection, and retrieve important information about their status and capabilities. By defining mandatory objects, the LwM2M protocol ensures that LwM2M implementations are consistent and interoperable, which ultimately leads to greater efficiency, scalability, and ease of deployment for IoT devices and services. The three mandatory Objects are: # Security Object (Object /0 ) - This Object is responsible for the management of security credentials and the establishment of secure communication between the LwM2M Client and the LwM2M Server. It contains Resources for specifying the security mode, identity, keys, and other security-related parameters. Server Object (Object /1 ) - This Object is responsible for the management of the LwM2M Server to which the LwM2M Client is connected. It contains Resources for specifying the server address, lifetime of the registration, and other server-related parameters. Device Object (Object /3 ) - This Object provides information about the LwM2M Client device. It contains Resources for specifying the device manufacturer, model number, firmware version, battery level (if available), and other device-related parameters. The OMA LwM2M Object and Resource Registry The OMA LwM2M Object and Resource Registry is a comprehensive database containing all the LwM2M Objects and Resources that have been defined by the Open Mobile Alliance (OMA). The registry serves as a reference guide for developers who are implementing the LwM2M standard. The Registry is organized by Object ID. Each Object in the Registry is associated with a set of Resources, which are identified by Resource ID. The registry provides clear descriptions, data types, and usage guidelines for each Object and Resource. Open up the Object and Resource Registry and have a look at the Registry and go through the three mandatory Objects. Note: At the time of writing, LwM2M version 1.1 is most commonly used. LwM2M security # Security is a crucial aspect of any IoT deployment. The LwM2M standard defines security features to ensure secure and reliable communication between devices and servers. These security features are critical for protecting IoT devices from attacks and ensuring the authenticity, confidentiality, and integrity of the data exchange. Authentication means that a receiver can determine the sender of a message \u2013 and vice versa. Confidentiality means that only the receiving endpoint can read the sender\u2019s message. Integrity means that the data message has not been tampered with. Two layers of security are implemented when using LwM2M. The transport layer is secured using DTLS (for UDP traffic) or TLS (for TCP traffic). The application layer is protected using OSCORE (optional). DTLS and OSCORE can work together to provide end-to-end security. DTLS/TLS is used to establish a secure channel between the client and server, and OSCORE is used to encrypt and protect messages exchanged within that channel. This approach provides multiple layers of security, ensuring that the communication channel and the data being exchanged within that channel are both protected against unauthorized access and tampering. The transport layer is secured using DTLS or TLS. The application layer is protected using OSCORE. Security modes # There are different ways for the LwM2M Server to authenticate LwM2M Clients. All options as defined in the Security Mode Resource : /0/x/2 . The most commonly used modes are: Pre-Shared Key mode - Communication is symmetrically encrypted and authenticated using the same secret key, shared between the server and the client. Certificate mode - An asymmetrical public-key cryptographic algorithm is used to authenticate the connection endpoints and initialize payload encryption. Appropriate certificates need to be generated for both the LwM2M Client and the LwM2M Server. Public certificates of both parties are mutually available, and each party also has access to its own corresponding private key. NoSec mode - Encryption and authentication are disabled and the messages are passed in plain text over the network. It is not recommended to be used in production environments unless end-to-end security is provided on a lower layer (e.g. IPsec). The NoSec mode is mostly useful for development, testing, and debugging purposes. Bootstrap Server # When using the LwM2M standard, a Bootstrap Server can be used to provision LwM2M Clients. Instead of connecting to the LwM2M Server directly, the Client connects to a Bootstrap Server to derive the necessary configuration information to securely connect to a LwM2M Server. Configuration information includes the address of the LwM2M Server and the security credentials to establish a secure connection. At any time, the LwM2M Server can instruct the device to send a new bootstrap request to update its security credentials, and/or to update the server address it\u2019s connected to. The Bootstrap Server is defined in the LwM2M Server URI Resource: /0/x/0 , and Bootstrap-Server Resource /0/x/1 . Note: Bootstrapping is an advanced feature and won\u2019t be covered in this course. Registration # Before telemetry data can be exchanged, the device needs to register to a LwM2M Server. In the registration process, the Client connects to a Server and includes device-specific information such as its name, security credentials, and a list of supported Objects and Object Instances. The Server validates this information and responds whether the registration was successful. At regular intervals, the Client sends update messages informing the Server about being alive and functioning properly. If new Objects, Object Instances, or Resources are added over time, the Server gets synchronized with the Client during the status update message. Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Theory Module 2"},{"location":"academy/module2/#module-2-getting-started-with-lwm2m","text":"","title":"Module 2 - Getting Started with LwM2M"},{"location":"academy/module2/#introduction","text":"Welcome to the second module of the LwM2M Academy. In the previous module, we introduced the LwM2M protocol and its key features. In this module, we will dive deeper into the technical details of LwM2M by focusing on the mandatory Objects that must be implemented by all compliant devices. These Objects provide a standardized way to represent various aspects of an IoT device, such as its security settings, device information, and server connection. Additionally, we will discuss the different security modes of LwM2M both in theory as well as in practice. Mandatory Objects are: Security /0 , Server Object /1 & Device /3","title":"Introduction"},{"location":"academy/module2/#mandatory-objects","text":"LwM2M is a protocol designed for efficient communication between IoT devices and servers. It is a client-server protocol where IoT devices (known as LwM2M Clients ) communicate with LwM2M Servers using various networking technologies such as cellular, WiFi, or Ethernet. To ensure interoperability and standardization among different LwM2M implementations, the protocol defines a set of mandatory Objects that LwM2M Clients must implement. These Objects provide a baseline level of functionality that enables LwM2M Servers to communicate effectively with LwM2M Clients, regardless of the specific use case or vendor. The mandatory Objects cover essential aspects of the LwM2M protocol regarding security, server management, and device management. They enable LwM2M Servers to authenticate and authorize LwM2M Clients, manage their connection, and retrieve important information about their status and capabilities. By defining mandatory objects, the LwM2M protocol ensures that LwM2M implementations are consistent and interoperable, which ultimately leads to greater efficiency, scalability, and ease of deployment for IoT devices and services.","title":"Mandatory Objects"},{"location":"academy/module2/#the-three-mandatory-objects-are","text":"Security Object (Object /0 ) - This Object is responsible for the management of security credentials and the establishment of secure communication between the LwM2M Client and the LwM2M Server. It contains Resources for specifying the security mode, identity, keys, and other security-related parameters. Server Object (Object /1 ) - This Object is responsible for the management of the LwM2M Server to which the LwM2M Client is connected. It contains Resources for specifying the server address, lifetime of the registration, and other server-related parameters. Device Object (Object /3 ) - This Object provides information about the LwM2M Client device. It contains Resources for specifying the device manufacturer, model number, firmware version, battery level (if available), and other device-related parameters. The OMA LwM2M Object and Resource Registry The OMA LwM2M Object and Resource Registry is a comprehensive database containing all the LwM2M Objects and Resources that have been defined by the Open Mobile Alliance (OMA). The registry serves as a reference guide for developers who are implementing the LwM2M standard. The Registry is organized by Object ID. Each Object in the Registry is associated with a set of Resources, which are identified by Resource ID. The registry provides clear descriptions, data types, and usage guidelines for each Object and Resource. Open up the Object and Resource Registry and have a look at the Registry and go through the three mandatory Objects. Note: At the time of writing, LwM2M version 1.1 is most commonly used.","title":"The three mandatory Objects are:"},{"location":"academy/module2/#lwm2m-security","text":"Security is a crucial aspect of any IoT deployment. The LwM2M standard defines security features to ensure secure and reliable communication between devices and servers. These security features are critical for protecting IoT devices from attacks and ensuring the authenticity, confidentiality, and integrity of the data exchange. Authentication means that a receiver can determine the sender of a message \u2013 and vice versa. Confidentiality means that only the receiving endpoint can read the sender\u2019s message. Integrity means that the data message has not been tampered with. Two layers of security are implemented when using LwM2M. The transport layer is secured using DTLS (for UDP traffic) or TLS (for TCP traffic). The application layer is protected using OSCORE (optional). DTLS and OSCORE can work together to provide end-to-end security. DTLS/TLS is used to establish a secure channel between the client and server, and OSCORE is used to encrypt and protect messages exchanged within that channel. This approach provides multiple layers of security, ensuring that the communication channel and the data being exchanged within that channel are both protected against unauthorized access and tampering. The transport layer is secured using DTLS or TLS. The application layer is protected using OSCORE.","title":"LwM2M security"},{"location":"academy/module2/#security-modes","text":"There are different ways for the LwM2M Server to authenticate LwM2M Clients. All options as defined in the Security Mode Resource : /0/x/2 . The most commonly used modes are: Pre-Shared Key mode - Communication is symmetrically encrypted and authenticated using the same secret key, shared between the server and the client. Certificate mode - An asymmetrical public-key cryptographic algorithm is used to authenticate the connection endpoints and initialize payload encryption. Appropriate certificates need to be generated for both the LwM2M Client and the LwM2M Server. Public certificates of both parties are mutually available, and each party also has access to its own corresponding private key. NoSec mode - Encryption and authentication are disabled and the messages are passed in plain text over the network. It is not recommended to be used in production environments unless end-to-end security is provided on a lower layer (e.g. IPsec). The NoSec mode is mostly useful for development, testing, and debugging purposes.","title":"Security modes"},{"location":"academy/module2/#bootstrap-server","text":"When using the LwM2M standard, a Bootstrap Server can be used to provision LwM2M Clients. Instead of connecting to the LwM2M Server directly, the Client connects to a Bootstrap Server to derive the necessary configuration information to securely connect to a LwM2M Server. Configuration information includes the address of the LwM2M Server and the security credentials to establish a secure connection. At any time, the LwM2M Server can instruct the device to send a new bootstrap request to update its security credentials, and/or to update the server address it\u2019s connected to. The Bootstrap Server is defined in the LwM2M Server URI Resource: /0/x/0 , and Bootstrap-Server Resource /0/x/1 . Note: Bootstrapping is an advanced feature and won\u2019t be covered in this course.","title":"Bootstrap Server"},{"location":"academy/module2/#registration","text":"Before telemetry data can be exchanged, the device needs to register to a LwM2M Server. In the registration process, the Client connects to a Server and includes device-specific information such as its name, security credentials, and a list of supported Objects and Object Instances. The Server validates this information and responds whether the registration was successful. At regular intervals, the Client sends update messages informing the Server about being alive and functioning properly. If new Objects, Object Instances, or Resources are added over time, the Server gets synchronized with the Client during the status update message. Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Registration"},{"location":"academy/module3/","text":"Module 3 - Building LwM2M Applications # Introduction # LwM2M uses a Client-Server architecture, designed to efficiently communicate data between IoT devices and cloud services. Let\u2019s dive into the communication process and discuss the underlying communication mechanisms to ensure reliable communication of application payload and device management operations. IoT Communication Protocols # In order to convey a message from the device to the cloud and vice versa, both the Client and the Server need to agree on a common language to make sense of the data, as well as a delivery method to communicate effectively. As we learned in the previous modules, the LwM2M standard uses the LwM2M Object Model to format the data so it can be comprehended by both the Client and Server. Let\u2019s have a look at the delivery method which ensures the LwM2M data messages end up in the right place at the right time. CoAP # The LwM2M standard uses the CoAP (Constrained Application) protocol to get the messages from the Client to and from the Server. Think of CoAP as the HTTP protocol, but optimized for resource-constrained devices. CoAP is designed to be lightweight using low overhead due to a small header size and the use of UDP (User Datagram Protocol) as its underlying transport protocol. Because UDP does not guarantee data delivery, CoAP provides message reliability mechanisms, e.g. by allowing devices to send unconfirmed and confirmed messages, the latter needs to be acknowledged by the receiver, hence improving the reliability of the data transfer. Although CoAP supports transmission over TCP, UDP is typically the preferred choice for IoT applications due to its small overhead and simple implementation. This comes at the cost of reliability; UDP does not guarantee data delivery as acknowledgments or retransmissions are not embedded in the protocol. In contrast, TCP does establish and maintain a connection before the start of the data transmission. TCP ensures that data gets delivered by tracking which packets are received and retransmitting the packets which get lost during transmission. This results in more reliability which comes at the cost of larger overhead and higher latency compared to UDP. CoAP vs MQTT MQTT (Message Queuing Telemetry Transport) is the most widely implemented messaging protocol in IoT. MQTT is often compared with CoAP as both protocols provide a lightweight transport mechanism which is well-suited for resource-constrained IoT devices. Whereas CoAP is relatively new with its specifications being introduced in 2014, MQTT dates all the way back to 1999. Even though the messaging protocols can be seemingly used interchangeably, there are some key differences in the architectures. MQTT is a publish-subscribe messaging protocol where clients (IoT Devices) communicate using TCP to a server which is referred to as the Broker. Each message is sent to an address known as a topic, e.g. /temperature. Clients can subscribe to one or multiple topics and get notified when new data is received on any of those topics. Due to the publish-subscribe architecture, communication can happen one-to-one, one-to-many and many-to-one. MQTT knows three levels of Quality of Service (QoS), from 0 to 2 QoS 0: At most once. Data is sent without acknowledgment QoS 1: At least once. A message requires an acknowledgment, ensuring the data reaches the receiver. QoS 2: Exactly once. Through the process of a four-step handshake, the sender ensures the data is received exactly once. A variation of the MQTT protocol is called MQTT-SN (MQTT for Sensor Networks) and is designed for sensor networks as it supports UDP transport. CoAP uses \u2014 similar to HTTP \u2014 a request-response model. It uses UDP by default, but it can also run on top of TCP or SMS. Unconfirmed messages are similar to MQTT QoS 0, confirmed messages with MQTT QoS 1. Similar to MQTT, data is sent to specific addresses. When using CoAP we refer to these addresses as URIs . CoAP provides support for a publish-subscribe architecture; specific resources can be Observed . Every time an observed value changes an update is sent to the Server. Due to the underlying UDP transport layer, CoAP messages are somewhat smaller than MQTT packets due to the smaller overhead. An advantage of CoAP is the interoperability with HTTP. Because of the many similarities, it is relatively easy to translate HTTP requests to and from CoAP requests. LwM2M operations # CoAP took its inspiration from web APIs which depend on the REST architecture. CoAP uses similar methods but optimized for IoT applications. A Client or Server sends a request and \u2013 depending on the request \u2013 awaits a response which includes a response code. The methods used by CoAP are GET, POST, PUT, DELETE, FETCH, and (i)PATCH. Due to its similarities with HTTP, CoAP is interoperable with HTTP with only a translation proxy between the protocols. The CoAP GET request can be used to Observe a specific resource. When a resource updates its value (e.g. after a new sensor reading), the Client directly sends an update to the Server. These CoAP commands are utilized by the LwM2M standard and are referred to as Operations . Operations come in different forms to support the registration of devices, to report telemetry data and to manage device configurations or firmware. All LwM2M Operations are based on the CoAP request/response methods . In the previous modules, we learned about the Bootstrap and Registration processes \u2013 referred to as interfaces . Both interfaces use a combination of CoAP commands. E.g. during the registration process, the LwM2M Client sends a Request operation to the LwM2M Server using a CoAP POST to inform the Server of its existence and provides metadata describing its data model and IP address. When a Bootstrap Server is used, the LwM2M Client sends a Bootstrap-Request (CoAP POST) to trigger the bootstrap sequence, after which the Bootstrap server sends a Bootstrap Discover using the CoAP GET command to request information about the data model supported by the Client. Data encoding formats # Whereas humans comprehend information through words, computers prefer information to be encoded in a more compact way, allowing for faster processing of data. There are different encoding formats (also known as content formats ) which are optimized for resource-constrained devices. LwM2M supports several encoding formats including plain text , opaque , TLV , JSON , CoRE Link , CBOR , and SenML . The different encoding formats are used for different LwM2M Operations, as defined by the specifications . Let\u2019s discuss these formats in more detail. Note It is not required to fully understand the data encoding formats. LwM2M Client libraries automatically encode the information in such a way it meets the encoding and LwM2M data format criteria. Plain text : used for READ and WRITE operations on Resources. Example: Req: Get /3/0/0 Res: 2.05 Content Open Mobile Alliance Opaque : used for READ and WRITE operations on Resources where the value of the Resource is an opaque sequence of binary octets. CBOR : the Concise Binary Object Representation format is used for READ and WRITE operations on Resources. CoRE Link : the CoRE Link content format is used as a response to DISCOVER operations and contains a list of Objects, Objects Instances, Resources and Resource Instances. TLV : the Type-Length-Value format can be used for READ and WRITE operations and represents a singular or an array of values. For example, if the LwM2M Server requests to READ the Device Object Instance /3/0 , the client may reply using TLV payload which includes all readable Resources. TLV payload Translation C8 00 14 4F 70 65 6E 20 4D 6F 62 69 6C 65 20 41 6C 6C 69 61 6E 63 65 C8 01 16 4C 69 67 68 74 77 65 69 67 74 20 4D 32 4D 20 43 6C 69 65 6E 74 C8 02 09 33 34 35 30 30 30 31 32 33 C3 03 31 2E 30 86 06 41 00 01 41 01 05 C1 09 64 /0 Open Mobile Alliance /1 Lightweight M2M Client /2 345000123 /3 1.0 /7 /0 /5 /9 100 SenML (Sensor Measurement Lists) is a popular encoding format used for READ and WRITE operations, specifically with the operations READ-Composite and WRITE-Composite. SenML comes in a SenML JSON and SenML CBOR variant. For example, the following shows a single SenML JSON Record containing temperature ( /3303/x/5700 ), humidity ( /3304/x/5700 ) and location data ( /6/x/0 & /6/0/1 ). [ {\"n\":\"/3303/0/5700\",\"t\":1681817678,\"v\":23.1}, {\"n\":\"/3304/0/5700\",\"t\":1681817678,\"v\":54.4}, {\"n\":\"/6/0/0\",\"t\":1681817678,\"v\":43.61092}, {\"n\":\"/6/0/1\",\"t\":1681817678,\"v\":3.87723}, ] \u201cn\u201d represents the name and follows the LwM2M Object Model, \u201ct\u201d contains the timestamp and \u201cv\u201d field represents the value as a float. Alternative value fields are: Boolean \u201cvb\u201c , Object Link Value \u201cvlo\u201c , Opaque Value \u201cvd\u201c or String \u201cvs\u201c . SenML CBOR follows the same pattern as SenML JSON, but is harder to read for humans. The previous message can also be written in SenML CBOR which is a binary format and looks something like this: A4 83 18 67 98 56 42 02 82 00 18 3B 0F 7B 76 82 00 18 3E 48 3C 29 82 00 18 41 CE 4B FD 82 01 18 3F B2 A7 28 Useful Resources # Efficient transport of telemetry data in IoT with the LwM2M protocol Comparing the efficiency of LwM2M and MQTT: hands-on test results of two technology clients on a typical IoT device LwM2M v1.1 Technical specifications CoAP specifications SenML specifications Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Theory Module 3"},{"location":"academy/module3/#module-3-building-lwm2m-applications","text":"","title":"Module 3 - Building LwM2M Applications"},{"location":"academy/module3/#introduction","text":"LwM2M uses a Client-Server architecture, designed to efficiently communicate data between IoT devices and cloud services. Let\u2019s dive into the communication process and discuss the underlying communication mechanisms to ensure reliable communication of application payload and device management operations.","title":"Introduction"},{"location":"academy/module3/#iot-communication-protocols","text":"In order to convey a message from the device to the cloud and vice versa, both the Client and the Server need to agree on a common language to make sense of the data, as well as a delivery method to communicate effectively. As we learned in the previous modules, the LwM2M standard uses the LwM2M Object Model to format the data so it can be comprehended by both the Client and Server. Let\u2019s have a look at the delivery method which ensures the LwM2M data messages end up in the right place at the right time.","title":"IoT Communication Protocols"},{"location":"academy/module3/#coap","text":"The LwM2M standard uses the CoAP (Constrained Application) protocol to get the messages from the Client to and from the Server. Think of CoAP as the HTTP protocol, but optimized for resource-constrained devices. CoAP is designed to be lightweight using low overhead due to a small header size and the use of UDP (User Datagram Protocol) as its underlying transport protocol. Because UDP does not guarantee data delivery, CoAP provides message reliability mechanisms, e.g. by allowing devices to send unconfirmed and confirmed messages, the latter needs to be acknowledged by the receiver, hence improving the reliability of the data transfer. Although CoAP supports transmission over TCP, UDP is typically the preferred choice for IoT applications due to its small overhead and simple implementation. This comes at the cost of reliability; UDP does not guarantee data delivery as acknowledgments or retransmissions are not embedded in the protocol. In contrast, TCP does establish and maintain a connection before the start of the data transmission. TCP ensures that data gets delivered by tracking which packets are received and retransmitting the packets which get lost during transmission. This results in more reliability which comes at the cost of larger overhead and higher latency compared to UDP. CoAP vs MQTT MQTT (Message Queuing Telemetry Transport) is the most widely implemented messaging protocol in IoT. MQTT is often compared with CoAP as both protocols provide a lightweight transport mechanism which is well-suited for resource-constrained IoT devices. Whereas CoAP is relatively new with its specifications being introduced in 2014, MQTT dates all the way back to 1999. Even though the messaging protocols can be seemingly used interchangeably, there are some key differences in the architectures. MQTT is a publish-subscribe messaging protocol where clients (IoT Devices) communicate using TCP to a server which is referred to as the Broker. Each message is sent to an address known as a topic, e.g. /temperature. Clients can subscribe to one or multiple topics and get notified when new data is received on any of those topics. Due to the publish-subscribe architecture, communication can happen one-to-one, one-to-many and many-to-one. MQTT knows three levels of Quality of Service (QoS), from 0 to 2 QoS 0: At most once. Data is sent without acknowledgment QoS 1: At least once. A message requires an acknowledgment, ensuring the data reaches the receiver. QoS 2: Exactly once. Through the process of a four-step handshake, the sender ensures the data is received exactly once. A variation of the MQTT protocol is called MQTT-SN (MQTT for Sensor Networks) and is designed for sensor networks as it supports UDP transport. CoAP uses \u2014 similar to HTTP \u2014 a request-response model. It uses UDP by default, but it can also run on top of TCP or SMS. Unconfirmed messages are similar to MQTT QoS 0, confirmed messages with MQTT QoS 1. Similar to MQTT, data is sent to specific addresses. When using CoAP we refer to these addresses as URIs . CoAP provides support for a publish-subscribe architecture; specific resources can be Observed . Every time an observed value changes an update is sent to the Server. Due to the underlying UDP transport layer, CoAP messages are somewhat smaller than MQTT packets due to the smaller overhead. An advantage of CoAP is the interoperability with HTTP. Because of the many similarities, it is relatively easy to translate HTTP requests to and from CoAP requests.","title":"CoAP"},{"location":"academy/module3/#lwm2m-operations","text":"CoAP took its inspiration from web APIs which depend on the REST architecture. CoAP uses similar methods but optimized for IoT applications. A Client or Server sends a request and \u2013 depending on the request \u2013 awaits a response which includes a response code. The methods used by CoAP are GET, POST, PUT, DELETE, FETCH, and (i)PATCH. Due to its similarities with HTTP, CoAP is interoperable with HTTP with only a translation proxy between the protocols. The CoAP GET request can be used to Observe a specific resource. When a resource updates its value (e.g. after a new sensor reading), the Client directly sends an update to the Server. These CoAP commands are utilized by the LwM2M standard and are referred to as Operations . Operations come in different forms to support the registration of devices, to report telemetry data and to manage device configurations or firmware. All LwM2M Operations are based on the CoAP request/response methods . In the previous modules, we learned about the Bootstrap and Registration processes \u2013 referred to as interfaces . Both interfaces use a combination of CoAP commands. E.g. during the registration process, the LwM2M Client sends a Request operation to the LwM2M Server using a CoAP POST to inform the Server of its existence and provides metadata describing its data model and IP address. When a Bootstrap Server is used, the LwM2M Client sends a Bootstrap-Request (CoAP POST) to trigger the bootstrap sequence, after which the Bootstrap server sends a Bootstrap Discover using the CoAP GET command to request information about the data model supported by the Client.","title":"LwM2M operations"},{"location":"academy/module3/#data-encoding-formats","text":"Whereas humans comprehend information through words, computers prefer information to be encoded in a more compact way, allowing for faster processing of data. There are different encoding formats (also known as content formats ) which are optimized for resource-constrained devices. LwM2M supports several encoding formats including plain text , opaque , TLV , JSON , CoRE Link , CBOR , and SenML . The different encoding formats are used for different LwM2M Operations, as defined by the specifications . Let\u2019s discuss these formats in more detail. Note It is not required to fully understand the data encoding formats. LwM2M Client libraries automatically encode the information in such a way it meets the encoding and LwM2M data format criteria. Plain text : used for READ and WRITE operations on Resources. Example: Req: Get /3/0/0 Res: 2.05 Content Open Mobile Alliance Opaque : used for READ and WRITE operations on Resources where the value of the Resource is an opaque sequence of binary octets. CBOR : the Concise Binary Object Representation format is used for READ and WRITE operations on Resources. CoRE Link : the CoRE Link content format is used as a response to DISCOVER operations and contains a list of Objects, Objects Instances, Resources and Resource Instances. TLV : the Type-Length-Value format can be used for READ and WRITE operations and represents a singular or an array of values. For example, if the LwM2M Server requests to READ the Device Object Instance /3/0 , the client may reply using TLV payload which includes all readable Resources. TLV payload Translation C8 00 14 4F 70 65 6E 20 4D 6F 62 69 6C 65 20 41 6C 6C 69 61 6E 63 65 C8 01 16 4C 69 67 68 74 77 65 69 67 74 20 4D 32 4D 20 43 6C 69 65 6E 74 C8 02 09 33 34 35 30 30 30 31 32 33 C3 03 31 2E 30 86 06 41 00 01 41 01 05 C1 09 64 /0 Open Mobile Alliance /1 Lightweight M2M Client /2 345000123 /3 1.0 /7 /0 /5 /9 100 SenML (Sensor Measurement Lists) is a popular encoding format used for READ and WRITE operations, specifically with the operations READ-Composite and WRITE-Composite. SenML comes in a SenML JSON and SenML CBOR variant. For example, the following shows a single SenML JSON Record containing temperature ( /3303/x/5700 ), humidity ( /3304/x/5700 ) and location data ( /6/x/0 & /6/0/1 ). [ {\"n\":\"/3303/0/5700\",\"t\":1681817678,\"v\":23.1}, {\"n\":\"/3304/0/5700\",\"t\":1681817678,\"v\":54.4}, {\"n\":\"/6/0/0\",\"t\":1681817678,\"v\":43.61092}, {\"n\":\"/6/0/1\",\"t\":1681817678,\"v\":3.87723}, ] \u201cn\u201d represents the name and follows the LwM2M Object Model, \u201ct\u201d contains the timestamp and \u201cv\u201d field represents the value as a float. Alternative value fields are: Boolean \u201cvb\u201c , Object Link Value \u201cvlo\u201c , Opaque Value \u201cvd\u201c or String \u201cvs\u201c . SenML CBOR follows the same pattern as SenML JSON, but is harder to read for humans. The previous message can also be written in SenML CBOR which is a binary format and looks something like this: A4 83 18 67 98 56 42 02 82 00 18 3B 0F 7B 76 82 00 18 3E 48 3C 29 82 00 18 41 CE 4B FD 82 01 18 3F B2 A7 28","title":"Data encoding formats"},{"location":"academy/module3/#useful-resources","text":"Efficient transport of telemetry data in IoT with the LwM2M protocol Comparing the efficiency of LwM2M and MQTT: hands-on test results of two technology clients on a typical IoT device LwM2M v1.1 Technical specifications CoAP specifications SenML specifications Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Useful Resources"},{"location":"academy/module4/","text":"Module 4: Device Management using LwM2M # Introduction # One of the key reasons people choose LwM2M is its ability to manage IoT devices at scale. Device management is critical for ensuring reliable operation of IoT systems throughout their entire lifetime. Device management involves the remote configuration of device parameters. This includes renewing security credentials, adjusting the intervals between data collections, updating the device\u2019s firmware and modifying device settings such as the APN, WiFi credentials or sensor calibrations. The LwM2M protocol defines a standardized approach for efficiently managing IoT devices deployed in the field. In this module we will dive into the device management capabilities of the standard and explore its features and functionalities in detail. Interfaces # LwM2M specifies four distinct interfaces. We have already discussed two of them in previous modules: the Bootstrap Interface and the Registration Interface (see module 2). The standard defines two additional interfaces: the Device Management Interface and the Information Reporting Interface . Let\u2019s explore these interfaces and understand how they contribute to efficient IoT device management Device Management Interface # The Device Management and Service Enablement Interface (as the full name goes) serves as the primary interface for device management. In this interface, all of the requests are initiated by the LwM2M Server and include standardized instructions which the LwM2M Client needs to act upon. Various Operations can be initiated from the Server, ranging from reading a specific resource and executing a specific task, to writing device parameters and creating new Objects, Instances or Resources. Six different Operations can be sent to the LwM2M Client: DISCOVER : Retrieving the list of Objects and Resources supported by the Client. READ : Retrieving the current value of a specific Resource, or an Instance or Object as a whole. A variation of the READ operations is the READ-Composite which is used when reading multiple Objects, Object Instances and/or Resources in a single request. WRITE : Modifying the value of a specific Resource, Resource Instance, or an Instance or Object as a whole. Variations of the WRITE operation are WRITE-Composite and WRITE-Attributes. WRITE-Composite : Whereas the WRITE operation is limited to one Resource, Instance or Object, the WRITE-Composite operations can be used to updated values of a number of different Resources, Instances and/or Objects. WRITE-Attributes : Altering the attributes related to an Object, Object Instance or Resources, e.g. Minimum Period, Maximum Period, Greater Than, Less Than etc. EXECUTE : Invoking an action or operation on a Resource. For example instructing a device to reset, reboot or upgrade its firmware. CREATE : Creating a new Object Instance. DELETE : Deleting an Object Instance. Information Reporting Interface # The Information Reporting Interface is used by the Client to transmit telemetry data or state changes without explicit request from the LwM2M Server. The triggers for transmitting data can be programmed in the application firmware of the device. In this interface, the Server holds the ability to define the behavior of the device by requesting it to send data based on conditional logic. This involves requesting the Client to send data at specific time intervals (e.g. every 10 minutes), or when values exceed predefined thresholds (e.g. when temperature rises above 30 degrees). This way, the server keeps control over the data flow and can effectively monitor and manage the device's behavior in response to changing conditions or requirements. Server Operation OBSERVE : When the Observe operation is invoked, the Client starts sending NOTIFY messages to the Server about its data or state at configurable intervals. The OBSERVE operation is canceled when sending CANCEL OBSERVE . Set Observation in Coiote IoT Device Management platform Client Operations SEND : The SEND message is used by the Client to send data to the server without explicit request. Depending on the application firmware it can be used to report new measurements or inform the server about a change in telemetry data or state. NOTIFY : In response to the OBSERVE operation initiated from the server, the client sends NOTIFY operations with data. Usually, the server provides a bandwidth in which the client needs to send its data. Either time bound: e.g. at least every 1 hour, but no more than once every 15 minutes, or value bound: e.g. when value is greater than 30, less than 20 or when the value changes by at least 2. Example payload of a SEND operation containing the location and radio signal strength could look something like this (using SenML JSON): [ {\"n\":\"/4/0/2\", \"v\":-49}, {\"n\":\"/6/0/0\", \"v\":43.61092}, {\"n\":\"/6/0/1\", \"v\":3.87723} ] Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Theory Module 4"},{"location":"academy/module4/#module-4-device-management-using-lwm2m","text":"","title":"Module 4: Device Management using LwM2M"},{"location":"academy/module4/#introduction","text":"One of the key reasons people choose LwM2M is its ability to manage IoT devices at scale. Device management is critical for ensuring reliable operation of IoT systems throughout their entire lifetime. Device management involves the remote configuration of device parameters. This includes renewing security credentials, adjusting the intervals between data collections, updating the device\u2019s firmware and modifying device settings such as the APN, WiFi credentials or sensor calibrations. The LwM2M protocol defines a standardized approach for efficiently managing IoT devices deployed in the field. In this module we will dive into the device management capabilities of the standard and explore its features and functionalities in detail.","title":"Introduction"},{"location":"academy/module4/#interfaces","text":"LwM2M specifies four distinct interfaces. We have already discussed two of them in previous modules: the Bootstrap Interface and the Registration Interface (see module 2). The standard defines two additional interfaces: the Device Management Interface and the Information Reporting Interface . Let\u2019s explore these interfaces and understand how they contribute to efficient IoT device management","title":"Interfaces"},{"location":"academy/module4/#device-management-interface","text":"The Device Management and Service Enablement Interface (as the full name goes) serves as the primary interface for device management. In this interface, all of the requests are initiated by the LwM2M Server and include standardized instructions which the LwM2M Client needs to act upon. Various Operations can be initiated from the Server, ranging from reading a specific resource and executing a specific task, to writing device parameters and creating new Objects, Instances or Resources. Six different Operations can be sent to the LwM2M Client: DISCOVER : Retrieving the list of Objects and Resources supported by the Client. READ : Retrieving the current value of a specific Resource, or an Instance or Object as a whole. A variation of the READ operations is the READ-Composite which is used when reading multiple Objects, Object Instances and/or Resources in a single request. WRITE : Modifying the value of a specific Resource, Resource Instance, or an Instance or Object as a whole. Variations of the WRITE operation are WRITE-Composite and WRITE-Attributes. WRITE-Composite : Whereas the WRITE operation is limited to one Resource, Instance or Object, the WRITE-Composite operations can be used to updated values of a number of different Resources, Instances and/or Objects. WRITE-Attributes : Altering the attributes related to an Object, Object Instance or Resources, e.g. Minimum Period, Maximum Period, Greater Than, Less Than etc. EXECUTE : Invoking an action or operation on a Resource. For example instructing a device to reset, reboot or upgrade its firmware. CREATE : Creating a new Object Instance. DELETE : Deleting an Object Instance.","title":"Device Management Interface"},{"location":"academy/module4/#information-reporting-interface","text":"The Information Reporting Interface is used by the Client to transmit telemetry data or state changes without explicit request from the LwM2M Server. The triggers for transmitting data can be programmed in the application firmware of the device. In this interface, the Server holds the ability to define the behavior of the device by requesting it to send data based on conditional logic. This involves requesting the Client to send data at specific time intervals (e.g. every 10 minutes), or when values exceed predefined thresholds (e.g. when temperature rises above 30 degrees). This way, the server keeps control over the data flow and can effectively monitor and manage the device's behavior in response to changing conditions or requirements. Server Operation OBSERVE : When the Observe operation is invoked, the Client starts sending NOTIFY messages to the Server about its data or state at configurable intervals. The OBSERVE operation is canceled when sending CANCEL OBSERVE . Set Observation in Coiote IoT Device Management platform Client Operations SEND : The SEND message is used by the Client to send data to the server without explicit request. Depending on the application firmware it can be used to report new measurements or inform the server about a change in telemetry data or state. NOTIFY : In response to the OBSERVE operation initiated from the server, the client sends NOTIFY operations with data. Usually, the server provides a bandwidth in which the client needs to send its data. Either time bound: e.g. at least every 1 hour, but no more than once every 15 minutes, or value bound: e.g. when value is greater than 30, less than 20 or when the value changes by at least 2. Example payload of a SEND operation containing the location and radio signal strength could look something like this (using SenML JSON): [ {\"n\":\"/4/0/2\", \"v\":-49}, {\"n\":\"/6/0/0\", \"v\":43.61092}, {\"n\":\"/6/0/1\", \"v\":3.87723} ] Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Information Reporting Interface"},{"location":"academy/module5/","text":"Module 5: Firmware Updates Over The Air # Firmware updates over the air (FOTA) are becoming increasingly important as more and more resource-constrained IoT devices are being deployed. Physical access to devices can be expensive or impossible to realize when devices are deployed in remote, hard-to-reach locations. As a result, FOTA is in many cases the only way to fix bugs, patch security vulnerabilities, or add functionality to devices which are deployed in the field. The LwM2M protocol provides a standardized process for remote firmware updates. When developers follow the standardized guidelines provided by the protocol, updating the firmware of resource-constrained devices remotely can be accomplished effortlessly, regardless of the device or platform used. The LwM2M way of updating firmware # Remote firmware updates know many names, such as Firmware Update OTA (FUOTA) or Device Firmware Upgrade (DFU). Device vendors can develop their own custom FOTA mechanisms, however, these implementations are specific to the vendor or platform and cannot be easily ported to other systems. The problem of vendor compatibility can be resolved by adopting the LwM2M standard, which is hardware agnostic and can be implemented on any hardware platform. The LwM2M firmware update process consists of four steps: The LwM2M Client is triggered to initiate the firmware update process The Client downloads the firmware and reports to the LwM2M Server when the download is finished The Client performs the firmware update after validating the integrity and authenticity of the new firmware which is done through a process called secure boot . The Client attempts to run the new firmware and reports the status to the Server. If the update is successful, the device starts running the new firmware, if not, the device performs a rollback to the earlier firmware version. This procedure is defined in detail in the LwM2M specifications (see LwM2M specifications ). To add firmware update capabilities to a device, the Firmware Update Object /5 needs to be implemented containing all essential functionalities for conducting the update and reporting the status. Several LwM2M Clients natively support this Firmware Update Object, including AVSystem\u2019s Anjay LwM2M Client and Zephyr\u2019s LwM2M Client . Updating a device\u2019s firmware using Coiote IoT Device Management platform Download a new firmware # The LwM2M standard defines two methods to perform a firmware update, allowing either the Client or the Server to decide on the best moment to start the download of the new firmware. PULL method # In the PULL scenario, the LwM2M Server provides the device with the address of the server containing the firmware file known as the Package URI . The device subsequently downloads the firmware from the so-called firmware repository at the earliest available opportunity. PUSH method # In the PUSH scenario, the LwM2M Server determines the moment to initiate the firmware download, ideally based on the connectivity conditions. The device must have access to information such as Radio Signal Strength and Link Quality to support such server-side decision making. These resources are available in the LwM2M Connectivity Monitoring Object /4 . Firmware Delivery Methods Firmware Update Object # The FOTA process is defined in the Firmware Update Object /5 . This Object defines the update process using four states (defined by Resource /5/*/3 ), as well as multiple update results (defined by Resource /5/*/5 ) representing the most common outcomes of the firmware update process. Learn more about the Firmware Update Object on the OMA LwM2M Object and Resource Registry . Update States ID State Description state 0 Idle Before downloading and after successfully updating state 1 Downloading The new firmware is on the way state 2 Downloaded The firmware download is completed state 3 Updating The Client starts updating its firmware, after which it changes its state back to Idle Update Results Result Description update result 0 Initial value update result 1 Firmware updated successfully update result 2 Insufficient flash memory for the new firmware package update result 3 Out of RAM during downloading proces update result 4 Connection lost during downloading process update result 5 Integrity check failure for new downloaded package update result 6 Unsupported package type update result 7 Invalid URI update result 8 Firmware update failed update result 9 Unsupported protocol update result 10 Firmware update cancelled update result 11 Firmware update deferred Conclusion # Remote IoT device updates are essential for the long-term success of IoT applications, as physical access to devices is often impossible to realize. Updating firmware remotely poses some serious challenges, such as limited memory, battery capacity, available bandwidth, and unstable connections to the cloud. However, by adopting the LwM2M standard and following a structured approach with standardized states and error codes, developers can ensure that new firmware images can be safely sent to their fleet of devices in the field, regardless of hardware vendor or cloud platform used. Useful Resources # DevZone Firmware update documentation Anjay firmware update documentation Anjay Demo for Zephyr Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Theory Module 5"},{"location":"academy/module5/#module-5-firmware-updates-over-the-air","text":"Firmware updates over the air (FOTA) are becoming increasingly important as more and more resource-constrained IoT devices are being deployed. Physical access to devices can be expensive or impossible to realize when devices are deployed in remote, hard-to-reach locations. As a result, FOTA is in many cases the only way to fix bugs, patch security vulnerabilities, or add functionality to devices which are deployed in the field. The LwM2M protocol provides a standardized process for remote firmware updates. When developers follow the standardized guidelines provided by the protocol, updating the firmware of resource-constrained devices remotely can be accomplished effortlessly, regardless of the device or platform used.","title":"Module 5: Firmware Updates Over The Air"},{"location":"academy/module5/#the-lwm2m-way-of-updating-firmware","text":"Remote firmware updates know many names, such as Firmware Update OTA (FUOTA) or Device Firmware Upgrade (DFU). Device vendors can develop their own custom FOTA mechanisms, however, these implementations are specific to the vendor or platform and cannot be easily ported to other systems. The problem of vendor compatibility can be resolved by adopting the LwM2M standard, which is hardware agnostic and can be implemented on any hardware platform. The LwM2M firmware update process consists of four steps: The LwM2M Client is triggered to initiate the firmware update process The Client downloads the firmware and reports to the LwM2M Server when the download is finished The Client performs the firmware update after validating the integrity and authenticity of the new firmware which is done through a process called secure boot . The Client attempts to run the new firmware and reports the status to the Server. If the update is successful, the device starts running the new firmware, if not, the device performs a rollback to the earlier firmware version. This procedure is defined in detail in the LwM2M specifications (see LwM2M specifications ). To add firmware update capabilities to a device, the Firmware Update Object /5 needs to be implemented containing all essential functionalities for conducting the update and reporting the status. Several LwM2M Clients natively support this Firmware Update Object, including AVSystem\u2019s Anjay LwM2M Client and Zephyr\u2019s LwM2M Client . Updating a device\u2019s firmware using Coiote IoT Device Management platform","title":"The LwM2M way of updating firmware"},{"location":"academy/module5/#download-a-new-firmware","text":"The LwM2M standard defines two methods to perform a firmware update, allowing either the Client or the Server to decide on the best moment to start the download of the new firmware.","title":"Download a new firmware"},{"location":"academy/module5/#pull-method","text":"In the PULL scenario, the LwM2M Server provides the device with the address of the server containing the firmware file known as the Package URI . The device subsequently downloads the firmware from the so-called firmware repository at the earliest available opportunity.","title":"PULL method"},{"location":"academy/module5/#push-method","text":"In the PUSH scenario, the LwM2M Server determines the moment to initiate the firmware download, ideally based on the connectivity conditions. The device must have access to information such as Radio Signal Strength and Link Quality to support such server-side decision making. These resources are available in the LwM2M Connectivity Monitoring Object /4 . Firmware Delivery Methods","title":"PUSH method"},{"location":"academy/module5/#firmware-update-object","text":"The FOTA process is defined in the Firmware Update Object /5 . This Object defines the update process using four states (defined by Resource /5/*/3 ), as well as multiple update results (defined by Resource /5/*/5 ) representing the most common outcomes of the firmware update process. Learn more about the Firmware Update Object on the OMA LwM2M Object and Resource Registry . Update States ID State Description state 0 Idle Before downloading and after successfully updating state 1 Downloading The new firmware is on the way state 2 Downloaded The firmware download is completed state 3 Updating The Client starts updating its firmware, after which it changes its state back to Idle Update Results Result Description update result 0 Initial value update result 1 Firmware updated successfully update result 2 Insufficient flash memory for the new firmware package update result 3 Out of RAM during downloading proces update result 4 Connection lost during downloading process update result 5 Integrity check failure for new downloaded package update result 6 Unsupported package type update result 7 Invalid URI update result 8 Firmware update failed update result 9 Unsupported protocol update result 10 Firmware update cancelled update result 11 Firmware update deferred","title":"Firmware Update Object"},{"location":"academy/module5/#conclusion","text":"Remote IoT device updates are essential for the long-term success of IoT applications, as physical access to devices is often impossible to realize. Updating firmware remotely poses some serious challenges, such as limited memory, battery capacity, available bandwidth, and unstable connections to the cloud. However, by adopting the LwM2M standard and following a structured approach with standardized states and error codes, developers can ensure that new firmware images can be safely sent to their fleet of devices in the field, regardless of hardware vendor or cloud platform used.","title":"Conclusion"},{"location":"academy/module5/#useful-resources","text":"DevZone Firmware update documentation Anjay firmware update documentation Anjay Demo for Zephyr Provide your feedback We're constantly working on improving the LwM2M Academy. Please share with us your feedback about this module so we can create an even better learning experience. Feedback form","title":"Useful Resources"}]}